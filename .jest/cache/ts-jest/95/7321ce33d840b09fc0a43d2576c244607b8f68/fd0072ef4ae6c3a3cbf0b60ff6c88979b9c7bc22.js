import { setup, clear, getInterval, } from '../utils/checkConnectivityInterval';
describe('checkConnectivityInterval', function () {
    var mockConnectivityCheck = jest.fn();
    var setInterval = jest.fn(function () { return '1'; });
    var clearInterval = jest.fn();
    global.setInterval = setInterval;
    global.clearInterval = clearInterval;
    afterEach(function () {
        setInterval.mockClear();
        clearInterval.mockClear();
        mockConnectivityCheck.mockClear();
    });
    describe('setup', function () {
        it('sets an interval if checkConnectionInterval is higher than 0', function () {
            setup(mockConnectivityCheck, 3000);
            expect(global.setInterval).toHaveBeenCalledWith(mockConnectivityCheck, 3000);
            expect(getInterval()).toBe('1');
        });
        it('does nothing if checkConnectionInterval is NOT higher than 0', function () {
            setup(mockConnectivityCheck, 0);
            expect(global.setInterval).not.toHaveBeenCalled();
        });
    });
    describe('clear', function () {
        it('clears the interval if there was one active', function () {
            setup(mockConnectivityCheck, 3000);
            clear();
            expect(global.clearInterval).toHaveBeenCalledWith('1');
            expect(getInterval()).toBeNull();
        });
        it('does nothing if NO previous interval was set', function () {
            clear();
            expect(global.clearInterval).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0RldkFDL0Rlc2t0b3AvQW5nYXphL3JlYWN0LW9mZmxpbmUtc3luYy9zcmMvdGVzdC9jaGVja0Nvbm5lY3Rpdml0eUludGVydmFsLnRlc3QudHMiLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsV0FBVyxHQUNaLE1BQU0sd0NBQXdDLENBQUM7QUFFaEQsUUFBUSxDQUFDLDJCQUEyQixFQUFFO0lBQ3BDLElBQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ3hDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBTSxPQUFDLEdBQWlDLEVBQWxDLENBQWtDLENBQUMsQ0FBQztJQUN0RSxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDaEMsTUFBTSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDakMsTUFBTSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDckMsU0FBUyxDQUFDO1FBQ1IsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3hCLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMxQixxQkFBcUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFDaEIsRUFBRSxDQUFDLDhEQUE4RCxFQUFFO1lBQ2pFLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLG9CQUFvQixDQUM3QyxxQkFBcUIsRUFDckIsSUFBSSxDQUNMLENBQUM7WUFDRixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOERBQThELEVBQUU7WUFDakUsS0FBSyxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFDaEIsRUFBRSxDQUFDLDZDQUE2QyxFQUFFO1lBQ2hELEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNuQyxLQUFLLEVBQUUsQ0FBQztZQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUU7WUFDakQsS0FBSyxFQUFFLENBQUM7WUFDUixNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvRGV2QUMvRGVza3RvcC9BbmdhemEvcmVhY3Qtb2ZmbGluZS1zeW5jL3NyYy90ZXN0L2NoZWNrQ29ubmVjdGl2aXR5SW50ZXJ2YWwudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBzZXR1cCxcbiAgY2xlYXIsXG4gIGdldEludGVydmFsLFxufSBmcm9tICcuLi9zcmMvdXRpbHMvY2hlY2tDb25uZWN0aXZpdHlJbnRlcnZhbCc7XG5cbmRlc2NyaWJlKCdjaGVja0Nvbm5lY3Rpdml0eUludGVydmFsJywgKCkgPT4ge1xuICBjb25zdCBtb2NrQ29ubmVjdGl2aXR5Q2hlY2sgPSBqZXN0LmZuKCk7XG4gIGNvbnN0IHNldEludGVydmFsID0gamVzdC5mbigoKSA9PiAoJzEnIGFzIHVua25vd24pIGFzIE5vZGVKUy5UaW1lb3V0KTtcbiAgY29uc3QgY2xlYXJJbnRlcnZhbCA9IGplc3QuZm4oKTtcbiAgZ2xvYmFsLnNldEludGVydmFsID0gc2V0SW50ZXJ2YWw7XG4gIGdsb2JhbC5jbGVhckludGVydmFsID0gY2xlYXJJbnRlcnZhbDtcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBzZXRJbnRlcnZhbC5tb2NrQ2xlYXIoKTtcbiAgICBjbGVhckludGVydmFsLm1vY2tDbGVhcigpO1xuICAgIG1vY2tDb25uZWN0aXZpdHlDaGVjay5tb2NrQ2xlYXIoKTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdzZXR1cCcsICgpID0+IHtcbiAgICBpdCgnc2V0cyBhbiBpbnRlcnZhbCBpZiBjaGVja0Nvbm5lY3Rpb25JbnRlcnZhbCBpcyBoaWdoZXIgdGhhbiAwJywgKCkgPT4ge1xuICAgICAgc2V0dXAobW9ja0Nvbm5lY3Rpdml0eUNoZWNrLCAzMDAwKTtcbiAgICAgIGV4cGVjdChnbG9iYWwuc2V0SW50ZXJ2YWwpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBtb2NrQ29ubmVjdGl2aXR5Q2hlY2ssXG4gICAgICAgIDMwMDAsXG4gICAgICApO1xuICAgICAgZXhwZWN0KGdldEludGVydmFsKCkpLnRvQmUoJzEnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkb2VzIG5vdGhpbmcgaWYgY2hlY2tDb25uZWN0aW9uSW50ZXJ2YWwgaXMgTk9UIGhpZ2hlciB0aGFuIDAnLCAoKSA9PiB7XG4gICAgICBzZXR1cChtb2NrQ29ubmVjdGl2aXR5Q2hlY2ssIDApO1xuICAgICAgZXhwZWN0KGdsb2JhbC5zZXRJbnRlcnZhbCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NsZWFyJywgKCkgPT4ge1xuICAgIGl0KCdjbGVhcnMgdGhlIGludGVydmFsIGlmIHRoZXJlIHdhcyBvbmUgYWN0aXZlJywgKCkgPT4ge1xuICAgICAgc2V0dXAobW9ja0Nvbm5lY3Rpdml0eUNoZWNrLCAzMDAwKTtcbiAgICAgIGNsZWFyKCk7XG4gICAgICBleHBlY3QoZ2xvYmFsLmNsZWFySW50ZXJ2YWwpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcxJyk7XG4gICAgICBleHBlY3QoZ2V0SW50ZXJ2YWwoKSkudG9CZU51bGwoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkb2VzIG5vdGhpbmcgaWYgTk8gcHJldmlvdXMgaW50ZXJ2YWwgd2FzIHNldCcsICgpID0+IHtcbiAgICAgIGNsZWFyKCk7XG4gICAgICBleHBlY3QoZ2xvYmFsLmNsZWFySW50ZXJ2YWwpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=