import { setup, clear, getInterval, } from '../utils/checkConnectivityInterval';
describe('checkConnectivityInterval', function () {
    var mockConnectivityCheck = jest.fn();
    var setInterval = jest.fn(function () { return '1'; });
    var clearInterval = jest.fn();
    global.setInterval = setInterval;
    global.clearInterval = clearInterval;
    afterEach(function () {
        setInterval.mockClear();
        clearInterval.mockClear();
        mockConnectivityCheck.mockClear();
    });
    describe('setup', function () {
        it('sets an interval if checkConnectionInterval is higher than 0', function () {
            setup(mockConnectivityCheck, 3000);
            expect(global.setInterval).toHaveBeenCalledWith(mockConnectivityCheck, 3000);
            expect(getInterval()).toBe('1');
        });
        it('does nothing if checkConnectionInterval is NOT higher than 0', function () {
            setup(mockConnectivityCheck, 0);
            expect(global.setInterval).not.toHaveBeenCalled();
        });
    });
    describe('clear', function () {
        it('clears the interval if there was one active', function () {
            setup(mockConnectivityCheck, 3000);
            clear();
            expect(global.clearInterval).toHaveBeenCalledWith('1');
            expect(getInterval()).toBeNull();
        });
        it('does nothing if NO previous interval was set', function () {
            clear();
            expect(global.clearInterval).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0RldkFDL0Rlc2t0b3AvQW5nYXphL3JlYWN0LW9mZmxpbmUtc3luYy9zcmMvdGVzdC9jaGVja0Nvbm5lY3Rpdml0eUludGVydmFsLnRlc3QudHMiLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsV0FBVyxHQUNaLE1BQU0sb0NBQW9DLENBQUM7QUFFNUMsUUFBUSxDQUFDLDJCQUEyQixFQUFFO0lBQ3BDLElBQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ3hDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBTSxPQUFDLEdBQWlDLEVBQWxDLENBQWtDLENBQUMsQ0FBQztJQUN0RSxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDaEMsTUFBTSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDakMsTUFBTSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDckMsU0FBUyxDQUFDO1FBQ1IsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3hCLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMxQixxQkFBcUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFDaEIsRUFBRSxDQUFDLDhEQUE4RCxFQUFFO1lBQ2pFLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLG9CQUFvQixDQUM3QyxxQkFBcUIsRUFDckIsSUFBSSxDQUNMLENBQUM7WUFDRixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOERBQThELEVBQUU7WUFDakUsS0FBSyxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFDaEIsRUFBRSxDQUFDLDZDQUE2QyxFQUFFO1lBQ2hELEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNuQyxLQUFLLEVBQUUsQ0FBQztZQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUU7WUFDakQsS0FBSyxFQUFFLENBQUM7WUFDUixNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvRGV2QUMvRGVza3RvcC9BbmdhemEvcmVhY3Qtb2ZmbGluZS1zeW5jL3NyYy90ZXN0L2NoZWNrQ29ubmVjdGl2aXR5SW50ZXJ2YWwudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBzZXR1cCxcbiAgY2xlYXIsXG4gIGdldEludGVydmFsLFxufSBmcm9tICcuLi91dGlscy9jaGVja0Nvbm5lY3Rpdml0eUludGVydmFsJztcblxuZGVzY3JpYmUoJ2NoZWNrQ29ubmVjdGl2aXR5SW50ZXJ2YWwnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tDb25uZWN0aXZpdHlDaGVjayA9IGplc3QuZm4oKTtcbiAgY29uc3Qgc2V0SW50ZXJ2YWwgPSBqZXN0LmZuKCgpID0+ICgnMScgYXMgdW5rbm93bikgYXMgTm9kZUpTLlRpbWVvdXQpO1xuICBjb25zdCBjbGVhckludGVydmFsID0gamVzdC5mbigpO1xuICBnbG9iYWwuc2V0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbDtcbiAgZ2xvYmFsLmNsZWFySW50ZXJ2YWwgPSBjbGVhckludGVydmFsO1xuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIHNldEludGVydmFsLm1vY2tDbGVhcigpO1xuICAgIGNsZWFySW50ZXJ2YWwubW9ja0NsZWFyKCk7XG4gICAgbW9ja0Nvbm5lY3Rpdml0eUNoZWNrLm1vY2tDbGVhcigpO1xuICB9KTtcbiAgZGVzY3JpYmUoJ3NldHVwJywgKCkgPT4ge1xuICAgIGl0KCdzZXRzIGFuIGludGVydmFsIGlmIGNoZWNrQ29ubmVjdGlvbkludGVydmFsIGlzIGhpZ2hlciB0aGFuIDAnLCAoKSA9PiB7XG4gICAgICBzZXR1cChtb2NrQ29ubmVjdGl2aXR5Q2hlY2ssIDMwMDApO1xuICAgICAgZXhwZWN0KGdsb2JhbC5zZXRJbnRlcnZhbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIG1vY2tDb25uZWN0aXZpdHlDaGVjayxcbiAgICAgICAgMzAwMCxcbiAgICAgICk7XG4gICAgICBleHBlY3QoZ2V0SW50ZXJ2YWwoKSkudG9CZSgnMScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RvZXMgbm90aGluZyBpZiBjaGVja0Nvbm5lY3Rpb25JbnRlcnZhbCBpcyBOT1QgaGlnaGVyIHRoYW4gMCcsICgpID0+IHtcbiAgICAgIHNldHVwKG1vY2tDb25uZWN0aXZpdHlDaGVjaywgMCk7XG4gICAgICBleHBlY3QoZ2xvYmFsLnNldEludGVydmFsKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY2xlYXInLCAoKSA9PiB7XG4gICAgaXQoJ2NsZWFycyB0aGUgaW50ZXJ2YWwgaWYgdGhlcmUgd2FzIG9uZSBhY3RpdmUnLCAoKSA9PiB7XG4gICAgICBzZXR1cChtb2NrQ29ubmVjdGl2aXR5Q2hlY2ssIDMwMDApO1xuICAgICAgY2xlYXIoKTtcbiAgICAgIGV4cGVjdChnbG9iYWwuY2xlYXJJbnRlcnZhbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzEnKTtcbiAgICAgIGV4cGVjdChnZXRJbnRlcnZhbCgpKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RvZXMgbm90aGluZyBpZiBOTyBwcmV2aW91cyBpbnRlcnZhbCB3YXMgc2V0JywgKCkgPT4ge1xuICAgICAgY2xlYXIoKTtcbiAgICAgIGV4cGVjdChnbG9iYWwuY2xlYXJJbnRlcnZhbCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==