jest.mock('redux-saga');
import { mocked } from 'ts-jest/utils';
import { eventChannel } from 'redux-saga';
import NetInfo from '@react-native-community/netinfo';
import { createNetInfoConnectionChangeChannel, netInfoEventChannelFn, createIntervalChannel, intervalChannelFn, } from '../redux/sagas';
var netInfoUnsubscribe = jest.fn();
describe('createNetInfoConnectionChangeChannel', function () {
    it('returns a redux-saga channel', function () {
        var eventChannelMock = jest.fn().mockReturnValue('channel');
        mocked(eventChannel).mockImplementation(eventChannelMock);
        var mockNetInfoChannelFn = jest.fn().mockReturnValue('handlerFn');
        expect(createNetInfoConnectionChangeChannel(mockNetInfoChannelFn)).toBe('channel');
        expect(eventChannelMock).toHaveBeenCalledWith(mockNetInfoChannelFn);
    });
    it('netInfoEventChannelFn adheres to eventChannel cb interface', function () {
        var emitMock = jest.fn();
        NetInfo.addEventListener.mockReturnValueOnce(netInfoUnsubscribe);
        var unsubscribe = netInfoEventChannelFn(emitMock);
        expect(NetInfo.addEventListener).toHaveBeenCalledWith(emitMock);
        unsubscribe();
        expect(netInfoUnsubscribe).toHaveBeenCalledTimes(1);
    });
});
describe('createIntervalChannel', function () {
    var interval = 50;
    it('returns a redux-saga channel', function () {
        var eventChannelMock = jest.fn().mockReturnValue('channel');
        mocked(eventChannel).mockImplementation(eventChannelMock);
        var mockIntervalChannelFn = jest.fn().mockReturnValue('handlerFn');
        expect(createIntervalChannel(interval, mockIntervalChannelFn)).toBe('channel');
        expect(mockIntervalChannelFn).toHaveBeenCalledWith(interval);
        expect(eventChannel).toHaveBeenCalledWith('handlerFn');
    });
    it('intervalChannelFn adheres to eventChannel cb interface', function (done) {
        global.clearInterval = jest.fn();
        var emitMock = jest.fn();
        var unsubscribe = intervalChannelFn(interval)(emitMock);
        setTimeout(function () {
            expect(emitMock).toHaveBeenCalledWith(true);
            done();
        }, interval + 20);
        unsubscribe();
        expect(global.clearInterval).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0RldkFDL0Rlc2t0b3AvQW5nYXphL3JlYWN0LW9mZmxpbmUtc3luYy9zcmMvdGVzdC9zYWdhQ2hhbm5lbHMudGVzdC50cyIsIm1hcHBpbmdzIjoiQUFVQSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBVnhCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLE9BQU8sTUFBTSxpQ0FBaUMsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsb0NBQW9DLEVBQ3BDLHFCQUFxQixFQUNyQixxQkFBcUIsRUFDckIsaUJBQWlCLEdBQ2xCLE1BQU0sZ0JBQWdCLENBQUM7QUFHeEIsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFFckMsUUFBUSxDQUFDLHNDQUFzQyxFQUFFO0lBQy9DLEVBQUUsQ0FBQyw4QkFBOEIsRUFBRTtRQUNqQyxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDMUQsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sQ0FBQyxvQ0FBb0MsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNyRSxTQUFTLENBQ1YsQ0FBQztRQUNGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDdEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNERBQTRELEVBQUU7UUFDL0QsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxnQkFBOEIsQ0FBQyxtQkFBbUIsQ0FDekQsa0JBQWtCLENBQ25CLENBQUM7UUFDRixJQUFNLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwRCxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEUsV0FBVyxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLHVCQUF1QixFQUFFO0lBQ2hDLElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixFQUFFLENBQUMsOEJBQThCLEVBQUU7UUFDakMsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzFELElBQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNyRSxNQUFNLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2pFLFNBQVMsQ0FDVixDQUFDO1FBQ0YsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLFVBQUEsSUFBSTtRQUMvRCxNQUFNLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNqQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDM0IsSUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUQsVUFBVSxDQUFDO1lBQ1QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVDLElBQUksRUFBRSxDQUFDO1FBQ1QsQ0FBQyxFQUFFLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNsQixXQUFXLEVBQUUsQ0FBQztRQUNkLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3Qvc2FnYUNoYW5uZWxzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW9ja2VkIH0gZnJvbSAndHMtamVzdC91dGlscyc7XG5pbXBvcnQgeyBldmVudENoYW5uZWwgfSBmcm9tICdyZWR1eC1zYWdhJztcbmltcG9ydCBOZXRJbmZvIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L25ldGluZm8nO1xuaW1wb3J0IHtcbiAgY3JlYXRlTmV0SW5mb0Nvbm5lY3Rpb25DaGFuZ2VDaGFubmVsLFxuICBuZXRJbmZvRXZlbnRDaGFubmVsRm4sXG4gIGNyZWF0ZUludGVydmFsQ2hhbm5lbCxcbiAgaW50ZXJ2YWxDaGFubmVsRm4sXG59IGZyb20gJy4uL3JlZHV4L3NhZ2FzJztcblxuamVzdC5tb2NrKCdyZWR1eC1zYWdhJyk7XG5jb25zdCBuZXRJbmZvVW5zdWJzY3JpYmUgPSBqZXN0LmZuKCk7XG5cbmRlc2NyaWJlKCdjcmVhdGVOZXRJbmZvQ29ubmVjdGlvbkNoYW5nZUNoYW5uZWwnLCAoKSA9PiB7XG4gIGl0KCdyZXR1cm5zIGEgcmVkdXgtc2FnYSBjaGFubmVsJywgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50Q2hhbm5lbE1vY2sgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCdjaGFubmVsJyk7XG4gICAgbW9ja2VkKGV2ZW50Q2hhbm5lbCkubW9ja0ltcGxlbWVudGF0aW9uKGV2ZW50Q2hhbm5lbE1vY2spO1xuICAgIGNvbnN0IG1vY2tOZXRJbmZvQ2hhbm5lbEZuID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnaGFuZGxlckZuJyk7XG4gICAgZXhwZWN0KGNyZWF0ZU5ldEluZm9Db25uZWN0aW9uQ2hhbmdlQ2hhbm5lbChtb2NrTmV0SW5mb0NoYW5uZWxGbikpLnRvQmUoXG4gICAgICAnY2hhbm5lbCcsXG4gICAgKTtcbiAgICBleHBlY3QoZXZlbnRDaGFubmVsTW9jaykudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja05ldEluZm9DaGFubmVsRm4pO1xuICB9KTtcblxuICBpdCgnbmV0SW5mb0V2ZW50Q2hhbm5lbEZuIGFkaGVyZXMgdG8gZXZlbnRDaGFubmVsIGNiIGludGVyZmFjZScsICgpID0+IHtcbiAgICBjb25zdCBlbWl0TW9jayA9IGplc3QuZm4oKTtcbiAgICAoTmV0SW5mby5hZGRFdmVudExpc3RlbmVyIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlT25jZShcbiAgICAgIG5ldEluZm9VbnN1YnNjcmliZSxcbiAgICApO1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gbmV0SW5mb0V2ZW50Q2hhbm5lbEZuKGVtaXRNb2NrKTtcblxuICAgIGV4cGVjdChOZXRJbmZvLmFkZEV2ZW50TGlzdGVuZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGVtaXRNb2NrKTtcbiAgICB1bnN1YnNjcmliZSgpO1xuICAgIGV4cGVjdChuZXRJbmZvVW5zdWJzY3JpYmUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2NyZWF0ZUludGVydmFsQ2hhbm5lbCcsICgpID0+IHtcbiAgY29uc3QgaW50ZXJ2YWwgPSA1MDtcbiAgaXQoJ3JldHVybnMgYSByZWR1eC1zYWdhIGNoYW5uZWwnLCAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRDaGFubmVsTW9jayA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoJ2NoYW5uZWwnKTtcbiAgICBtb2NrZWQoZXZlbnRDaGFubmVsKS5tb2NrSW1wbGVtZW50YXRpb24oZXZlbnRDaGFubmVsTW9jayk7XG4gICAgY29uc3QgbW9ja0ludGVydmFsQ2hhbm5lbEZuID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnaGFuZGxlckZuJyk7XG4gICAgZXhwZWN0KGNyZWF0ZUludGVydmFsQ2hhbm5lbChpbnRlcnZhbCwgbW9ja0ludGVydmFsQ2hhbm5lbEZuKSkudG9CZShcbiAgICAgICdjaGFubmVsJyxcbiAgICApO1xuICAgIGV4cGVjdChtb2NrSW50ZXJ2YWxDaGFubmVsRm4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGludGVydmFsKTtcbiAgICBleHBlY3QoZXZlbnRDaGFubmVsKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnaGFuZGxlckZuJyk7XG4gIH0pO1xuXG4gIGl0KCdpbnRlcnZhbENoYW5uZWxGbiBhZGhlcmVzIHRvIGV2ZW50Q2hhbm5lbCBjYiBpbnRlcmZhY2UnLCBkb25lID0+IHtcbiAgICBnbG9iYWwuY2xlYXJJbnRlcnZhbCA9IGplc3QuZm4oKTtcbiAgICBjb25zdCBlbWl0TW9jayA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IGludGVydmFsQ2hhbm5lbEZuKGludGVydmFsKShlbWl0TW9jayk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBleHBlY3QoZW1pdE1vY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRydWUpO1xuICAgICAgZG9uZSgpO1xuICAgIH0sIGludGVydmFsICsgMjApO1xuICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgZXhwZWN0KGdsb2JhbC5jbGVhckludGVydmFsKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=