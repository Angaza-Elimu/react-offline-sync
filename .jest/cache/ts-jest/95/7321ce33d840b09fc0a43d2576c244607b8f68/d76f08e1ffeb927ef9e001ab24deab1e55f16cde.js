import getSimilarActionInQueue from '../utils/getSimilarActionInQueue';
describe('getSimilarActionInQueue', function () {
    describe('action is an object', function () {
        var action1 = {
            type: 'foo',
            payload: {
                bar: 1,
            },
        };
        var action1Copy = {
            type: 'foo',
            payload: {
                bar: 1,
            },
        };
        var action2 = {
            type: 'foo',
            payload: {
                bar: 3,
            },
        };
        it('should return the action enqueued if it presents the same shape than some action passed', function () {
            expect(getSimilarActionInQueue(action1Copy, [action1])).toBe(action1);
        });
        it('should return undefined if the action enqueued does NOT present the same shape than the action passed', function () {
            expect(getSimilarActionInQueue(action1, [action2])).toBe(undefined);
        });
    });
    describe('action is a thunk', function () {
        var thunkFactory = function (param) {
            function thunk1(dispatch) {
                dispatch({ type: 'FETCH_DATA_REQUEST', payload: param });
            }
            return thunk1;
        };
        function thunk2(dispatch) {
            dispatch({ type: 'SOMETHING_ELSE' });
        }
        it("should return the thunk enqueued if\n     it presents the same shape than the thunk passed", function () {
            var thunk = thunkFactory('foo');
            var thunkCopy = thunkFactory('bar');
            expect(getSimilarActionInQueue(thunkCopy, [thunk])).toBe(thunk);
            expect(getSimilarActionInQueue(thunk, [thunk])).toBe(thunk);
        });
        it("should return undefined if the thunk enqueued\n     does NOT present the same shape than the thunk passed", function () {
            expect(getSimilarActionInQueue(thunkFactory('foo'), [thunk2])).toBe(undefined);
        });
    });
    it('returns undefined if action JS type is something different', function () {
        expect(getSimilarActionInQueue(false, [])).toBe(undefined);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0RldkFDL0Rlc2t0b3AvQW5nYXphL3JlYWN0LW9mZmxpbmUtc3luYy9zcmMvdGVzdC9nZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZS50ZXN0LnRzIiwibWFwcGluZ3MiOiJBQUNBLE9BQU8sdUJBQXVCLE1BQU0sa0NBQWtDLENBQUM7QUFFdkUsUUFBUSxDQUFDLHlCQUF5QixFQUFFO0lBQ2xDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRTtRQUM5QixJQUFNLE9BQU8sR0FBRztZQUNkLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFO2dCQUNQLEdBQUcsRUFBRSxDQUFDO2FBQ1A7U0FDRixDQUFDO1FBQ0YsSUFBTSxXQUFXLEdBQUc7WUFDbEIsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUU7Z0JBQ1AsR0FBRyxFQUFFLENBQUM7YUFDUDtTQUNGLENBQUM7UUFDRixJQUFNLE9BQU8sR0FBRztZQUNkLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFO2dCQUNQLEdBQUcsRUFBRSxDQUFDO2FBQ1A7U0FDRixDQUFDO1FBRUYsRUFBRSxDQUFDLHlGQUF5RixFQUFFO1lBQzVGLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVHQUF1RyxFQUFFO1lBQzFHLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsbUJBQW1CLEVBQUU7UUFDNUIsSUFBTSxZQUFZLEdBQUcsVUFBQyxLQUFVO1lBQzlCLFNBQVMsTUFBTSxDQUFDLFFBQWtCO2dCQUNoQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDM0QsQ0FBQztZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQztRQUVGLFNBQVMsTUFBTSxDQUFDLFFBQWtCO1lBQ2hDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFDdkMsQ0FBQztRQUVELEVBQUUsQ0FBQyw0RkFDK0MsRUFBRTtZQUNsRCxJQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsSUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDJHQUNvRCxFQUFFO1lBQ3ZELE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNqRSxTQUFTLENBQ1YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNERBQTRELEVBQUU7UUFDL0QsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3QvZ2V0U2ltaWxhckFjdGlvbkluUXVldWUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCBnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZSBmcm9tICcuLi91dGlscy9nZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZSc7XG5cbmRlc2NyaWJlKCdnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZScsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2FjdGlvbiBpcyBhbiBvYmplY3QnLCAoKSA9PiB7XG4gICAgY29uc3QgYWN0aW9uMSA9IHtcbiAgICAgIHR5cGU6ICdmb28nLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBiYXI6IDEsXG4gICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgYWN0aW9uMUNvcHkgPSB7XG4gICAgICB0eXBlOiAnZm9vJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgYmFyOiAxLFxuICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IGFjdGlvbjIgPSB7XG4gICAgICB0eXBlOiAnZm9vJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgYmFyOiAzLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIGFjdGlvbiBlbnF1ZXVlZCBpZiBpdCBwcmVzZW50cyB0aGUgc2FtZSBzaGFwZSB0aGFuIHNvbWUgYWN0aW9uIHBhc3NlZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZShhY3Rpb24xQ29weSwgW2FjdGlvbjFdKSkudG9CZShhY3Rpb24xKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGUgYWN0aW9uIGVucXVldWVkIGRvZXMgTk9UIHByZXNlbnQgdGhlIHNhbWUgc2hhcGUgdGhhbiB0aGUgYWN0aW9uIHBhc3NlZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZShhY3Rpb24xLCBbYWN0aW9uMl0pKS50b0JlKHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhY3Rpb24gaXMgYSB0aHVuaycsICgpID0+IHtcbiAgICBjb25zdCB0aHVua0ZhY3RvcnkgPSAocGFyYW06IGFueSkgPT4ge1xuICAgICAgZnVuY3Rpb24gdGh1bmsxKGRpc3BhdGNoOiBEaXNwYXRjaCkge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdGRVRDSF9EQVRBX1JFUVVFU1QnLCBwYXlsb2FkOiBwYXJhbSB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aHVuazE7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRodW5rMihkaXNwYXRjaDogRGlzcGF0Y2gpIHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NPTUVUSElOR19FTFNFJyB9KTtcbiAgICB9XG5cbiAgICBpdChgc2hvdWxkIHJldHVybiB0aGUgdGh1bmsgZW5xdWV1ZWQgaWZcbiAgICAgaXQgcHJlc2VudHMgdGhlIHNhbWUgc2hhcGUgdGhhbiB0aGUgdGh1bmsgcGFzc2VkYCwgKCkgPT4ge1xuICAgICAgY29uc3QgdGh1bmsgPSB0aHVua0ZhY3RvcnkoJ2ZvbycpO1xuICAgICAgY29uc3QgdGh1bmtDb3B5ID0gdGh1bmtGYWN0b3J5KCdiYXInKTtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZSh0aHVua0NvcHksIFt0aHVua10pKS50b0JlKHRodW5rKTtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZSh0aHVuaywgW3RodW5rXSkpLnRvQmUodGh1bmspO1xuICAgIH0pO1xuXG4gICAgaXQoYHNob3VsZCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoZSB0aHVuayBlbnF1ZXVlZFxuICAgICBkb2VzIE5PVCBwcmVzZW50IHRoZSBzYW1lIHNoYXBlIHRoYW4gdGhlIHRodW5rIHBhc3NlZGAsICgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZSh0aHVua0ZhY3RvcnkoJ2ZvbycpLCBbdGh1bmsyXSkpLnRvQmUoXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIHVuZGVmaW5lZCBpZiBhY3Rpb24gSlMgdHlwZSBpcyBzb21ldGhpbmcgZGlmZmVyZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZShmYWxzZSwgW10pKS50b0JlKHVuZGVmaW5lZCk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=