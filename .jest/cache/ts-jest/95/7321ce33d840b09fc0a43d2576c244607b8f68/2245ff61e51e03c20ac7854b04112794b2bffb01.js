var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import isEqual from 'lodash/isEqual';
import * as actionCreators from '../redux/actionCreators';
import createReducer, { initialState, networkSelector, } from '../redux/createReducer';
import getSimilarActionInQueue from '../utils/getSimilarActionInQueue';
var networkReducer = createReducer();
var getState = function (isConnected) {
    if (isConnected === void 0) { isConnected = false; }
    var actionQueue = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        actionQueue[_i - 1] = arguments[_i];
    }
    return ({
        isConnected: isConnected,
        actionQueue: actionQueue,
        isQueuePaused: false,
    });
};
/** Actions used from now on to test different scenarios */
var prevActionToRetry1 = {
    type: 'FETCH_DATA_REQUEST',
    payload: {
        id: '1',
    },
    meta: {
        retry: true,
    },
};
var prevActionToRetry2 = {
    type: 'FETCH_OTHER_REQUEST',
    payload: {
        isFetching: true,
    },
    meta: {
        retry: true,
    },
};
var prevActionToRetry1WithDifferentPayload = {
    type: 'FETCH_DATA_REQUEST',
    payload: {
        id: '2',
    },
    meta: {
        retry: true,
    },
};
describe('unknown action type', function () {
    it('returns prevState on initialization', function () {
        expect(networkReducer(undefined, { type: 'ACTION_I_DONT_CARE' })).toEqual(initialState);
    });
    it('returns prevState if the action is not handled', function () {
        expect(networkReducer(initialState, { type: 'ANOTHER_ACTION_I_DONT_CARE' })).toEqual(initialState);
    });
});
describe('CONNECTION_CHANGE action type', function () {
    it('changes isConnected state properly', function () {
        var mockAction = actionCreators.connectionChange(false);
        expect(networkReducer(initialState, mockAction)).toEqual({
            isConnected: false,
            actionQueue: [],
            isQueuePaused: false,
        });
    });
});
describe('OFFLINE_ACTION action type', function () {
    describe('meta.retry !== true', function () {
        it('should NOT add the action to the queue', function () {
            var prevAction = {
                type: 'FETCH_DATA_REQUEST',
                payload: {
                    id: '1',
                },
            };
            var anotherPrevAction = {
                type: 'FETCH_DATA_REQUEST',
                payload: {
                    id: '1',
                },
                meta: {
                    retry: false,
                },
            };
            var action = actionCreators.fetchOfflineMode(prevAction);
            var anotherAction = actionCreators.fetchOfflineMode(anotherPrevAction);
            expect(networkReducer(initialState, action)).toEqual(initialState);
            expect(networkReducer(initialState, anotherAction)).toEqual(initialState);
        });
    });
    describe('meta.retry === true', function () {
        describe('actions with DIFFERENT type', function () {
            it('actions are pushed into the queue in order of arrival', function () {
                var preAction = actionCreators.connectionChange(false);
                var action1 = actionCreators.fetchOfflineMode(prevActionToRetry1);
                var prevState = networkReducer(initialState, preAction);
                var nextState = networkReducer(prevState, action1);
                expect(nextState).toEqual({
                    isConnected: false,
                    actionQueue: [prevActionToRetry1],
                    isQueuePaused: false,
                });
                var action2 = actionCreators.fetchOfflineMode(prevActionToRetry2);
                nextState = networkReducer(nextState, action2);
                expect(nextState).toEqual(getState(false, prevActionToRetry1, prevActionToRetry2));
            });
        });
        describe('thunks that are the same with custom comparison function', function () {
            function comparisonFn(action, actionQueue) {
                if (typeof action === 'object') {
                    return actionQueue.find(function (queued) { return isEqual(queued, action); });
                }
                if (typeof action === 'function') {
                    return actionQueue.find(function (queued) {
                        return action.meta.name === queued.meta.name &&
                            action.meta.args.id === queued.meta.args.id;
                    });
                }
                return undefined;
            }
            var thunkFactory = function (id, name, age) {
                function thunk(dispatch) {
                    dispatch({ type: 'UPDATE_DATA_REQUEST', payload: { id: id, name: name, age: age } });
                }
                thunk.meta = {
                    args: { id: id, name: name, age: age },
                    retry: true,
                };
                return thunk;
            };
            it("should add thunks if function is same but thunks are modifying different items", function () {
                var prevState = getState(false, thunkFactory(1, 'Bilbo', 55));
                var thunk = thunkFactory(2, 'Link', 54);
                var wrappedThunk = actionCreators.fetchOfflineMode(thunk);
                expect(getSimilarActionInQueue(thunk, prevState.actionQueue)).toEqual(prevState.actionQueue[0]);
                var nextState = createReducer(comparisonFn)(prevState, wrappedThunk);
                expect(nextState.actionQueue).toHaveLength(2);
            });
            it("should replace a thunk if thunk already exists to modify same item", function () {
                var prevState = getState(false, thunkFactory(1, 'Bilbo', 55));
                var thunk = thunkFactory(1, 'Bilbo', 65);
                var wrappedThunk = actionCreators.fetchOfflineMode(thunk);
                expect(getSimilarActionInQueue(thunk, prevState.actionQueue)).toEqual(prevState.actionQueue[0]);
                var nextState = createReducer(comparisonFn)(prevState, wrappedThunk);
                expect(nextState.actionQueue).toHaveLength(1);
            });
        });
        describe('actions with the same type', function () {
            it("should remove the action and add it back at the end of the queue\n   if the action has the same payload", function () {
                var prevState = getState(false, prevActionToRetry1, prevActionToRetry2);
                var action = actionCreators.fetchOfflineMode(prevActionToRetry1);
                var nextState = networkReducer(prevState, action);
                expect(nextState).toEqual(getState(false, prevActionToRetry2, prevActionToRetry1));
            });
            it("should push the action if the payload is different", function () {
                var prevState = getState(false, prevActionToRetry2, prevActionToRetry1);
                var action = actionCreators.fetchOfflineMode(prevActionToRetry1WithDifferentPayload);
                expect(networkReducer(prevState, action)).toEqual(getState(false, prevActionToRetry2, prevActionToRetry1, prevActionToRetry1WithDifferentPayload));
            });
        });
    });
});
describe('REMOVE_ACTION_FROM_QUEUE action type', function () {
    it('removes the action from the queue properly', function () {
        var prevState = getState(false, prevActionToRetry2, prevActionToRetry1, prevActionToRetry1WithDifferentPayload);
        // Different object references but same shape, checking that deep equal works correctly
        var action = actionCreators.removeActionFromQueue(__assign({}, prevActionToRetry2));
        expect(networkReducer(prevState, action)).toEqual(getState(false, prevActionToRetry1, prevActionToRetry1WithDifferentPayload));
    });
});
describe('QUEUE_SEMAPHORE_CHANGE action type', function () {
    it('Pauses the queue if semaphore is red', function () {
        expect(networkReducer(undefined, actionCreators.changeQueueSemaphore('RED'))).toEqual(__assign(__assign({}, initialState), { isQueuePaused: true }));
    });
    it('Resumes the queue if semaphore is green', function () {
        expect(networkReducer(undefined, actionCreators.changeQueueSemaphore('GREEN'))).toEqual(__assign(__assign({}, initialState), { isQueuePaused: false }));
    });
});
describe('thunks', function () {
    function fetchThunk(dispatch) {
        dispatch({ type: 'FETCH_DATA_REQUEST' });
    }
    describe('FETCH_OFFLINE_MODE action type', function () {
        describe('action with meta.retry !== true', function () {
            it('should NOT add the action to the queue', function () {
                var action = actionCreators.fetchOfflineMode(fetchThunk);
                expect(networkReducer(initialState, action)).toEqual(initialState);
            });
        });
        describe('action with meta.retry === true', function () {
            it('should add the action to the queue if the thunk is different', function () {
                var prevState = getState(false);
                // Property 'meta' does not exist on type '(dispatch: Dispatch<AnyAction>) => void'
                fetchThunk.meta = {
                    retry: true,
                };
                var action = actionCreators.fetchOfflineMode(fetchThunk);
                expect(networkReducer(prevState, action)).toEqual(getState(false, fetchThunk));
            });
            it("should remove the thunk and add it back at the end of the queue \n      if it presents the same shape", function () {
                var thunkFactory = function (param) {
                    function thunk1(dispatch) {
                        dispatch({ type: 'FETCH_DATA_REQUEST', payload: param });
                    }
                    return thunk1;
                };
                var thunk = thunkFactory('foo');
                var prevState = getState(false, thunk);
                var similarThunk = thunkFactory('bar');
                similarThunk.meta = {
                    retry: true,
                };
                var action = actionCreators.fetchOfflineMode(similarThunk);
                var nextState = networkReducer(prevState, action);
                expect(nextState).toEqual(getState(false, similarThunk));
            });
        });
    });
    describe('REMOVE_ACTION_FROM_QUEUE action type', function () {
        it('removes the thunk from the queue properly', function () {
            var prevState = getState(false, fetchThunk);
            var action = actionCreators.removeActionFromQueue(fetchThunk);
            expect(networkReducer(prevState, action)).toEqual(getState(false));
        });
    });
});
describe('dismiss feature', function () {
    var actionEnqueued1 = {
        type: 'FETCH_PAGE_REQUEST',
        payload: {
            id: '2',
        },
        meta: {
            retry: true,
            dismiss: ['NAVIGATE_BACK', 'NAVIGATE_TO_LOGIN'],
        },
    };
    var actionEnqueued2 = {
        type: 'FETCH_USER_REQUEST',
        payload: {
            id: '4',
        },
        meta: {
            retry: true,
            dismiss: ['NAVIGATE_TO_LOGIN'],
        },
    };
    var actionEnqueued3 = {
        type: 'FETCH_USER_REQUEST',
        payload: {
            id: '4',
        },
        meta: {
            retry: true,
        },
    };
    it('NAVIGATE_BACK dispatched, dismissing 1 action', function () {
        var prevState = getState(false, actionEnqueued1, actionEnqueued2, actionEnqueued3);
        var action = actionCreators.dismissActionsFromQueue('NAVIGATE_BACK');
        expect(networkReducer(prevState, action)).toEqual(getState(false, actionEnqueued2, actionEnqueued3));
    });
    it('NAVIGATE_TO_LOGIN dispatched, dismissing 2 actions', function () {
        var prevState = getState(false, actionEnqueued1, actionEnqueued2, actionEnqueued3);
        var action = actionCreators.dismissActionsFromQueue('NAVIGATE_TO_LOGIN');
        expect(networkReducer(prevState, action)).toEqual(getState(false, actionEnqueued3));
    });
    it("Any other action dispatched, no changes (although the middleware won't allow that)", function () {
        var prevState = getState(false, actionEnqueued1, actionEnqueued2, actionEnqueued3);
        var action = actionCreators.dismissActionsFromQueue('NAVIGATE_AWAY');
        expect(networkReducer(prevState, action)).toEqual(getState(false, actionEnqueued1, actionEnqueued2, actionEnqueued3));
    });
});
describe('networkSelector', function () {
    it('returns the correct shape', function () {
        var state = {
            network: {
                isConnected: true,
                actionQueue: [{ type: 'foo', payload: {} }],
                isQueuePaused: false,
            },
        };
        expect(networkSelector(state)).toEqual({
            isConnected: true,
            actionQueue: [{ type: 'foo', payload: {} }],
            isQueuePaused: false,
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,