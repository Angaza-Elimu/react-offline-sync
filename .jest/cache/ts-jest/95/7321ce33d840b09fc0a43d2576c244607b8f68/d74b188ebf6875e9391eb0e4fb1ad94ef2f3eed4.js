var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { DEFAULT_HTTP_METHOD, DEFAULT_PING_SERVER_URL, DEFAULT_TIMEOUT, CACHE_HEADER_VALUE, DEFAULT_CUSTOM_HEADERS, } from './constants';
export var headers = {
    'Cache-Control': CACHE_HEADER_VALUE,
    Pragma: 'no-cache',
    Expires: '0',
};
var DEFAULT_OPTIONS = {
    method: DEFAULT_HTTP_METHOD,
    url: DEFAULT_PING_SERVER_URL,
    timeout: DEFAULT_TIMEOUT,
    customHeaders: DEFAULT_CUSTOM_HEADERS,
};
export default function makeHttpRequest(args) {
    var _a = args || DEFAULT_OPTIONS, _b = _a.method, method = _b === void 0 ? DEFAULT_HTTP_METHOD : _b, _c = _a.url, url = _c === void 0 ? DEFAULT_PING_SERVER_URL : _c, _d = _a.timeout, timeout = _d === void 0 ? DEFAULT_TIMEOUT : _d, _e = _a.customHeaders, customHeaders = _e === void 0 ? DEFAULT_CUSTOM_HEADERS : _e, testMethod = _a.testMethod;
    return new Promise(function (resolve, reject) {
        // @ts-ignore
        var xhr = new XMLHttpRequest(testMethod);
        xhr.open(method, url);
        xhr.timeout = timeout;
        xhr.onload = function onLoad() {
            // 3xx is a valid response for us, since the server was reachable
            if (this.status >= 200 && this.status < 400) {
                resolve({
                    status: this.status,
                });
            }
            else {
                reject({
                    status: this.status,
                });
            }
        };
        xhr.onerror = function onError() {
            reject({
                status: this.status,
            });
        };
        xhr.ontimeout = function onTimeOut() {
            reject({
                status: this.status,
            });
        };
        var combinedHeaders = __assign(__assign({}, headers), customHeaders);
        Object.keys(combinedHeaders).forEach(function (key) {
            var k = key;
            xhr.setRequestHeader(k, combinedHeaders[k]);
        });
        xhr.send(null);
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0RldkFDL0Rlc2t0b3AvQW5nYXphL3JlYWN0LW9mZmxpbmUtc3luYy9zcmMvdXRpbHMvbWFrZUh0dHBSZXF1ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUNMLG1CQUFtQixFQUNuQix1QkFBdUIsRUFDdkIsZUFBZSxFQUNmLGtCQUFrQixFQUNsQixzQkFBc0IsR0FDdkIsTUFBTSxhQUFhLENBQUM7QUFxQnJCLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRztJQUNyQixlQUFlLEVBQUUsa0JBQWtCO0lBQ25DLE1BQU0sRUFBRSxVQUF3QjtJQUNoQyxPQUFPLEVBQUUsR0FBRztDQUNiLENBQUM7QUFhRixJQUFNLGVBQWUsR0FBWTtJQUMvQixNQUFNLEVBQUUsbUJBQW1CO0lBQzNCLEdBQUcsRUFBRSx1QkFBdUI7SUFDNUIsT0FBTyxFQUFFLGVBQWU7SUFDeEIsYUFBYSxFQUFFLHNCQUFzQjtDQUN0QyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE9BQU8sVUFBVSxlQUFlLENBQUMsSUFBYztJQUM5QyxJQUFBLDRCQU1xQixFQUx6QixjQUE0QixFQUE1QixpREFBNEIsRUFDNUIsV0FBNkIsRUFBN0Isa0RBQTZCLEVBQzdCLGVBQXlCLEVBQXpCLDhDQUF5QixFQUN6QixxQkFBc0MsRUFBdEMsMkRBQXNDLEVBQ3RDLDBCQUN5QixDQUFDO0lBQzVCLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUF1QixFQUFFLE1BQXNCO1FBQ2pFLGFBQWE7UUFDYixJQUFNLEdBQUcsR0FBRyxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0QixHQUFHLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN0QixHQUFHLENBQUMsTUFBTSxHQUFHLFNBQVMsTUFBTTtZQUMxQixpRUFBaUU7WUFDakUsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtnQkFDM0MsT0FBTyxDQUFDO29CQUNOLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtpQkFDcEIsQ0FBQyxDQUFDO2FBQ0o7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDO29CQUNMLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtpQkFDcEIsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUM7UUFDRixHQUFHLENBQUMsT0FBTyxHQUFHLFNBQVMsT0FBTztZQUM1QixNQUFNLENBQUM7Z0JBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO2FBQ3BCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUNGLEdBQUcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxTQUFTO1lBQ2hDLE1BQU0sQ0FBQztnQkFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07YUFDcEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsSUFBTSxlQUFlLHlCQUFRLE9BQU8sR0FBSyxhQUFhLENBQUUsQ0FBQztRQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7WUFDdEMsSUFBTSxDQUFDLEdBQUcsR0FBMkIsQ0FBQztZQUN0QyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0RldkFDL0Rlc2t0b3AvQW5nYXphL3JlYWN0LW9mZmxpbmUtc3luYy9zcmMvdXRpbHMvbWFrZUh0dHBSZXF1ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERFRkFVTFRfSFRUUF9NRVRIT0QsXG4gIERFRkFVTFRfUElOR19TRVJWRVJfVVJMLFxuICBERUZBVUxUX1RJTUVPVVQsXG4gIENBQ0hFX0hFQURFUl9WQUxVRSxcbiAgREVGQVVMVF9DVVNUT01fSEVBREVSUyxcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgSFRUUEhlYWRlcnMgfSBmcm9tICcuLi90eXBlcyc7XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgbWV0aG9kPzogJ0hFQUQnIHwgJ09QVElPTlMnO1xuICB1cmw6IHN0cmluZztcbiAgdGltZW91dD86IG51bWJlcjtcbiAgdGVzdE1ldGhvZD86XG4gICAgfCAnb25sb2FkLzJ4eCdcbiAgICB8ICdvbmxvYWQvM3h4J1xuICAgIHwgJ29ubG9hZC80eHgnXG4gICAgfCAnb25sb2FkLzV4eCdcbiAgICB8ICdvbmVycm9yJ1xuICAgIHwgJ29udGltZW91dCc7XG4gIGN1c3RvbUhlYWRlcnM/OiBIVFRQSGVhZGVycztcbn07XG5cbnR5cGUgUmVzb2x2ZWRWYWx1ZSA9IHtcbiAgc3RhdHVzOiBudW1iZXI7XG59O1xuXG5leHBvcnQgY29uc3QgaGVhZGVycyA9IHtcbiAgJ0NhY2hlLUNvbnRyb2wnOiBDQUNIRV9IRUFERVJfVkFMVUUsXG4gIFByYWdtYTogJ25vLWNhY2hlJyBhcyAnbm8tY2FjaGUnLFxuICBFeHBpcmVzOiAnMCcsXG59O1xuXG4vKipcbiAqIFV0aWxpdHkgdGhhdCBwcm9taXNpZmllcyBYTUxIdHRwUmVxdWVzdCBpbiBvcmRlciB0byBoYXZlIGEgbmljZSBBUEkgdGhhdCBzdXBwb3J0cyBjYW5jZWxsYXRpb24uXG4gKiBAcGFyYW0gbWV0aG9kXG4gKiBAcGFyYW0gdXJsXG4gKiBAcGFyYW0gdGltZW91dCAtPiBUaW1lb3V0IGZvciByZWplY3RpbmcgdGhlIHByb21pc2UgYW5kIGFib3J0aW5nIHRoZSBBUEkgcmVxdWVzdFxuICogQHBhcmFtIHRlc3RNZXRob2Q6IGZvciB0ZXN0aW5nIHB1cnBvc2VzXG4gKiBAcGFyYW0gY3VzdG9tSGVhZGVyczogaGVhZGVycyByZWNlaXZlZCBmcm9tIHVzZXIgY29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5cbnR5cGUgUHJvbWlzZUhhbmRsZXIgPSAoYXJnczogUmVzb2x2ZWRWYWx1ZSkgPT4gdm9pZDtcbmNvbnN0IERFRkFVTFRfT1BUSU9OUzogT3B0aW9ucyA9IHtcbiAgbWV0aG9kOiBERUZBVUxUX0hUVFBfTUVUSE9ELFxuICB1cmw6IERFRkFVTFRfUElOR19TRVJWRVJfVVJMLFxuICB0aW1lb3V0OiBERUZBVUxUX1RJTUVPVVQsXG4gIGN1c3RvbUhlYWRlcnM6IERFRkFVTFRfQ1VTVE9NX0hFQURFUlMsXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZUh0dHBSZXF1ZXN0KGFyZ3M/OiBPcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBtZXRob2QgPSBERUZBVUxUX0hUVFBfTUVUSE9ELFxuICAgIHVybCA9IERFRkFVTFRfUElOR19TRVJWRVJfVVJMLFxuICAgIHRpbWVvdXQgPSBERUZBVUxUX1RJTUVPVVQsXG4gICAgY3VzdG9tSGVhZGVycyA9IERFRkFVTFRfQ1VTVE9NX0hFQURFUlMsXG4gICAgdGVzdE1ldGhvZCxcbiAgfSA9IGFyZ3MgfHwgREVGQVVMVF9PUFRJT05TO1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IFByb21pc2VIYW5kbGVyLCByZWplY3Q6IFByb21pc2VIYW5kbGVyKSA9PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh0ZXN0TWV0aG9kKTtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgICAvLyAzeHggaXMgYSB2YWxpZCByZXNwb25zZSBmb3IgdXMsIHNpbmNlIHRoZSBzZXJ2ZXIgd2FzIHJlYWNoYWJsZVxuICAgICAgaWYgKHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDQwMCkge1xuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoKSB7XG4gICAgICByZWplY3Qoe1xuICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgfSk7XG4gICAgfTtcbiAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24gb25UaW1lT3V0KCkge1xuICAgICAgcmVqZWN0KHtcbiAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBjb21iaW5lZEhlYWRlcnMgPSB7IC4uLmhlYWRlcnMsIC4uLmN1c3RvbUhlYWRlcnMgfTtcbiAgICBPYmplY3Qua2V5cyhjb21iaW5lZEhlYWRlcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IGsgPSBrZXkgYXMga2V5b2YgdHlwZW9mIGhlYWRlcnM7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrLCBjb21iaW5lZEhlYWRlcnNba10pO1xuICAgIH0pO1xuICAgIHhoci5zZW5kKG51bGwpO1xuICB9KTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==