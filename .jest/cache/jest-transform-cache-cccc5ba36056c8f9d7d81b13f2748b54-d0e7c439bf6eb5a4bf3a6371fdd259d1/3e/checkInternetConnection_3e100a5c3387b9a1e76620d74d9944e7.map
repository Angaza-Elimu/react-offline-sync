{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/utils/checkInternetConnection.ts"],"names":[],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBc,SAAgB,uBAAhB,CACZ,GADY,EAEZ,OAFY,EAGZ,UAHY,EAIZ,MAJY,EAKZ,aALY,EAKuC;AAJnD,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,kCAAA;AAAqC;;AACrC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,0BAAA;AAAiC;;AACjC,MAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,IAAA;AAAiB;;AACjB,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,8BAAA;AAAwC;;AACxC,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,iCAAA;AAAmD;;;;;;AAEnD,aAAA,CAAA,CAAA,EAAO,iBAAQ,KAAR,GAAgB,IAAhB,CAAqB,UAAM,eAAN,EAAqB;AAAA,eAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;qBAC3C,U,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACwB,uBAAA,CAAA,CAAA,EAAM,kCAAoB;AAClD,kBAAA,OAAO,EAAA,OAD2C;AAElD,kBAAA,GAAG,EAAA,GAF+C;AAGlD,kBAAA,MAAM,EAAA,MAH4C;AAIlD,kBAAA,aAAa,EAAA;AAJqC,iBAApB,CAAN,CAAA;;;AAApB,gBAAA,iBAAiB,GAAG,EAAA,CAAA,IAAA,EAApB;AAMN,uBAAA,CAAA,CAAA,EAAO,iBAAP,CAAA;;;AAEF,uBAAA,CAAA,CAAA,EAAO,eAAe,CAAC,WAAvB,CAAA;;;SAV+C,CAAA;AAWhD,OAXM,CAAP,CAAA;;;AAYD","sourcesContent":["import NetInfo from '@react-native-community/netinfo';\nimport checkInternetAccess from './checkInternetAccess';\nimport {\n  DEFAULT_PING_SERVER_URL,\n  DEFAULT_TIMEOUT,\n  DEFAULT_HTTP_METHOD,\n  DEFAULT_CUSTOM_HEADERS,\n} from './constants';\nimport { HTTPMethod, HTTPHeaders } from '../types';\n\n/**\n * Utility that allows to query for internet connectivity on demand\n * @param url\n * @param timeout\n * @param shouldPing\n * @param method\n * @returns {Promise<boolean>}\n */\nexport default async function checkInternetConnection(\n  url: string = DEFAULT_PING_SERVER_URL,\n  timeout: number = DEFAULT_TIMEOUT,\n  shouldPing = true,\n  method: HTTPMethod = DEFAULT_HTTP_METHOD,\n  customHeaders: HTTPHeaders = DEFAULT_CUSTOM_HEADERS,\n): Promise<boolean> {\n  return NetInfo.fetch().then(async connectionState => {\n    if (shouldPing) {\n      const hasInternetAccess = await checkInternetAccess({\n        timeout,\n        url,\n        method,\n        customHeaders,\n      });\n      return hasInternetAccess;\n    }\n    return connectionState.isConnected;\n  });\n}\n"]}