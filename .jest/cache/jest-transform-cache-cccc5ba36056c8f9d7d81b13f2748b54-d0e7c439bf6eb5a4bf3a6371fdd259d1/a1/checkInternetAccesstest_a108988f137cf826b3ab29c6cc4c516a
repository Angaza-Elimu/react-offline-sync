b72798ce84341f78f80b88515c15d225
jest.mock('../utils/makeHttpRequest', function () {
  return jest.fn(function (params) {
    if (params.method === 'FAIL') {
      return Promise.reject(false);
    }

    return Promise.resolve(true);
  });
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _checkInternetAccess = _interopRequireDefault(require("../utils/checkInternetAccess"));

var _makeHttpRequest = _interopRequireDefault(require("../utils/makeHttpRequest"));

var _constants = require("../utils/constants");

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

describe('checkInternetAccess', function () {
  it('uses defaults parameters if no args are passed', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, (0, _checkInternetAccess.default)()];

          case 1:
            _a.sent();

            expect(_makeHttpRequest.default).toHaveBeenCalledWith({
              timeout: _constants.DEFAULT_TIMEOUT,
              url: _constants.DEFAULT_PING_SERVER_URL,
              method: _constants.DEFAULT_HTTP_METHOD,
              customHeaders: _constants.DEFAULT_CUSTOM_HEADERS
            });
            return [2];
        }
      });
    });
  });
  it('resolves to true if there is Internet access', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var timeout, url, hasInternetAccess;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            timeout = 2000;
            url = 'foo.com';
            return [4, (0, _checkInternetAccess.default)({
              url: url,
              timeout: timeout,
              customHeaders: _constants.DEFAULT_CUSTOM_HEADERS
            })];

          case 1:
            hasInternetAccess = _a.sent();
            expect(_makeHttpRequest.default).toHaveBeenCalledWith({
              url: url,
              timeout: timeout,
              method: _constants.DEFAULT_HTTP_METHOD,
              customHeaders: _constants.DEFAULT_CUSTOM_HEADERS
            });
            expect(hasInternetAccess).toBe(true);
            return [2];
        }
      });
    });
  });
  it('resolves to false if there is NOT Internet access', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var timeout, url, method, customHeaders, hasInternetAccess;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            timeout = 2000;
            url = 'foo123321.com';
            method = 'FAIL';
            customHeaders = _constants.DEFAULT_CUSTOM_HEADERS;
            return [4, (0, _checkInternetAccess.default)({
              timeout: timeout,
              url: url,
              method: method,
              customHeaders: customHeaders
            })];

          case 1:
            hasInternetAccess = _a.sent();
            expect(_makeHttpRequest.default).toHaveBeenCalledWith({
              timeout: timeout,
              url: url,
              method: method,
              customHeaders: customHeaders
            });
            expect(hasInternetAccess).toBe(false);
            return [2];
        }
      });
    });
  });
  it('resolves to true if there is internet access after including custom headers as well', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var timeout, url, customHeadersToAdd, hasInternetAccess;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            timeout = 2000;
            url = 'foo.com';
            customHeadersToAdd = {
              'any-cool-header-key': 'something-cool'
            };
            return [4, (0, _checkInternetAccess.default)({
              url: url,
              timeout: timeout,
              customHeaders: customHeadersToAdd
            })];

          case 1:
            hasInternetAccess = _a.sent();
            expect(_makeHttpRequest.default).toHaveBeenCalledWith({
              url: url,
              timeout: timeout,
              method: _constants.DEFAULT_HTTP_METHOD,
              customHeaders: customHeadersToAdd
            });
            expect(hasInternetAccess).toBe(true);
            return [2];
        }
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3QvY2hlY2tJbnRlcm5ldEFjY2Vzcy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLElBQUksQ0FBQyxJQUFMLENBQVUsMEJBQVYsRUFBc0MsWUFBQTtBQUNwQyxTQUFBLElBQUksQ0FBQyxFQUFMLENBQVEsVUFBQSxNQUFBLEVBQU07QUFDWixRQUFJLE1BQU0sQ0FBQyxNQUFQLEtBQWtCLE1BQXRCLEVBQThCO0FBQzVCLGFBQU8sT0FBTyxDQUFDLE1BQVIsQ0FBZSxLQUFmLENBQVA7QUFDRDs7QUFDRCxXQUFPLE9BQU8sQ0FBQyxPQUFSLENBQWdCLElBQWhCLENBQVA7QUFDRCxHQUxELENBQUE7QUFLRSxDQU5KOzs7O0FBVEE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkEsUUFBUSxDQUFDLHFCQUFELEVBQXdCLFlBQUE7QUFDOUIsRUFBQSxFQUFFLENBQUMsZ0RBQUQsRUFBbUQsWUFBQTtBQUFBLFdBQUEsU0FBQSxDQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLFlBQUE7Ozs7QUFDbkQsbUJBQUEsQ0FBQSxDQUFBLEVBQU0sbUNBQU4sQ0FBQTs7O0FBQUEsWUFBQSxFQUFBLENBQUEsSUFBQTs7QUFDQSxZQUFBLE1BQU0sQ0FBQyx3QkFBRCxDQUFOLENBQXdCLG9CQUF4QixDQUE2QztBQUMzQyxjQUFBLE9BQU8sRUFBRSwwQkFEa0M7QUFFM0MsY0FBQSxHQUFHLEVBQUUsa0NBRnNDO0FBRzNDLGNBQUEsTUFBTSxFQUFFLDhCQUhtQztBQUkzQyxjQUFBLGFB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QUFHM0MsY0FBQSxNQUFNLEVBQUUsOEJBSG1DO0FBSTNDLGNBQUEsYUFBYSxFQUFFO0FBSjRCLGFBQTdDO0FBTUEsWUFBQSxNQUFNLENBQUMsaUJBQUQsQ0FBTixDQUEwQixJQUExQixDQUErQixJQUEvQjs7OztLQWpCd0YsQ0FBQTtBQWtCekYsR0FsQkMsQ0FBRjtBQW1CRCxDQW5FTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoZWNrSW50ZXJuZXRBY2Nlc3MgZnJvbSAnLi4vdXRpbHMvY2hlY2tJbnRlcm5ldEFjY2Vzcyc7XG5pbXBvcnQgbWFrZUh0dHBSZXF1ZXN0IGZyb20gJy4uL3V0aWxzL21ha2VIdHRwUmVxdWVzdCc7XG5pbXBvcnQge1xuICBERUZBVUxUX0hUVFBfTUVUSE9ELFxuICBERUZBVUxUX1BJTkdfU0VSVkVSX1VSTCxcbiAgREVGQVVMVF9USU1FT1VULFxuICBERUZBVUxUX0NVU1RPTV9IRUFERVJTLFxufSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuXG5qZXN0Lm1vY2soJy4uL3V0aWxzL21ha2VIdHRwUmVxdWVzdCcsICgpID0+XG4gIGplc3QuZm4ocGFyYW1zID0+IHtcbiAgICBpZiAocGFyYW1zLm1ldGhvZCA9PT0gJ0ZBSUwnKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICB9KSxcbik7XG5cbmRlc2NyaWJlKCdjaGVja0ludGVybmV0QWNjZXNzJywgKCkgPT4ge1xuICBpdCgndXNlcyBkZWZhdWx0cyBwYXJhbWV0ZXJzIGlmIG5vIGFyZ3MgYXJlIHBhc3NlZCcsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBjaGVja0ludGVybmV0QWNjZXNzKCk7XG4gICAgZXhwZWN0KG1ha2VIdHRwUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgdGltZW91dDogREVGQVVMVF9USU1FT1VULFxuICAgICAgdXJsOiBERUZBVUxUX1BJTkdfU0VSVkVSX1VSTCxcbiAgICAgIG1ldGhvZDogREVGQVVMVF9IVFRQX01FVEhPRCxcbiAgICAgIGN1c3RvbUhlYWRlcnM6IERFRkFVTFRfQ1VTVE9NX0hFQURFUlMsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZXNvbHZlcyB0byB0cnVlIGlmIHRoZXJlIGlzIEludGVybmV0IGFjY2VzcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0aW1lb3V0ID0gMjAwMDtcbiAgICBjb25zdCB1cmwgPSAnZm9vLmNvbSc7XG4gICAgY29uc3QgaGFzSW50ZXJuZXRBY2Nlc3MgPSBhd2FpdCBjaGVja0ludGVybmV0QWNjZXNzKHtcbiAgICAgIHVybCxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBjdXN0b21IZWFkZXJzOiBERUZBVUxUX0NVU1RPTV9IRUFERVJTLFxuICAgIH0pO1xuICAgIGV4cGVjdChtYWtlSHR0cFJlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgIHVybCxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBtZXRob2Q6IERFRkFVTFRfSFRUUF9NRVRIT0QsXG4gICAgICBjdXN0b21IZWFkZXJzOiBERUZBVUxUX0NVU1RPTV9IRUFERVJTLFxuICAgIH0pO1xuICAgIGV4cGVjdChoYXNJbnRlcm5ldEFjY2VzcykudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ3Jlc29sdmVzIHRvIGZhbHNlIGlmIHRoZXJlIGlzIE5PVCBJbnRlcm5ldCBhY2Nlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdGltZW91dCA9IDIwMDA7XG4gICAgY29uc3QgdXJsID0gJ2ZvbzEyMzMyMS5jb20nO1xuICAgIGNvbnN0IG1ldGhvZCA9ICdGQUlMJztcbiAgICBjb25zdCBjdXN0b21IZWFkZXJzID0gREVGQVVMVF9DVVNUT01fSEVBREVSUztcbiAgICBjb25zdCBoYXNJbnRlcm5ldEFjY2VzcyA9IGF3YWl0IGNoZWNrSW50ZXJuZXRBY2Nlc3Moe1xuICAgICAgdGltZW91dCxcbiAgICAgIHVybCxcbiAgICAgIG1ldGhvZCxcbiAgICAgIGN1c3RvbUhlYWRlcnMsXG4gICAgfSBhcyBhbnkpOyAvLyB0eXBlY2FzdGluZyBpdCBiZWNhdXNlIG1ldGhvZCBjYW4gb25seSBiZSBIRUFELCBPUFRJT05TIGFzIHBlciBUU1xuICAgIGV4cGVjdChtYWtlSHR0cFJlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgIHRpbWVvdXQsXG4gICAgICB1cmwsXG4gICAgICBtZXRob2QsXG4gICAgICBjdXN0b21IZWFkZXJzLFxuICAgIH0pO1xuICAgIGV4cGVjdChoYXNJbnRlcm5ldEFjY2VzcykudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdyZXNvbHZlcyB0byB0cnVlIGlmIHRoZXJlIGlzIGludGVybmV0IGFjY2VzcyBhZnRlciBpbmNsdWRpbmcgY3VzdG9tIGhlYWRlcnMgYXMgd2VsbCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0aW1lb3V0ID0gMjAwMDtcbiAgICBjb25zdCB1cmwgPSAnZm9vLmNvbSc7XG4gICAgY29uc3QgY3VzdG9tSGVhZGVyc1RvQWRkID0ge1xuICAgICAgJ2FueS1jb29sLWhlYWRlci1rZXknOiAnc29tZXRoaW5nLWNvb2wnLFxuICAgIH07XG4gICAgY29uc3QgaGFzSW50ZXJuZXRBY2Nlc3MgPSBhd2FpdCBjaGVja0ludGVybmV0QWNjZXNzKHtcbiAgICAgIHVybCxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBjdXN0b21IZWFkZXJzOiBjdXN0b21IZWFkZXJzVG9BZGQsXG4gICAgfSk7XG4gICAgZXhwZWN0KG1ha2VIdHRwUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgdXJsLFxuICAgICAgdGltZW91dCxcbiAgICAgIG1ldGhvZDogREVGQVVMVF9IVFRQX01FVEhPRCxcbiAgICAgIGN1c3RvbUhlYWRlcnM6IGN1c3RvbUhlYWRlcnNUb0FkZCxcbiAgICB9KTtcbiAgICBleHBlY3QoaGFzSW50ZXJuZXRBY2Nlc3MpLnRvQmUodHJ1ZSk7XG4gIH0pO1xufSk7XG4iXX0=