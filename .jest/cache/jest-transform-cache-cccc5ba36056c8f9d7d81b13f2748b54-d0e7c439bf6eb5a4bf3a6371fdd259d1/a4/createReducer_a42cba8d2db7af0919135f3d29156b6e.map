{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/redux/createReducer.ts"],"names":[],"mappings":"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","sourcesContent":["import get from 'lodash/get';\nimport without from 'lodash/without';\nimport { AnyAction } from 'redux';\nimport * as actionTypes from './actionTypes';\nimport { SEMAPHORE_COLOR } from '../utils/constants';\nimport getSimilarActionInQueue from '../utils/getSimilarActionInQueue';\nimport {\n  NetworkState,\n  EnqueuedAction,\n  FluxAction,\n  Thunk,\n  SemaphoreColor,\n} from '../types';\nimport { ReduxActions, FetchOfflineModeType } from './actionCreators';\nimport nonNullable from '../utils/nonNullable';\n\ntype ComparisonFn = (\n  action: any,\n  actionQueue: EnqueuedAction[],\n) => FluxAction<any> | Thunk | undefined;\n\nconst actionQueue: EnqueuedAction[] = [];\nexport const initialState = {\n  isConnected: true,\n  actionQueue,\n  isQueuePaused: false,\n};\n\nfunction handleOfflineAction(\n  state: NetworkState,\n  { payload: { prevAction, prevThunk }, meta }: FetchOfflineModeType,\n  comparisonFn: ComparisonFn,\n): NetworkState {\n  const isActionToRetry =\n    typeof prevAction === 'object' && get(meta, 'retry') === true;\n\n  const isThunkToRetry =\n    typeof prevThunk === 'function' && get(prevThunk, 'meta.retry') === true;\n\n  if (isActionToRetry || isThunkToRetry) {\n    // If a similar action already existed on the queue, we remove it and push it again to the end of the queue\n    const actionToLookUp = prevAction || prevThunk;\n    const actionWithMetaData =\n      typeof actionToLookUp === 'object'\n        ? ({ ...actionToLookUp, meta } as FluxAction)\n        : actionToLookUp;\n    const similarActionQueued = comparisonFn(\n      actionWithMetaData,\n      state.actionQueue,\n    );\n    const newActionQueue = similarActionQueued\n      ? [...without(state.actionQueue, similarActionQueued), actionWithMetaData]\n      : [...state.actionQueue, actionWithMetaData];\n    return {\n      ...state,\n      actionQueue: newActionQueue.filter(nonNullable),\n    };\n  }\n  return state;\n}\n\nfunction handleRemoveActionFromQueue(\n  state: NetworkState,\n  action: EnqueuedAction,\n): NetworkState {\n  const similarActionQueued = getSimilarActionInQueue(\n    action,\n    state.actionQueue,\n  );\n\n  return {\n    ...state,\n    actionQueue: without(state.actionQueue, similarActionQueued).filter(\n      nonNullable,\n    ),\n  };\n}\n\nfunction handleDismissActionsFromQueue(\n  state: NetworkState,\n  triggerActionToDismiss: string,\n): NetworkState {\n  const newActionQueue = state.actionQueue.filter(action => {\n    const dismissArray = get(action, 'meta.dismiss', []);\n    return !dismissArray.includes(triggerActionToDismiss);\n  });\n\n  return {\n    ...state,\n    actionQueue: newActionQueue,\n  };\n}\n\nfunction handleChangeQueueSemaphore(\n  state: NetworkState,\n  semaphoreColor: SemaphoreColor,\n): NetworkState {\n  return {\n    ...state,\n    isQueuePaused: semaphoreColor === SEMAPHORE_COLOR.RED,\n  };\n}\n\nexport default (comparisonFn: ComparisonFn = getSimilarActionInQueue) => (\n  state: NetworkState = initialState,\n  action: ReduxActions | AnyAction,\n): NetworkState => {\n  switch (action.type) {\n    case actionTypes.CONNECTION_CHANGE:\n      return {\n        ...state,\n        isConnected: action.payload,\n      };\n    case actionTypes.FETCH_OFFLINE_MODE:\n      return handleOfflineAction(\n        state,\n        action as FetchOfflineModeType,\n        comparisonFn,\n      );\n\n    case actionTypes.REMOVE_FROM_ACTION_QUEUE:\n      return handleRemoveActionFromQueue(state, action.payload);\n    case actionTypes.DISMISS_ACTIONS_FROM_QUEUE:\n      return handleDismissActionsFromQueue(state, action.payload);\n    case actionTypes.CHANGE_QUEUE_SEMAPHORE:\n      return handleChangeQueueSemaphore(state, action.payload);\n    default:\n      return state;\n  }\n};\n\nexport function networkSelector(state: { network: NetworkState }) {\n  return state.network;\n}\n"]}