3c4ebe188836e2cb6538f48205266eb3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeTestingLibrary = require("react-native-testing-library");

var _NetworkConsumer = _interopRequireDefault(require("../components/NetworkConsumer"));

var _NetworkProvider = _interopRequireDefault(require("../components/NetworkProvider"));

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var getElement = function getElement(_a) {
  var _b = _a.props,
      props = _b === void 0 ? {} : _b,
      _c = _a.children,
      children = _c === void 0 ? null : _c;
  return _react.default.createElement(_NetworkProvider.default, __assign({}, props), children);
};

function Consumer() {
  return _react.default.createElement(_NetworkConsumer.default, null, function (_a) {
    var isConnected = _a.isConnected;
    return _react.default.createElement(_reactNative.Text, {
      testID: "connectionText"
    }, "Connected: " + isConnected);
  });
}

describe.only('NetworkConsumer', function () {
  it("throws if it's not rendered within the Provider", function () {
    expect(function () {
      return (0, _reactNativeTestingLibrary.render)(_react.default.createElement(Consumer, null));
    }).toThrow('NetworkConsumer components should be rendered within NetworkProvider. ' + 'Make sure you are rendering a NetworkProvider at the top of your component hierarchy');
  });
  it('receives isConnected prop from Provider using context', function () {
    var getByTestId = (0, _reactNativeTestingLibrary.render)(getElement({
      children: _react.default.createElement(Consumer, null)
    })).getByTestId;
    var textChild = getByTestId('connectionText');
    expect(textChild.props.children).toBe('Connected: true');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3QvTmV0d29ya0NvbnN1bWVyLnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBLElBQU0sVUFBVSxHQUFHLFNBQWIsVUFBYSxDQUFDLEVBQUQsRUFNbEI7TUFMQyxFQUFBLEdBQUEsRUFBQSxDQUFBLEs7TUFBQSxLQUFBLEdBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFO01BQ0EsRUFBQSxHQUFBLEVBQUEsQ0FBQSxRO01BQUEsUUFBQSxHQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsRTtBQUlJLFNBQUEsZUFBQSxhQUFBLENBQUMsd0JBQUQsRUFBZ0IsUUFBQSxDQUFBLEVBQUEsRUFBSyxLQUFMLENBQWhCLEVBQTZCLFFBQTdCLENBQUE7QUFBd0QsQ0FOOUQ7O0FBUUEsU0FBUyxRQUFULEdBQWlCO0FBQ2YsU0FDRSxlQUFBLGFBQUEsQ0FBQyx3QkFBRCxFQUFnQixJQUFoQixFQUNHLFVBQUMsRUFBRCxFQUFnQjtRQUFiLFdBQUEsR0FBQSxFQUFBLENBQUEsVztBQUFrQixXQUNwQixlQUFBLGFBQUEsQ0FBQyxpQkFBRCxFQUFLO0FBQUMsTUFBQSxNQUFNLEVBQUM7QUFBUixLQUFMLEVBQStCLGdCQUFjLFdBQTdDLENBRG9CO0FBRXJCLEdBSEgsQ0FERjtBQU9EOztBQUVELFFBQVEsQ0FBQyxJQUFULENBQWMsaUJBQWQsRUFBaUMsWUFBQTtBQUMvQixFQUFBLEVBQUUsQ0FBQyxpREFBRCxFQUFvRCxZQUFBO0FBQ3BELElBQUEsTUFBTSxDQUFDLFlBQUE7QUFBTSxhQUFBLHVDQUFPLGVBQUEsYUFBQSxDQUFDLFFBQUQsRUFBUCxJQUFPLENBQVAsQ0FBQTtBQUFvQixLQUEzQixDQUFOLENBQW1DLE9BQW5DLENBQ0UsMkVBQ0Usc0ZBRko7QUFJRCxHQUxDLENBQUY7QUFPQSxFQUFBLEVBQUUsQ0FBQyx1REFBRCxFQUEwRCxZQUFBO0FBQ2xELFFBQUEsV0FBQSxHQUFBLHVDQUFBLFVBQUEsQ0FBQTtBQUFBLE1BQUEsUUFBQSxFQUFBLGVBQUEsYUFBQSxDQUFBLFFBQUEsRUFBQSxJQUFBO0FBQUEsS0FBQSxDQUFBLEVBQUEsV0FBQTtBQUNSLFFBQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxnQkFBRCxDQUE3QjtBQUNBLElBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFWLENBQWdCLFFBQWpCLENBQU4sQ0FBaUMsSUFBakMsQ0FBc0MsaUJBQXRDO0FBQ0QsR0FKQyxDQUFGO0FBS0QsQ0FiRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LW5hdGl2ZS10ZXN0aW5nLWxpYnJhcnknO1xuaW1wb3J0IE5ldHdvcmtDb25zdW1lciBmcm9tICcuLi9zcmMvY29tcG9uZW50cy9OZXR3b3JrQ29uc3VtZXInO1xuaW1wb3J0IE5ldHdvcmtQcm92aWRlciBmcm9tICcuLi9zcmMvY29tcG9uZW50cy9OZXR3b3JrUHJvdmlkZXInO1xuXG50eXBlIE5ldHdvcmtQcm92aWRlclByb3BzID0gUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIE5ldHdvcmtQcm92aWRlcj47XG5jb25zdCBnZXRFbGVtZW50ID0gKHtcbiAgcHJvcHMgPSB7fSBhcyBOZXR3b3JrUHJvdmlkZXJQcm9wcyxcbiAgY2hpbGRyZW4gPSBudWxsLFxufToge1xuICBwcm9wcz86IE5ldHdvcmtQcm92aWRlclByb3BzO1xuICBjaGlsZHJlbjogbnVsbCB8IFJlYWN0Tm9kZTtcbn0pID0+IDxOZXR3b3JrUHJvdmlkZXIgey4uLnByb3BzfT57Y2hpbGRyZW59PC9OZXR3b3JrUHJvdmlkZXI+O1xuXG5mdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgcmV0dXJuIChcbiAgICA8TmV0d29ya0NvbnN1bWVyPlxuICAgICAgeyh7IGlzQ29ubmVjdGVkIH0pID0+IChcbiAgICAgICAgPFRleHQgdGVzdElEPVwiY29ubmVjdGlvblRleHRcIj57YENvbm5lY3RlZDogJHtpc0Nvbm5lY3RlZH1gfTwvVGV4dD5cbiAgICAgICl9XG4gICAgPC9OZXR3b3JrQ29uc3VtZXI+XG4gICk7XG59XG5cbmRlc2NyaWJlLm9ubHkoJ05ldHdvcmtDb25zdW1lcicsICgpID0+IHtcbiAgaXQoYHRocm93cyBpZiBpdCdzIG5vdCByZW5kZXJlZCB3aXRoaW4gdGhlIFByb3ZpZGVyYCwgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiByZW5kZXIoPENvbnN1bWVyIC8+KSkudG9UaHJvdyhcbiAgICAgICdOZXR3b3JrQ29uc3VtZXIgY29tcG9uZW50cyBzaG91bGQgYmUgcmVuZGVyZWQgd2l0aGluIE5ldHdvcmtQcm92aWRlci4gJyArXG4gICAgICAgICdNYWtlIHN1cmUgeW91IGFyZSByZW5kZXJpbmcgYSBOZXR3b3JrUHJvdmlkZXIgYXQgdGhlIHRvcCBvZiB5b3VyIGNvbXBvbmVudCBoaWVyYXJjaHknLFxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdyZWNlaXZlcyBpc0Nvbm5lY3RlZCBwcm9wIGZyb20gUHJvdmlkZXIgdXNpbmcgY29udGV4dCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoZ2V0RWxlbWVudCh7IGNoaWxkcmVuOiA8Q29uc3VtZXIgLz4gfSkpO1xuICAgIGNvbnN0IHRleHRDaGlsZCA9IGdldEJ5VGVzdElkKCdjb25uZWN0aW9uVGV4dCcpO1xuICAgIGV4cGVjdCh0ZXh0Q2hpbGQucHJvcHMuY2hpbGRyZW4pLnRvQmUoJ0Nvbm5lY3RlZDogdHJ1ZScpO1xuICB9KTtcbn0pO1xuIl19