{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/utils/makeHttpRequest.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;AA2BO,IAAM,OAAO,GAAG;AACrB,mBAAiB,6BADI;AAErB,EAAA,MAAM,EAAE,UAFa;AAGrB,EAAA,OAAO,EAAE;AAHY,CAAhB;;AAiBP,IAAM,eAAe,GAAY;AAC/B,EAAA,MAAM,EAAE,8BADuB;AAE/B,EAAA,GAAG,EAAE,kCAF0B;AAG/B,EAAA,OAAO,EAAE,0BAHsB;AAI/B,EAAA,aAAa,EAAE;AAJgB,CAAjC;;AAMc,SAAU,eAAV,CAA0B,IAA1B,EAAwC;AAC9C,MAAA,EAAA,GAAA,IAAA,IAAA,eAAA;AAAA,MACJ,EAAA,GAAA,EAAA,CAAA,MADI;AAAA,MACJ,MAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,8BAAA,GAAA,EADI;AAAA,MAEJ,EAAA,GAAA,EAAA,CAAA,GAFI;AAAA,MAEJ,GAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,kCAAA,GAAA,EAFI;AAAA,MAGJ,EAAA,GAAA,EAAA,CAAA,OAHI;AAAA,MAGJ,OAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,0BAAA,GAAA,EAHI;AAAA,MAIJ,EAAA,GAAA,EAAA,CAAA,aAJI;AAAA,MAIJ,aAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,iCAAA,GAAA,EAJI;AAAA,MAKJ,UAAA,GAAA,EAAA,CAAA,UALI;;AAON,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAA0B,MAA1B,EAAgD;AAEjE,QAAM,GAAG,GAAG,IAAI,cAAJ,CAAmB,UAAnB,CAAZ;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,MAAT,EAAiB,GAAjB;AACA,IAAA,GAAG,CAAC,OAAJ,GAAc,OAAd;;AACA,IAAA,GAAG,CAAC,MAAJ,GAAa,SAAS,MAAT,GAAe;AAE1B,UAAI,KAAK,MAAL,IAAe,GAAf,IAAsB,KAAK,MAAL,GAAc,GAAxC,EAA6C;AAC3C,QAAA,OAAO,CAAC;AACN,UAAA,MAAM,EAAE,KAAK;AADP,SAAD,CAAP;AAGD,OAJD,MAIO;AACL,QAAA,MAAM,CAAC;AACL,UAAA,MAAM,EAAE,KAAK;AADR,SAAD,CAAN;AAGD;AACF,KAXD;;AAYA,IAAA,GAAG,CAAC,OAAJ,GAAc,SAAS,OAAT,GAAgB;AAC5B,MAAA,MAAM,CAAC;AACL,QAAA,MAAM,EAAE,KAAK;AADR,OAAD,CAAN;AAGD,KAJD;;AAKA,IAAA,GAAG,CAAC,SAAJ,GAAgB,SAAS,SAAT,GAAkB;AAChC,MAAA,MAAM,CAAC;AACL,QAAA,MAAM,EAAE,KAAK;AADR,OAAD,CAAN;AAGD,KAJD;;AAMA,QAAM,eAAe,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,OAAR,CAAA,EAAoB,aAApB,CAArB;;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,eAAZ,EAA6B,OAA7B,CAAqC,UAAA,GAAA,EAAG;AACtC,UAAM,CAAC,GAAG,GAAV;AACA,MAAA,GAAG,CAAC,gBAAJ,CAAqB,CAArB,EAAwB,eAAe,CAAC,CAAD,CAAvC;AACD,KAHD;AAIA,IAAA,GAAG,CAAC,IAAJ,CAAS,IAAT;AACD,GAlCM,CAAP;AAmCD","sourcesContent":["import {\n  DEFAULT_HTTP_METHOD,\n  DEFAULT_PING_SERVER_URL,\n  DEFAULT_TIMEOUT,\n  CACHE_HEADER_VALUE,\n  DEFAULT_CUSTOM_HEADERS,\n} from './constants';\nimport { HTTPHeaders } from '../types';\n\ntype Options = {\n  method?: 'HEAD' | 'OPTIONS';\n  url: string;\n  timeout?: number;\n  testMethod?:\n    | 'onload/2xx'\n    | 'onload/3xx'\n    | 'onload/4xx'\n    | 'onload/5xx'\n    | 'onerror'\n    | 'ontimeout';\n  customHeaders?: HTTPHeaders;\n};\n\ntype ResolvedValue = {\n  status: number;\n};\n\nexport const headers = {\n  'Cache-Control': CACHE_HEADER_VALUE,\n  Pragma: 'no-cache' as 'no-cache',\n  Expires: '0',\n};\n\n/**\n * Utility that promisifies XMLHttpRequest in order to have a nice API that supports cancellation.\n * @param method\n * @param url\n * @param timeout -> Timeout for rejecting the promise and aborting the API request\n * @param testMethod: for testing purposes\n * @param customHeaders: headers received from user configuration.\n * @returns {Promise}\n */\n\ntype PromiseHandler = (args: ResolvedValue) => void;\nconst DEFAULT_OPTIONS: Options = {\n  method: DEFAULT_HTTP_METHOD,\n  url: DEFAULT_PING_SERVER_URL,\n  timeout: DEFAULT_TIMEOUT,\n  customHeaders: DEFAULT_CUSTOM_HEADERS,\n};\nexport default function makeHttpRequest(args?: Options) {\n  const {\n    method = DEFAULT_HTTP_METHOD,\n    url = DEFAULT_PING_SERVER_URL,\n    timeout = DEFAULT_TIMEOUT,\n    customHeaders = DEFAULT_CUSTOM_HEADERS,\n    testMethod,\n  } = args || DEFAULT_OPTIONS;\n  return new Promise((resolve: PromiseHandler, reject: PromiseHandler) => {\n    // @ts-ignore\n    const xhr = new XMLHttpRequest(testMethod);\n    xhr.open(method, url);\n    xhr.timeout = timeout;\n    xhr.onload = function onLoad() {\n      // 3xx is a valid response for us, since the server was reachable\n      if (this.status >= 200 && this.status < 400) {\n        resolve({\n          status: this.status,\n        });\n      } else {\n        reject({\n          status: this.status,\n        });\n      }\n    };\n    xhr.onerror = function onError() {\n      reject({\n        status: this.status,\n      });\n    };\n    xhr.ontimeout = function onTimeOut() {\n      reject({\n        status: this.status,\n      });\n    };\n\n    const combinedHeaders = { ...headers, ...customHeaders };\n    Object.keys(combinedHeaders).forEach(key => {\n      const k = key as keyof typeof headers;\n      xhr.setRequestHeader(k, combinedHeaders[k]);\n    });\n    xhr.send(null);\n  });\n}\n"]}