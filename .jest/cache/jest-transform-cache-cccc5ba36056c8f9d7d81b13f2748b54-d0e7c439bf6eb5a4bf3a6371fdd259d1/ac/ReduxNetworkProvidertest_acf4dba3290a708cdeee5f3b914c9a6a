f76812cab2ddf3f64c4f6297931d4166
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeTestingLibrary = require("react-native-testing-library");

var _enzyme = require("enzyme");

var _ReduxNetworkProvider = require("../components/ReduxNetworkProvider");

var _actionCreators = require("../redux/actionCreators");

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var dispatch = jest.fn();
var props = {
  dispatch: dispatch,
  isConnected: false
};

var getProps = function getProps(overrides) {
  if (overrides === void 0) {
    overrides = {};
  }

  return __assign(__assign({}, props), overrides);
};

describe('ReduxNetworkProvider', function () {
  afterEach(function () {
    dispatch.mockClear();
  });
  describe('render', function () {
    it('has the correct structure', function () {
      var output = (0, _reactNativeTestingLibrary.shallow)(_react.default.createElement(_ReduxNetworkProvider.ReduxNetworkProvider, __assign({}, props), _react.default.createElement(_reactNative.View, null))).output;
      expect(output).toMatchSnapshot();
    });
    it('renders the children correctly', function () {
      var getByText = (0, _reactNativeTestingLibrary.render)(_react.default.createElement(_ReduxNetworkProvider.ReduxNetworkProvider, __assign({}, props), _react.default.createElement(_reactNative.Text, null, "Baz"))).getByText;
      var viewChild = getByText('Baz');
      expect(viewChild).toBeDefined();
    });
  });
  describe('handleConnectivityChange', function () {
    it("dispatches a CONNECTION_CHANGE action with the new connection", function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_ReduxNetworkProvider.ReduxNetworkProvider, __assign({}, props), _react.default.createElement(_reactNative.View, null)));
      wrapper.instance().handleConnectivityChange(true);
      expect(props.dispatch).toHaveBeenCalledWith((0, _actionCreators.connectionChange)(true));
      expect(props.dispatch).toHaveBeenCalledTimes(1);
    });
    it("does NOT dispatch a CONNECTION_CHANGE action if the connection\n    did not change", function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_ReduxNetworkProvider.ReduxNetworkProvider, __assign({}, getProps({
        isConnected: true
      })), _react.default.createElement(_reactNative.View, null)));
      wrapper.instance().handleConnectivityChange(true);
      expect(props.dispatch).not.toHaveBeenCalled();
    });
  });
});
describe('mapStateToProps', function () {
  it('maps isConnected and actionQueue state to props', function () {
    var expected = {
      isConnected: false
    };
    var state = {
      network: __assign({
        actionQueue: [],
        isQueuePaused: false
      }, expected)
    };
    expect((0, _ReduxNetworkProvider.mapStateToProps)(state)).toEqual(expected);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3QvUmVkdXhOZXR3b3JrUHJvdmlkZXIudGVzdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFJQTs7QUFDQTs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUwsRUFBakI7QUFDQSxJQUFNLEtBQUssR0FBRztBQUNaLEVBQUEsUUFBUSxFQUFBLFFBREk7QUFFWixFQUFBLFdBQVcsRUFBRTtBQUZELENBQWQ7O0FBS0EsSUFBTSxRQUFRLEdBQUcsU0FBWCxRQUFXLENBQUMsU0FBRCxFQUFlO0FBQWQsTUFBQSxTQUFBLEtBQUEsS0FBQSxDQUFBLEVBQUE7QUFBQSxJQUFBLFNBQUEsR0FBQSxFQUFBO0FBQWM7O0FBQUssU0FBQSxRQUFBLENBQUEsUUFBQSxDQUFBLEVBQUEsRUFBTSxLQUFOLENBQUEsRUFBZ0IsU0FBaEIsQ0FBQTtBQUE0QixDQUFqRTs7QUFFQSxRQUFRLENBQUMsc0JBQUQsRUFBeUIsWUFBQTtBQUMvQixFQUFBLFNBQVMsQ0FBQyxZQUFBO0FBQ1IsSUFBQSxRQUFRLENBQUMsU0FBVDtBQUNELEdBRlEsQ0FBVDtBQUlBLEVBQUEsUUFBUSxDQUFDLFFBQUQsRUFBVyxZQUFBO0FBQ2pCLElBQUEsRUFBRSxDQUFDLDJCQUFELEVBQThCLFlBQUE7QUFDdEIsVUFBQSxNQUFBLEdBQUEsd0NBQUEsZUFBQSxhQUFBLENBQUEsMENBQUEsRUFBQSxRQUFBLENBQUEsRUFBQSxFQUFBLEtBQUEsQ0FBQSxFLHFEQUFBLENBQUEsRUFBTSxNQUFOO0FBS1IsTUFBQSxNQUFNLENBQUMsTUFBRCxDQUFOLENBQWUsZUFBZjtBQUNELEtBUEMsQ0FBRjtBQVNBLElBQUEsRUFBRSxDQUFDLGdDQUFELEVBQW1DLFlBQUE7QUFDM0IsVUFBQSxTQUFBLEdBQUEsdUNBQUEsZUFBQSxhQUFBLENBQUEsMENBQUEsRUFBQSxRQUFBLENBQUEsRUFBQSxFQUFBLEtBQUEsQ0FBQSxFLDREQUFBLENBQUEsRUFBUyxTQUFUO0FBTVIsVUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUQsQ0FBM0I7QUFDQSxNQUFBLE1BQU0sQ0FBQyxTQUFELENBQU4sQ0FBa0IsV0FBbEI7QUFDRCxLQVRDLENBQUY7QUFVRCxHQXBCTyxDQUFSO0FBc0JBLEVBQUEsUUFBUSxDQUFDLDBCQUFELEVBQTZCLFlBQUE7QUFDbkMsSUFBQSxFQUFFLENBQUMsK0RBQUQsRUFBa0UsWUFBQTtBQUNsRSxVQUFNLE9BQU8sR0FBRyxxQkFDZCxlQUFBLGFBQUEsQ0FBQywwQ0FBRCxFQUFxQixRQUFBLENBQUEsRUFBQSxFQUFLLEtBQUwsQ0FBckIsRUFDRSxlQUFBLGFBQUEsQ0FBQyxpQkFBRCxFQUFLLElBQUwsQ0FERixDQURjLENBQWhCO0FBS0EsTUFBQSxPQUFPLENBQUMsUUFBUixHQUFtQix3QkFBbkIsQ0FBNEMsSUFBNUM7QUFDQSxNQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUCxDQUFOLENBQXVCLG9CQUF2QixDQUE0QyxzQ0FBaUIsSUFBakIsQ0FBNUM7QUFDQSxNQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUCxDQUFOLENBQXVCLHFCQUF2QixDQUE2QyxDQUE3QztBQUNELEtBVEMsQ0FBRjtBQVdBLElBQUEsRUFBRSxDQUFDLG9GQUFELEVBQ2UsWUFBQTtBQUNmLFVBQU0sT0FBTyxHQUFHLHFCQUNkLGVBQUEsYUFBQSxDQUFDLDBDQUFELEVBQXFCLFFBQUEsQ0FBQSxFQUFBLEVBQUssUUFBUSxDQUFDO0FBQUUsUUFBQSxXQUFXLEVBQUU7QUFBZixPQUFELENBQWIsQ0FBckIsRUFDRSxlQUFBLGFBQUEsQ0FBQyxpQkFBRCxFQUFLLElBQUwsQ0FERixDQURjLENBQWhCO0FBS0EsTUFBQSxPQUFPLENBQUMsUUFBUixHQUFtQix3QkFBbkIsQ0FBNEMsSUFBNUM7QUFDQSxNQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUCxDQUFOLENBQXVCLEdBQXZCLENBQTJCLGdCQUEzQjtBQUNELEtBVEMsQ0FBRjtBQVVELEdBdEJPLENBQVI7QUF1QkQsQ0FsRE8sQ0FBUjtBQW9EQSxRQUFRLENBQUMsaUJBQUQsRUFBb0IsWUFBQTtBQUMxQixFQUFBLEVBQUUsQ0FBQyxpREFBRCxFQUFvRCxZQUFBO0FBQ3BELFFBQU0sUUFBUSxHQUFHO0FBQUUsTUFBQSxXQUFXLEVBQUU7QUFBZixLQUFqQjtBQUNBLFFBQU0sS0FBSyxHQUFHO0FBQ1osTUFBQSxPQUFPLEVBQUEsUUFBQSxDQUFBO0FBQ0wsUUFBQSxXQUFXLEVBQUUsRUFEUjtBQUVMLFFBQUEsYUFBYSxFQUFFO0FBRlYsT0FBQSxFQUdGLFFBSEU7QUFESyxLQUFkO0FBUUEsSUFBQSxNQUFNLENBQUMsMkNBQWdCLEtBQWhCLENBQUQsQ0FBTixDQUErQixPQUEvQixDQUF1QyxRQUF2QztBQUNELEdBWEMsQ0FBRjtBQVlELENBYk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7XG4gIHNoYWxsb3cgYXMgcm5TaGFsbG93LFxuICByZW5kZXIgYXMgcm5SZW5kZXIsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZS10ZXN0aW5nLWxpYnJhcnknO1xuaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQge1xuICBSZWR1eE5ldHdvcmtQcm92aWRlcixcbiAgbWFwU3RhdGVUb1Byb3BzLFxufSBmcm9tICcuLi9zcmMvY29tcG9uZW50cy9SZWR1eE5ldHdvcmtQcm92aWRlcic7XG5pbXBvcnQgeyBjb25uZWN0aW9uQ2hhbmdlIH0gZnJvbSAnLi4vc3JjL3JlZHV4L2FjdGlvbkNyZWF0b3JzJztcblxuY29uc3QgZGlzcGF0Y2ggPSBqZXN0LmZuKCk7XG5jb25zdCBwcm9wcyA9IHtcbiAgZGlzcGF0Y2gsXG4gIGlzQ29ubmVjdGVkOiBmYWxzZSxcbn07XG5cbmNvbnN0IGdldFByb3BzID0gKG92ZXJyaWRlcyA9IHt9KSA9PiAoeyAuLi5wcm9wcywgLi4ub3ZlcnJpZGVzIH0pO1xuXG5kZXNjcmliZSgnUmVkdXhOZXR3b3JrUHJvdmlkZXInLCAoKSA9PiB7XG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgZGlzcGF0Y2gubW9ja0NsZWFyKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZW5kZXInLCAoKSA9PiB7XG4gICAgaXQoJ2hhcyB0aGUgY29ycmVjdCBzdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IG91dHB1dCB9ID0gcm5TaGFsbG93KFxuICAgICAgICA8UmVkdXhOZXR3b3JrUHJvdmlkZXIgey4uLnByb3BzfT5cbiAgICAgICAgICA8VmlldyAvPlxuICAgICAgICA8L1JlZHV4TmV0d29ya1Byb3ZpZGVyPixcbiAgICAgICk7XG4gICAgICBleHBlY3Qob3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcblxuICAgIGl0KCdyZW5kZXJzIHRoZSBjaGlsZHJlbiBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcm5SZW5kZXIoXG4gICAgICAgIDxSZWR1eE5ldHdvcmtQcm92aWRlciB7Li4ucHJvcHN9PlxuICAgICAgICAgIDxUZXh0PkJhejwvVGV4dD5cbiAgICAgICAgPC9SZWR1eE5ldHdvcmtQcm92aWRlcj4sXG4gICAgICApO1xuXG4gICAgICBjb25zdCB2aWV3Q2hpbGQgPSBnZXRCeVRleHQoJ0JheicpO1xuICAgICAgZXhwZWN0KHZpZXdDaGlsZCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2hhbmRsZUNvbm5lY3Rpdml0eUNoYW5nZScsICgpID0+IHtcbiAgICBpdChgZGlzcGF0Y2hlcyBhIENPTk5FQ1RJT05fQ0hBTkdFIGFjdGlvbiB3aXRoIHRoZSBuZXcgY29ubmVjdGlvbmAsICgpID0+IHtcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93PFJlZHV4TmV0d29ya1Byb3ZpZGVyPihcbiAgICAgICAgPFJlZHV4TmV0d29ya1Byb3ZpZGVyIHsuLi5wcm9wc30+XG4gICAgICAgICAgPFZpZXcgLz5cbiAgICAgICAgPC9SZWR1eE5ldHdvcmtQcm92aWRlcj4sXG4gICAgICApO1xuICAgICAgd3JhcHBlci5pbnN0YW5jZSgpLmhhbmRsZUNvbm5lY3Rpdml0eUNoYW5nZSh0cnVlKTtcbiAgICAgIGV4cGVjdChwcm9wcy5kaXNwYXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY29ubmVjdGlvbkNoYW5nZSh0cnVlKSk7XG4gICAgICBleHBlY3QocHJvcHMuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcblxuICAgIGl0KGBkb2VzIE5PVCBkaXNwYXRjaCBhIENPTk5FQ1RJT05fQ0hBTkdFIGFjdGlvbiBpZiB0aGUgY29ubmVjdGlvblxuICAgIGRpZCBub3QgY2hhbmdlYCwgKCkgPT4ge1xuICAgICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3c8UmVkdXhOZXR3b3JrUHJvdmlkZXI+KFxuICAgICAgICA8UmVkdXhOZXR3b3JrUHJvdmlkZXIgey4uLmdldFByb3BzKHsgaXNDb25uZWN0ZWQ6IHRydWUgfSl9PlxuICAgICAgICAgIDxWaWV3IC8+XG4gICAgICAgIDwvUmVkdXhOZXR3b3JrUHJvdmlkZXI+LFxuICAgICAgKTtcbiAgICAgIHdyYXBwZXIuaW5zdGFuY2UoKS5oYW5kbGVDb25uZWN0aXZpdHlDaGFuZ2UodHJ1ZSk7XG4gICAgICBleHBlY3QocHJvcHMuZGlzcGF0Y2gpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdtYXBTdGF0ZVRvUHJvcHMnLCAoKSA9PiB7XG4gIGl0KCdtYXBzIGlzQ29ubmVjdGVkIGFuZCBhY3Rpb25RdWV1ZSBzdGF0ZSB0byBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZCA9IHsgaXNDb25uZWN0ZWQ6IGZhbHNlIH07XG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICBuZXR3b3JrOiB7XG4gICAgICAgIGFjdGlvblF1ZXVlOiBbXSxcbiAgICAgICAgaXNRdWV1ZVBhdXNlZDogZmFsc2UsXG4gICAgICAgIC4uLmV4cGVjdGVkLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgZXhwZWN0KG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkpLnRvRXF1YWwoZXhwZWN0ZWQpO1xuICB9KTtcbn0pO1xuIl19