{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/redux/sagas.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeM,SAAU,qBAAV,CAAgC,IAAhC,EAAsE;AAC1E,SAAO,iBAAQ,gBAAR,CAAyB,IAAzB,CAAP;AACD;;AAEK,SAAU,iBAAV,CAA4B,QAA5B,EAA4C;AAChD,SAAO,UAAC,IAAD,EAAkC;AACvC,QAAM,EAAE,GAAG,WAAW,CAAC,YAAA;AAAM,aAAA,IAAI,CAAJ,IAAI,CAAJ;AAAU,KAAjB,EAAmB,QAAnB,CAAtB;AACA,WAAO,YAAA;AACL,MAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD;AAGD,GALD;AAMD;;AAMK,SAAU,oCAAV,CACJ,SADI,EACmB;AAEvB,SAAO,6BAAa,SAAb,CAAP;AACD;;AAOK,SAAU,qBAAV,CAAgC,QAAhC,EAAkD,SAAlD,EAAqE;AACzE,MAAM,OAAO,GAAG,SAAS,CAAC,QAAD,CAAzB;AACA,SAAO,6BAAa,OAAb,CAAP;AACD;;AAcK,SAAW,iBAAX,CAA6B,EAA7B,EAMc;;MALlB,WAAA,GAAA,EAAA,CAAA,W;MACA,aAAA,GAAA,EAAA,CAAA,a;MACA,UAAA,GAAA,EAAA,CAAA,U;MACA,UAAA,GAAA,EAAA,CAAA,U;MACA,aAAA,GAAA,EAAA,CAAA,a;;;;YAEI,EAAA,sBAAS,EAAT,KAAgB,SAAhB,C,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACiC,eAAA,CAAA,CAAA,EAAM,mBAAK,CAAC,gBAAD,EAAU,iBAAQ,KAAlB,CAAL,CAAN,CAAA;;;AAA7B,QAAA,YAAY,GAAiB,EAAA,CAAA,IAAA,EAA7B;AACN,eAAA,CAAA,CAAA,EAAM,mBAAK,iBAAL,EAAwB;AAC5B,UAAA,UAAU,EAAA,UADkB;AAE5B,UAAA,WAAW,EAAE,YAAY,CAAC,WAFE;AAG5B,UAAA,WAAW,EAAA,WAHiB;AAI5B,UAAA,aAAa,EAAA,aAJe;AAK5B,UAAA,UAAU,EAAA,UALkB;AAM5B,UAAA,aAAa,EAAA;AANe,SAAxB,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;;;;AASW,eAAA,CAAA,CAAA,EAAM,mBACjB,oCADiB,EAEjB,qBAFiB,CAAN,CAAA;;;AAAP,QAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;;;;;;;;;aAKG,I,EAAI,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACW,eAAA,CAAA,CAAA,EAAM,mBAAK,IAAL,CAAN,CAAA;;;AAAd,QAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;AACN,eAAA,CAAA,CAAA,EAAM,mBAAK,iBAAL,EAAwB;AAC5B,UAAA,UAAU,EAAA,UADkB;AAE5B,UAAA,WAAW,EAAA,WAFiB;AAG5B,UAAA,WAAW,EAAA,WAHiB;AAI5B,UAAA,aAAa,EAAA,aAJe;AAK5B,UAAA,UAAU,EAAA,UALkB;AAM5B,UAAA,aAAa,EAAA;AANe,SAAxB,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;;;;;;;AAUE,eAAA,CAAA,CAAA,EAAM,yBAAN,CAAA;;;AAAJ,YAAI,EAAA,CAAA,IAAA,EAAJ,EAAuB;AACrB,UAAA,IAAI,CAAC,KAAL;AACD;;;;;;;;AAEJ;;AAaK,SAAW,iBAAX,CAA6B,EAA7B,EAOyC;MAN7C,UAAA,GAAA,EAAA,CAAA,U;MACA,WAAA,GAAA,EAAA,CAAA,W;MACA,WAAA,GAAA,EAAA,CAAA,W;MACA,aAAA,GAAA,EAAA,CAAA,a;MACA,UAAA,GAAA,EAAA,CAAA,U;MACA,aAAA,GAAA,EAAA,CAAA,a;;;;YAEI,EAAA,UAAU,IAAI,WAAd,C,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACF,eAAA,CAAA,CAAA,EAAM,mBAAK,uBAAL,EAA8B;AAClC,UAAA,WAAW,EAAA,WADuB;AAElC,UAAA,aAAa,EAAA,aAFqB;AAGlC,UAAA,UAAU,EAAA,UAHwB;AAIlC,UAAA,gBAAgB,EAAE,KAJgB;AAKlC,UAAA,aAAa,EAAA;AALqB,SAA9B,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;;;;AAQA,eAAA,CAAA,CAAA,EAAM,mBAAK,wBAAL,EAA+B,WAA/B,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;;;;;;;AAEH;;AAaK,SAAW,sBAAX,CAAkC,EAAlC,EAQiC;;MAPrC,WAAA,GAAA,EAAA,CAAA,W;MACA,aAAA,GAAA,EAAA,CAAA,a;MACA,YAAA,GAAA,EAAA,CAAA,Y;MACA,iBAAA,GAAA,EAAA,CAAA,iB;MACA,gBAAA,GAAA,EAAA,CAAA,gB;MACA,UAAA,GAAA,EAAA,CAAA,U;MACA,aAAA,GAAA,EAAA,CAAA,a;;;;AAEa,eAAA,CAAA,CAAA,EAAM,mBACjB,qBADiB,EAEjB,YAFiB,EAGjB,iBAHiB,CAAN,CAAA;;;AAAP,QAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;;;;;;;;;aAMG,I,EAAI,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACT,eAAA,CAAA,CAAA,EAAM,mBAAK,IAAL,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;AAC4B,eAAA,CAAA,CAAA,EAAM,qBAAO,8BAAP,CAAN,CAAA;;;AAAtB,QAAA,KAAK,GAAiB,EAAA,CAAA,IAAA,EAAtB;aACF,EAAE,KAAK,CAAC,WAAN,IAAqB,iBAAiB,KAAK,IAA7C,C,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACF,eAAA,CAAA,CAAA,EAAM,mBAAK,uBAAL,EAA8B;AAClC,UAAA,WAAW,EAAA,WADuB;AAElC,UAAA,aAAa,EAAA,aAFqB;AAGlC,UAAA,UAAU,EAAA,UAHwB;AAIlC,UAAA,gBAAgB,EAAA,gBAJkB;AAKlC,UAAA,aAAa,EAAA;AALqB,SAA9B,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;;;;;;;;;;AAUA,eAAA,CAAA,CAAA,EAAM,yBAAN,CAAA;;;AAAJ,YAAI,EAAA,CAAA,IAAA,EAAJ,EAAuB;AACrB,UAAA,IAAI,CAAC,KAAL;AACD;;;;;;;;AAEJ;;AAWK,SAAW,uBAAX,CAAmC,EAAnC,EAMc;;MALlB,aAAA,GAAA,EAAA,CAAA,a;MACA,WAAA,GAAA,EAAA,CAAA,W;MACA,UAAA,GAAA,EAAA,CAAA,U;MACA,gBAAA,GAAA,EAAA,CAAA,gB;MACA,aAAA,GAAA,EAAA,CAAA,a;;;;AAEA,YAAI,gBAAgB,KAAK,KAArB,IAA8B,sBAAS,YAAT,KAA0B,QAA5D,EAAsE;AACpE,iBAAA,CAAA,CAAA,CAAA;AACD;;AACyB,eAAA,CAAA,CAAA,EAAM,mBAAK,4BAAL,EAA0B;AACxD,UAAA,GAAG,EAAE,aADmD;AAExD,UAAA,OAAO,EAAE,WAF+C;AAGxD,UAAA,MAAM,EAAE,UAHgD;AAIxD,UAAA,aAAa,EAAA;AAJ2C,SAA1B,CAAN,CAAA;;;AAApB,QAAA,iBAAiB,GAAG,EAAA,CAAA,IAAA,EAApB;AAMN,eAAA,CAAA,CAAA,EAAM,mBAAK,wBAAL,EAA+B,iBAA/B,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;;;;AACD;;AAQK,SAAW,wBAAX,CAAoC,iBAApC,EAA8D;;;;;AACtC,eAAA,CAAA,CAAA,EAAM,qBAAO,8BAAP,CAAN,CAAA;;;AAAtB,QAAA,KAAK,GAAiB,EAAA,CAAA,IAAA,EAAtB;YACF,EAAA,KAAK,CAAC,WAAN,KAAsB,iBAAtB,C,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACF,eAAA,CAAA,CAAA,EAAM,kBAAI,sCAAiB,iBAAjB,CAAJ,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;;;;;;;AAEH;;AAea,SAAW,WAAX,CAAuB,IAAvB,EAA8C;;;;;;AACpD,QAAA,EAAA,GASF,IAAI,IAAI,uBATN,EACJ,EAAA,GAAA,EAAA,CAAA,WADI,EACJ,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,0BAAH,GAAkB,EADzB,EAEJ,EAAA,GAAA,EAAA,CAAA,aAFI,EAEJ,aAAa,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,kCAAH,GAA0B,EAFnC,EAGJ,EAAA,GAAA,EAAA,CAAA,YAHI,EAGJ,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAH,GAAI,EAHZ,EAIJ,EAAA,GAAA,EAAA,CAAA,UAJI,EAIJ,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAJb,EAKJ,EAAA,GAAA,EAAA,CAAA,iBALI,EAKJ,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EALrB,EAMJ,EAAA,GAAA,EAAA,CAAA,gBANI,EAMJ,gBAAgB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EANpB,EAOJ,EAAA,GAAA,EAAA,CAAA,UAPI,EAOJ,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,8BAAH,GAAsB,EAP5B,EAQJ,aAAa,GAAA,EAAA,CAAA,aART;AAWN,eAAA,CAAA,CAAA,EAAM,mBAAK,iBAAL,EAAwB;AAC5B,UAAA,WAAW,EAAA,WADiB;AAE5B,UAAA,aAAa,EAAA,aAFe;AAG5B,UAAA,UAAU,EAAA,UAHkB;AAI5B,UAAA,UAAU,EAAA,UAJkB;AAK5B,UAAA,aAAa,EAAA;AALe,SAAxB,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;YAOI,EAAA,YAAY,GAAG,CAAf,C,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACF,eAAA,CAAA,CAAA,EAAM,mBAAK,sBAAL,EAA6B;AACjC,UAAA,WAAW,EAAA,WADsB;AAEjC,UAAA,aAAa,EAAA,aAFoB;AAGjC,UAAA,YAAY,EAAA,YAHqB;AAIjC,UAAA,iBAAiB,EAAA,iBAJgB;AAKjC,UAAA,gBAAgB,EAAA,gBALiB;AAMjC,UAAA,UAAU,EAAA,UANuB;AAOjC,UAAA,aAAa,EAAA;AAPoB,SAA7B,CAAN,CAAA;;;AAAA,QAAA,EAAA,CAAA,IAAA;;;;;;;;AAUH","sourcesContent":["import { put, select, call, take, cancelled, fork } from 'redux-saga/effects';\nimport { eventChannel, Subscribe } from 'redux-saga';\nimport { AppState, Platform } from 'react-native';\nimport NetInfo, { NetInfoState } from '@react-native-community/netinfo';\nimport { networkSelector } from './createReducer';\nimport checkInternetAccess from '../utils/checkInternetAccess';\nimport { connectionChange } from './actionCreators';\nimport { ConnectivityArgs, NetworkState } from '../types';\nimport {\n  DEFAULT_TIMEOUT,\n  DEFAULT_PING_SERVER_URL,\n  DEFAULT_HTTP_METHOD,\n  DEFAULT_ARGS,\n} from '../utils/constants';\n\ntype NetInfoChangeArgs = Omit<\n  ConnectivityArgs,\n  'pingInterval' | 'pingOnlyIfOffline' | 'pingInBackground'\n>;\ntype CheckInternetArgs = Omit<NetInfoChangeArgs, 'shouldPing'> & {\n  pingInBackground: boolean;\n};\n\nexport function netInfoEventChannelFn(emit: (param: NetInfoState) => unknown) {\n  return NetInfo.addEventListener(emit);\n}\n\nexport function intervalChannelFn(interval: number) {\n  return (emit: (param: boolean) => unknown) => {\n    const iv = setInterval(() => emit(true), interval);\n    return () => {\n      clearInterval(iv);\n    };\n  };\n}\n\n/**\n * Returns a factory function that creates a channel from network connection change events\n * @returns {Channel<T>}\n */\nexport function createNetInfoConnectionChangeChannel<T = any>(\n  channelFn: Subscribe<T>,\n) {\n  return eventChannel(channelFn);\n}\n\n/**\n * Returns a factory function that creates a channel from an interval\n * @param interval\n * @returns {Channel<T>}\n */\nexport function createIntervalChannel(interval: number, channelFn: Function) {\n  const handler = channelFn(interval);\n  return eventChannel(handler);\n}\n\n/**\n * Creates a NetInfo change event channel that:\n * - Listens to NetInfo connection change events\n * - If shouldPing === true, it first verifies we have internet access\n * - Otherwise it calls handleConnectivityChange immediately to process the new information into the redux store\n * @param pingTimeout\n * @param pingServerUrl\n * @param shouldPing\n * @param httpMethod\n * @param customHeaders\n */\n\nexport function* netInfoChangeSaga({\n  pingTimeout,\n  pingServerUrl,\n  shouldPing,\n  httpMethod,\n  customHeaders,\n}: NetInfoChangeArgs) {\n  if (Platform.OS === 'android') {\n    const networkState: NetInfoState = yield call([NetInfo, NetInfo.fetch]);\n    yield fork(connectionHandler, {\n      shouldPing,\n      isConnected: networkState.isConnected,\n      pingTimeout,\n      pingServerUrl,\n      httpMethod,\n      customHeaders,\n    });\n  }\n  const chan = yield call(\n    createNetInfoConnectionChangeChannel,\n    netInfoEventChannelFn,\n  );\n  try {\n    while (true) {\n      const isConnected = yield take(chan);\n      yield fork(connectionHandler, {\n        shouldPing,\n        isConnected,\n        pingTimeout,\n        pingServerUrl,\n        httpMethod,\n        customHeaders,\n      });\n    }\n  } finally {\n    if (yield cancelled()) {\n      chan.close();\n    }\n  }\n}\n\n/**\n * Either checks internet by pinging a server or calls the store handler function\n * @param shouldPing\n * @param isConnected\n * @param pingTimeout\n * @param pingServerUrl\n * @param httpMethod\n * @param customHeaders\n * @returns {IterableIterator<ForkEffect | *>}\n */\n\nexport function* connectionHandler({\n  shouldPing,\n  isConnected,\n  pingTimeout,\n  pingServerUrl,\n  httpMethod,\n  customHeaders,\n}: NetInfoChangeArgs & { isConnected: boolean }) {\n  if (shouldPing && isConnected) {\n    yield fork(checkInternetAccessSaga, {\n      pingTimeout,\n      pingServerUrl,\n      httpMethod,\n      pingInBackground: false,\n      customHeaders,\n    });\n  } else {\n    yield fork(handleConnectivityChange, isConnected);\n  }\n}\n\n/**\n * Creates an interval channel that periodically verifies internet access\n * @param pingTimeout\n * @param pingServerUrl\n * @param interval\n * @param pingOnlyIfOffline\n * @param pingInBackground\n * @param httpMethod\n * @param customHeaders\n * @returns {IterableIterator<*>}\n */\nexport function* connectionIntervalSaga({\n  pingTimeout,\n  pingServerUrl,\n  pingInterval,\n  pingOnlyIfOffline,\n  pingInBackground,\n  httpMethod,\n  customHeaders,\n}: Omit<ConnectivityArgs, 'shouldPing'>) {\n  const chan = yield call(\n    createIntervalChannel,\n    pingInterval,\n    intervalChannelFn,\n  );\n  try {\n    while (true) {\n      yield take(chan);\n      const state: NetworkState = yield select(networkSelector);\n      if (!(state.isConnected && pingOnlyIfOffline === true)) {\n        yield fork(checkInternetAccessSaga, {\n          pingTimeout,\n          pingServerUrl,\n          httpMethod,\n          pingInBackground,\n          customHeaders,\n        });\n      }\n    }\n  } finally {\n    if (yield cancelled()) {\n      chan.close();\n    }\n  }\n}\n\n/**\n * Saga that verifies internet connection, besides connectivity, by pinging a server of your choice\n * @param pingServerUrl\n * @param pingTimeout\n * @param httpMethod\n * @param pingInBackground\n * @param customHeaders\n */\n\nexport function* checkInternetAccessSaga({\n  pingServerUrl,\n  pingTimeout,\n  httpMethod,\n  pingInBackground,\n  customHeaders,\n}: CheckInternetArgs) {\n  if (pingInBackground === false && AppState.currentState !== 'active') {\n    return; // <-- Return early as we don't care about connectivity if app is not in foreground.\n  }\n  const hasInternetAccess = yield call(checkInternetAccess, {\n    url: pingServerUrl,\n    timeout: pingTimeout,\n    method: httpMethod,\n    customHeaders,\n  });\n  yield call(handleConnectivityChange, hasInternetAccess);\n}\n\n/**\n * Takes action under the new network connection value:\n * - Dispatches a '@@network-connectivity/CONNECTION_CHANGE' action type\n * - Flushes the queue of pending actions if we are connected back to the internet\n * @param hasInternetAccess\n */\nexport function* handleConnectivityChange(hasInternetAccess: boolean) {\n  const state: NetworkState = yield select(networkSelector);\n  if (state.isConnected !== hasInternetAccess) {\n    yield put(connectionChange(hasInternetAccess));\n  }\n}\n\n/**\n * Saga that controls internet connectivity in your whole application.\n * You just need to fork it from your root saga.\n * It receives the same parameters as withNetworkConnectivity HOC\n * @param pingTimeout\n * @param pingServerUrl\n * @param shouldPing\n * @param pingInterval\n * @param pingOnlyIfOffline\n * @param pingInBackground\n * @param httpMethod\n * @param customHeaders\n */\nexport default function* networkSaga(args?: ConnectivityArgs) {\n  const {\n    pingTimeout = DEFAULT_TIMEOUT,\n    pingServerUrl = DEFAULT_PING_SERVER_URL,\n    pingInterval = 0,\n    shouldPing = true,\n    pingOnlyIfOffline = false,\n    pingInBackground = false,\n    httpMethod = DEFAULT_HTTP_METHOD,\n    customHeaders,\n  } = args || DEFAULT_ARGS;\n\n  yield fork(netInfoChangeSaga, {\n    pingTimeout,\n    pingServerUrl,\n    shouldPing,\n    httpMethod,\n    customHeaders,\n  });\n  if (pingInterval > 0) {\n    yield fork(connectionIntervalSaga, {\n      pingTimeout,\n      pingServerUrl,\n      pingInterval,\n      pingOnlyIfOffline,\n      pingInBackground,\n      httpMethod,\n      customHeaders,\n    });\n  }\n}\n"]}