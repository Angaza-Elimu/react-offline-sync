db0b6366d36860e577d3fba13bc816ff
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.reportLogBoxError = reportLogBoxError;exports.isLogBoxErrorMessage = isLogBoxErrorMessage;exports.isMessageIgnored = isMessageIgnored;exports.addLog = addLog;exports.addException = addException;exports.symbolicateLogNow = symbolicateLogNow;exports.retrySymbolicateLogNow = retrySymbolicateLogNow;exports.symbolicateLogLazy = symbolicateLogLazy;exports.clear = clear;exports.setSelectedLog = setSelectedLog;exports.clearWarnings = clearWarnings;exports.clearErrors = clearErrors;exports.dismiss = dismiss;exports.setWarningFilter = setWarningFilter;exports.setAppInfo = setAppInfo;exports.getAppInfo = getAppInfo;exports.checkWarningFilter = checkWarningFilter;exports.addIgnorePatterns = addIgnorePatterns;exports.setDisabled = setDisabled;exports.isDisabled = isDisabled;exports.observe = observe;exports.withSubscription = withSubscription;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));











var React = _interopRequireWildcard(require("react"));
var _LogBoxLog = _interopRequireDefault(require("./LogBoxLog"));
var _parseLogBoxLog = require("./parseLogBoxLog");







var _parseErrorStack = _interopRequireDefault(require("../../Core/Devtools/parseErrorStack"));

var _NativeLogBox = _interopRequireDefault(require("../../NativeModules/specs/NativeLogBox"));var _jsxFileName = "/Users/DevAC/Desktop/Angaza/react-offline-sync/node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = (0, _getPrototypeOf2.default)(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return (0, _possibleConstructorReturn2.default)(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _createForOfIteratorHelperLoose(o, allowArrayLike) {var it;if (typeof Symbol === "undefined" || o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] == null) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;return function () {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}it = o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();return it.next.bind(it);}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}'use strict';







































var observers = new Set();
var ignorePatterns = new Set();
var appInfo = null;
var logs = new Set();
var updateTimeout = null;
var _isDisabled = false;
var _selectedIndex = -1;

var warningFilter = function warningFilter(format) {
  return {
    finalFormat: format,
    forceDialogImmediately: false,
    suppressDialog_LEGACY: true,
    suppressCompletely: false,
    monitorEvent: 'unknown',
    monitorListVersion: 0,
    monitorSampleRate: 1 };

};

var LOGBOX_ERROR_MESSAGE =
'An error was thrown when attempting to render log messages via LogBox.';

function getNextState() {
  return {
    logs: logs,
    isDisabled: _isDisabled,
    selectedLogIndex: _selectedIndex };

}

function reportLogBoxError(
error,
componentStack)
{
  var ExceptionsManager = require('../../Core/ExceptionsManager');

  error.forceRedbox = true;
  error.message = LOGBOX_ERROR_MESSAGE + "\n\n" + error.message;
  if (componentStack != null) {
    error.componentStack = componentStack;
  }
  ExceptionsManager.handleException(error, true);
}

function isLogBoxErrorMessage(message) {
  return typeof message === 'string' && message.includes(LOGBOX_ERROR_MESSAGE);
}

function isMessageIgnored(message) {
  for (var _iterator = _createForOfIteratorHelperLoose(ignorePatterns), _step; !(_step = _iterator()).done;) {var pattern = _step.value;
    if (
    pattern instanceof RegExp && pattern.test(message) ||
    typeof pattern === 'string' && message.includes(pattern))
    {
      return true;
    }
  }
  return false;
}

function handleUpdate() {
  if (updateTimeout == null) {
    updateTimeout = setImmediate(function () {
      updateTimeout = null;
      var nextState = getNextState();
      observers.forEach(function (_ref) {var observer = _ref.observer;return observer(nextState);});
    });
  }
}

function appendNewLog(newLog) {




  if (isMessageIgnored(newLog.message.content)) {
    return;
  }




  var lastLog = Array.from(logs).pop();
  if (lastLog && lastLog.category === newLog.category) {
    lastLog.incrementCount();
    handleUpdate();
    return;
  }

  if (newLog.level === 'fatal') {



    var OPTIMISTIC_WAIT_TIME = 1000;

    var _addPendingLog = function addPendingLog() {
      logs.add(newLog);
      if (_selectedIndex <= 0) {
        setSelectedLog(logs.size - 1);
      } else {
        handleUpdate();
      }
      _addPendingLog = null;
    };

    var optimisticTimeout = setTimeout(function () {
      if (_addPendingLog) {
        _addPendingLog();
      }
    }, OPTIMISTIC_WAIT_TIME);

    newLog.symbolicate(function (status) {
      if (_addPendingLog && status !== 'PENDING') {
        _addPendingLog();
        clearTimeout(optimisticTimeout);
      } else if (status !== 'PENDING') {

        handleUpdate();
      }
    });
  } else if (newLog.level === 'syntax') {
    logs.add(newLog);
    setSelectedLog(logs.size - 1);
  } else {
    logs.add(newLog);
    handleUpdate();
  }
}

function addLog(log) {
  var errorForStackTrace = new Error();



  setImmediate(function () {
    try {

      var stack = (0, _parseErrorStack.default)(errorForStackTrace);

      appendNewLog(
      new _LogBoxLog.default({
        level: log.level,
        message: log.message,
        isComponentError: false,
        stack: stack,
        category: log.category,
        componentStack: log.componentStack }));


    } catch (error) {
      reportLogBoxError(error);
    }
  });
}

function addException(error) {


  setImmediate(function () {
    try {
      appendNewLog(new _LogBoxLog.default((0, _parseLogBoxLog.parseLogBoxException)(error)));
    } catch (loggingError) {
      reportLogBoxError(loggingError);
    }
  });
}

function symbolicateLogNow(log) {
  log.symbolicate(function () {
    handleUpdate();
  });
}

function retrySymbolicateLogNow(log) {
  log.retrySymbolicate(function () {
    handleUpdate();
  });
}

function symbolicateLogLazy(log) {
  log.symbolicate();
}

function clear() {
  if (logs.size > 0) {
    logs = new Set();
    setSelectedLog(-1);
  }
}

function setSelectedLog(proposedNewIndex) {
  var oldIndex = _selectedIndex;
  var newIndex = proposedNewIndex;

  var logArray = Array.from(logs);
  var index = logArray.length - 1;
  while (index >= 0) {

    if (logArray[index].level === 'syntax') {
      newIndex = index;
      break;
    }
    index -= 1;
  }
  _selectedIndex = newIndex;
  handleUpdate();
  if (_NativeLogBox.default) {
    setTimeout(function () {
      if (oldIndex < 0 && newIndex >= 0) {
        _NativeLogBox.default.show();
      } else if (oldIndex >= 0 && newIndex < 0) {
        _NativeLogBox.default.hide();
      }
    }, 0);
  }
}

function clearWarnings() {
  var newLogs = Array.from(logs).filter(function (log) {return log.level !== 'warn';});
  if (newLogs.length !== logs.size) {
    logs = new Set(newLogs);
    setSelectedLog(-1);
    handleUpdate();
  }
}

function clearErrors() {
  var newLogs = Array.from(logs).filter(
  function (log) {return log.level !== 'error' && log.level !== 'fatal';});

  if (newLogs.length !== logs.size) {
    logs = new Set(newLogs);
    setSelectedLog(-1);
  }
}

function dismiss(log) {
  if (logs.has(log)) {
    logs.delete(log);
    handleUpdate();
  }
}

function setWarningFilter(filter) {
  warningFilter = filter;
}

function setAppInfo(info) {
  appInfo = info;
}

function getAppInfo() {
  return appInfo != null ? appInfo() : null;
}

function checkWarningFilter(format) {
  return warningFilter(format);
}

function addIgnorePatterns(
patterns)
{


  var newPatterns = patterns.filter(function (pattern) {
    if (pattern instanceof RegExp) {
      for (var _iterator2 = _createForOfIteratorHelperLoose(ignorePatterns.entries()), _step2; !(_step2 = _iterator2()).done;) {var existingPattern = _step2.value;
        if (
        existingPattern instanceof RegExp &&
        existingPattern.toString() === pattern.toString())
        {
          return false;
        }
      }
      return true;
    }
    return !ignorePatterns.has(pattern);
  });

  if (newPatterns.length === 0) {
    return;
  }
  for (var _iterator3 = _createForOfIteratorHelperLoose(newPatterns), _step3; !(_step3 = _iterator3()).done;) {var pattern = _step3.value;
    ignorePatterns.add(pattern);





    logs = new Set(
    Array.from(logs).filter(function (log) {return !isMessageIgnored(log.message.content);}));

  }
  handleUpdate();
}

function setDisabled(value) {
  if (value === _isDisabled) {
    return;
  }
  _isDisabled = value;
  handleUpdate();
}

function isDisabled() {
  return _isDisabled;
}

function observe(observer) {
  var subscription = { observer: observer };
  observers.add(subscription);

  observer(getNextState());

  return {
    unsubscribe: function unsubscribe() {
      observers.delete(subscription);
    } };

}

















function withSubscription(
WrappedComponent)
{var
  LogBoxStateSubscription = function (_React$Component) {(0, _inherits2.default)(LogBoxStateSubscription, _React$Component);var _super = _createSuper(LogBoxStateSubscription);function LogBoxStateSubscription() {var _this;(0, _classCallCheck2.default)(this, LogBoxStateSubscription);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));_this.










      state = {
        logs: new Set(),
        isDisabled: false,
        hasError: false,
        selectedLogIndex: -1 };_this.






























      _handleDismiss = function () {var _this$state =



        _this.state,selectedLogIndex = _this$state.selectedLogIndex,stateLogs = _this$state.logs;
        var logsArray = Array.from(stateLogs);
        if (selectedLogIndex != null) {
          if (logsArray.length - 1 <= 0) {
            setSelectedLog(-1);
          } else if (selectedLogIndex >= logsArray.length - 1) {
            setSelectedLog(selectedLogIndex - 1);
          }

          dismiss(logsArray[selectedLogIndex]);
        }
      };_this.

      _handleMinimize = function () {
        setSelectedLog(-1);
      };_this.

      _handleSetSelectedLog = function (index) {
        setSelectedLog(index);
      };return _this;}(0, _createClass2.default)(LogBoxStateSubscription, [{ key: "componentDidCatch", value: function componentDidCatch(err, errorInfo) {reportLogBoxError(err, errorInfo.componentStack);} }, { key: "render", value: function render() {if (this.state.hasError) {return null;}return React.createElement(WrappedComponent, { logs: Array.from(this.state.logs), isDisabled: this.state.isDisabled, selectedLogIndex: this.state.selectedLogIndex, __source: { fileName: _jsxFileName, lineNumber: 432, columnNumber: 9 } });} }, { key: "componentDidMount", value: function componentDidMount() {var _this2 = this;this._subscription = observe(function (data) {_this2.setState(data);});} }, { key: "componentWillUnmount", value: function componentWillUnmount() {if (this._subscription != null) {this._subscription.unsubscribe();}} }], [{ key: "getDerivedStateFromError", value: function getDerivedStateFromError() {return { hasError: true };} }]);return LogBoxStateSubscription;}(React.Component);


  return LogBoxStateSubscription;
}