3b86d4f2470adac0bfd7d34234cc5951
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _createNetworkMiddleware = _interopRequireWildcard(require("../redux/createNetworkMiddleware"));

var actionCreators = _interopRequireWildcard(require("../redux/actionCreators"));

var _wait = _interopRequireDefault(require("../utils/wait"));

var _constants = require("../utils/constants");

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var getFetchAction = function getFetchAction(type) {
  return {
    type: type,
    payload: {
      isFetching: true
    }
  };
};

describe('createNetworkMiddleware with actionTypes in config', function () {
  var networkMiddleware = (0, _createNetworkMiddleware.default)({
    actionTypes: ['REFRESH_DATA']
  });
  var middlewares = [networkMiddleware, _reduxThunk.default];
  var mockStore = (0, _reduxMockStore.default)(middlewares);
  it('action DOES NOT match criteria', function () {
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    store.dispatch({
      type: 'TEST'
    });
    var actions = store.getActions();
    expect(actions).toEqual([{
      type: 'TEST'
    }]);
  });
  it('action MATCHES criteria, status ONLINE', function () {
    var initialState = {
      network: {
        isConnected: true,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    var action = getFetchAction('FETCH_SOME_DATA_REQUEST');
    store.dispatch(action);
    var actions = store.getActions();
    expect(actions).toEqual([getFetchAction('FETCH_SOME_DATA_REQUEST')]);
  });
  it('action MATCHES criteria through REGEX, status OFFLINE', function () {
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    var action = getFetchAction('FETCH_SOME_DATA_REQUEST');
    store.dispatch(action);
    var actions = store.getActions();
    expect(actions).toEqual([actionCreators.fetchOfflineMode(action)]);
  });
  it('action MATCHES criteria through ARRAY of ACTION TYPES, status OFFLINE', function () {
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    var action = getFetchAction('REFRESH_DATA');
    store.dispatch(action);
    var actions = store.getActions();
    expect(actions).toEqual([actionCreators.fetchOfflineMode(action)]);
  });
  it('action ENQUEUED, status back ONLINE', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var action1, action2, action3, prevActionQueue, initialState, store, actions;
      return __generator(this, function (_a) {
        action1 = getFetchAction('FETCH_SOME_DATA_REQUEST');
        action2 = getFetchAction('FETCH_SOMETHING_ELSE_REQUEST');
        action3 = getFetchAction('FETCH_USER_REQUEST');
        prevActionQueue = [action1, action2, action3];
        initialState = {
          network: {
            isConnected: false,
            actionQueue: prevActionQueue
          }
        };
        store = mockStore(initialState);
        store.dispatch(actionCreators.connectionChange(true));
        actions = store.getActions();
        expect(actions).toEqual([actionCreators.connectionChange(true)]);
        return [2];
      });
    });
  });
  it('action ENQUEUED, queue PAUSED, status queue RESUMED', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var action1, action2, action3, prevActionQueue, initialState, store, actions;
      return __generator(this, function (_a) {
        action1 = getFetchAction('FETCH_SOME_DATA_REQUEST');
        action2 = getFetchAction('FETCH_SOMETHING_ELSE_REQUEST');
        action3 = getFetchAction('FETCH_USER_REQUEST');
        prevActionQueue = [action1, action2, action3];
        initialState = {
          network: {
            isConnected: true,
            isQueuePaused: true,
            actionQueue: prevActionQueue
          }
        };
        store = mockStore(initialState);
        store.dispatch(actionCreators.changeQueueSemaphore(_constants.SEMAPHORE_COLOR.GREEN));
        actions = store.getActions();
        expect(actions).toEqual([actionCreators.changeQueueSemaphore(_constants.SEMAPHORE_COLOR.GREEN)]);
        return [2];
      });
    });
  });
});
describe('createNetworkMiddleware with NO CONFIG', function () {
  var networkMiddleware = (0, _createNetworkMiddleware.default)();
  var middlewares = [networkMiddleware];
  var mockStore = (0, _reduxMockStore.default)(middlewares);
  it('REFRESH_ACTION does not match in this case in OFFLINE mode', function () {
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    var action = getFetchAction('REFRESH_DATA');
    store.dispatch(action);
    var actions = store.getActions();
    expect(actions).toEqual([getFetchAction('REFRESH_DATA')]);
  });
});
describe('createNetworkMiddleware with different REGEX config', function () {
  var networkMiddleware = (0, _createNetworkMiddleware.default)({
    regexActionType: /REFRESH/
  });
  var middlewares = [networkMiddleware];
  var mockStore = (0, _reduxMockStore.default)(middlewares);
  it('REFRESH_ACTION MATCHES through REGEX in OFFLINE mode', function () {
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    var action = getFetchAction('REFRESH_DATA');
    store.dispatch(action);
    var actions = store.getActions();
    expect(actions).toEqual([actionCreators.fetchOfflineMode(action)]);
  });
  it('FETCH_ACTION type no longer matches default REGEX', function () {
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    var action = getFetchAction('FETCH_DATA');
    store.dispatch(action);
    var actions = store.getActions();
    expect(actions).toEqual([getFetchAction('FETCH_DATA')]);
  });
});
describe('createNetworkMiddleware with thunks', function () {
  var fetchMockData = function fetchMockData(dispatch) {
    return new Promise(function (resolve) {
      setTimeout(function () {
        dispatch({
          type: 'FETCH_DATA_SUCCESS'
        });
        resolve();
      }, 1000);
    });
  };

  var fetchData = function fetchData(dispatch) {
    dispatch({
      type: 'FETCH_DATA_REQUEST'
    });
    return fetchMockData(dispatch);
  };

  fetchData.interceptInOffline = true;

  function fetchSomethingWithoutInterception(dispatch) {
    return dispatch({
      type: 'TOGGLE_DROPDOWN'
    });
  }

  it('thunk does NOT match criteria', function () {
    var networkMiddleware = (0, _createNetworkMiddleware.default)();
    var middlewares = [networkMiddleware, _reduxThunk.default];
    var mockStore = (0, _reduxMockStore.default)(middlewares);
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    store.dispatch(fetchSomethingWithoutInterception);
    var actions = store.getActions();
    expect(actions).toEqual([{
      type: 'TOGGLE_DROPDOWN'
    }]);
  });
  it('thunk MATCHES criteria and we are OFFLINE', function () {
    var networkMiddleware = (0, _createNetworkMiddleware.default)();
    var middlewares = [networkMiddleware, _reduxThunk.default];
    var mockStore = (0, _reduxMockStore.default)(middlewares);
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    store.dispatch(fetchData);
    var actions = store.getActions();
    expect(actions).toEqual([actionCreators.fetchOfflineMode(fetchData)]);
  });
  it('thunk enqueued, regex MATCHES criteria, back ONLINE -> thunk gets redispatched', function () {
    var networkMiddleware = (0, _createNetworkMiddleware.default)();
    var middlewares = [networkMiddleware, _reduxThunk.default];
    var mockStore = (0, _reduxMockStore.default)(middlewares);
    fetchData.retry = true;
    var initialState = {
      network: {
        isConnected: true,
        actionQueue: [fetchData]
      }
    };
    var store = mockStore(initialState);
    store.dispatch(fetchData).then(function () {
      var actions = store.getActions();
      expect(actions).toEqual([actionCreators.removeActionFromQueue(fetchData), {
        type: 'FETCH_DATA_REQUEST'
      }, {
        type: 'FETCH_DATA_SUCCESS'
      }]);
    });
  });
});
describe('createNetworkMiddleware with dismissing actions functionality', function () {
  describe('Plain objects', function () {
    var getFetchActionWithDismiss = function getFetchActionWithDismiss(type) {
      var actionsToDismiss = [];

      for (var _i = 1; _i < arguments.length; _i++) {
        actionsToDismiss[_i - 1] = arguments[_i];
      }

      return {
        type: type,
        payload: {
          isFetching: true
        },
        meta: {
          retry: true,
          dismiss: actionsToDismiss
        }
      };
    };

    it('NO actions enqueued with dismiss options', function () {
      var networkMiddleware = (0, _createNetworkMiddleware.default)();
      var middlewares = [networkMiddleware];
      var mockStore = (0, _reduxMockStore.default)(middlewares);
      var actionEnqueued = getFetchActionWithDismiss('FETCH_DATA');
      var navigationAction = {
        type: 'NAVIGATE_BACK'
      };
      var initialState = {
        network: {
          isConnected: false,
          actionQueue: [actionEnqueued]
        }
      };
      var store = mockStore(initialState);
      store.dispatch(navigationAction);
      var actionsDispatched = store.getActions();
      expect(actionsDispatched).toEqual([{
        type: 'NAVIGATE_BACK'
      }]);
    });
    it('SOME actions enqueued with dismiss options', function () {
      var networkMiddleware = (0, _createNetworkMiddleware.default)();
      var middlewares = [networkMiddleware];
      var mockStore = (0, _reduxMockStore.default)(middlewares);
      var actionEnqueued = getFetchActionWithDismiss('FETCH_DATA', 'NAVIGATE_BACK');
      var navigationAction = {
        type: 'NAVIGATE_BACK'
      };
      var initialState = {
        network: {
          isConnected: false,
          actionQueue: [actionEnqueued]
        }
      };
      var store = mockStore(initialState);
      store.dispatch(navigationAction);
      var actionsDispatched = store.getActions();
      expect(actionsDispatched).toEqual([actionCreators.dismissActionsFromQueue('NAVIGATE_BACK'), {
        type: 'NAVIGATE_BACK'
      }]);
    });
    it('SOME actions enqueued with dismiss options, but no match', function () {
      var networkMiddleware = (0, _createNetworkMiddleware.default)();
      var middlewares = [networkMiddleware];
      var mockStore = (0, _reduxMockStore.default)(middlewares);
      var actionEnqueued = getFetchActionWithDismiss('FETCH_DATA', 'NAVIGATE_BACK');
      var navigationAction = {
        type: 'NAVIGATE_TO_LOGIN'
      };
      var initialState = {
        network: {
          isConnected: false,
          actionQueue: [actionEnqueued]
        }
      };
      var store = mockStore(initialState);
      store.dispatch(navigationAction);
      var actionsDispatched = store.getActions();
      expect(actionsDispatched).toEqual([{
        type: 'NAVIGATE_TO_LOGIN'
      }]);
    });
  });
  describe('thunks', function () {
    function fetchThunk(dispatch) {
      dispatch({
        type: 'FETCH_DATA_REQUEST'
      });
    }

    it('Thunks enqueued with NO dismiss options', function () {
      var networkMiddleware = (0, _createNetworkMiddleware.default)();
      var middlewares = [networkMiddleware];
      var mockStore = (0, _reduxMockStore.default)(middlewares);
      fetchThunk.meta = {
        retry: true,
        dismiss: []
      };
      var navigationAction = {
        type: 'NAVIGATE_BACK'
      };
      var initialState = {
        network: {
          isConnected: false,
          actionQueue: [fetchThunk]
        }
      };
      var store = mockStore(initialState);
      store.dispatch(navigationAction);
      var actionsDispatched = store.getActions();
      expect(actionsDispatched).toEqual([{
        type: 'NAVIGATE_BACK'
      }]);
    });
    it('SOME thunks enqueued with dismiss options', function () {
      var networkMiddleware = (0, _createNetworkMiddleware.default)();
      var middlewares = [networkMiddleware];
      var mockStore = (0, _reduxMockStore.default)(middlewares);
      fetchThunk.meta = {
        retry: true,
        dismiss: ['NAVIGATE_TO_LOGIN']
      };
      var navigationAction = {
        type: 'NAVIGATE_TO_LOGIN'
      };
      var initialState = {
        network: {
          isConnected: false,
          actionQueue: [fetchThunk]
        }
      };
      var store = mockStore(initialState);
      store.dispatch(navigationAction);
      var actionsDispatched = store.getActions();
      expect(actionsDispatched).toEqual([actionCreators.dismissActionsFromQueue('NAVIGATE_TO_LOGIN'), {
        type: 'NAVIGATE_TO_LOGIN'
      }]);
    });
  });
});
describe('createNetworkMiddleware with queueDeselector', function () {
  var mockDequeueSelector = jest.fn();
  var networkMiddleware = (0, _createNetworkMiddleware.default)({
    shouldDequeueSelector: mockDequeueSelector
  });
  var middlewares = [networkMiddleware];
  var mockStore = (0, _reduxMockStore.default)(middlewares);
  it('Proxies action to next middleware if deselector returns false', function () {
    var initialState = {
      network: {
        isConnected: true,
        actionQueue: []
      }
    };
    var store = mockStore(initialState);
    var action = getFetchAction('REFRESH_DATA');
    store.dispatch(action);
    var actions = store.getActions();
    expect(actions).toEqual([getFetchAction('REFRESH_DATA')]);
  });
});
describe('createReleaseQueue', function () {
  var mockDispatch = jest.fn();
  var mockGetState = jest.fn();
  var mockDequeueSelector = jest.fn();
  var mockDelay = 50;
  beforeEach(function () {
    mockDequeueSelector.mockImplementation(function () {
      return true;
    });
    mockGetState.mockImplementation(function () {
      return {
        network: {
          isConnected: true,
          isQueuePaused: false
        }
      };
    });
  });
  afterEach(function () {
    mockDispatch.mockClear();
    mockGetState.mockClear();
  });
  it('empties the queue if we are online and queue is not halted', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var releaseQueue, foo, bar, actionQueue;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            releaseQueue = (0, _createNetworkMiddleware.createReleaseQueue)(mockGetState, mockDispatch, mockDelay, mockDequeueSelector);
            foo = {
              type: 'foo',
              payload: {}
            };
            bar = {
              type: 'bar',
              payload: {}
            };
            actionQueue = [foo, bar];
            return [4, releaseQueue(actionQueue)];

          case 1:
            _a.sent();

            expect(mockDispatch).toHaveBeenCalledTimes(4);
            expect(mockDispatch).toHaveBeenNthCalledWith(1, actionCreators.removeActionFromQueue(foo));
            expect(mockDispatch).toHaveBeenNthCalledWith(2, foo);
            expect(mockDispatch).toHaveBeenNthCalledWith(3, actionCreators.removeActionFromQueue(bar));
            expect(mockDispatch).toHaveBeenNthCalledWith(4, bar);
            return [2];
        }
      });
    });
  });
  it('does not empty the queue if dequeue selector returns false', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var releaseQueue, foo, bar, actionQueue;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            releaseQueue = (0, _createNetworkMiddleware.createReleaseQueue)(mockGetState, mockDispatch, mockDelay, function () {
              return false;
            });
            foo = {
              type: 'foo',
              payload: {}
            };
            bar = {
              type: 'bar',
              payload: {}
            };
            actionQueue = [foo, bar];
            return [4, releaseQueue(actionQueue)];

          case 1:
            _a.sent();

            expect(mockDispatch).toHaveBeenCalledTimes(0);
            return [2];
        }
      });
    });
  });
  it('does not empty the queue if queue has been halted', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var releaseQueue, foo, bar, actionQueue;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            mockGetState.mockImplementation(function () {
              return {
                network: {
                  isQueuePaused: true
                }
              };
            });
            releaseQueue = (0, _createNetworkMiddleware.createReleaseQueue)(mockGetState, mockDispatch, mockDelay, mockDequeueSelector);
            foo = {
              type: 'foo',
              payload: {}
            };
            bar = {
              type: 'bar',
              payload: {}
            };
            actionQueue = [foo, bar];
            return [4, releaseQueue(actionQueue)];

          case 1:
            _a.sent();

            expect(mockDispatch).toHaveBeenCalledTimes(0);
            return [2];
        }
      });
    });
  });
  it('dispatches only during the online window', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var switchToOffline, releaseQueue, foo, bar, actionQueue;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            switchToOffline = function switchToOffline() {
              return new Promise(function (resolve) {
                return __awaiter(void 0, void 0, void 0, function () {
                  return __generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        return [4, (0, _wait.default)(30)];

                      case 1:
                        _a.sent();

                        mockGetState.mockImplementation(function () {
                          return {
                            network: {
                              isConnected: false
                            }
                          };
                        });
                        resolve();
                        return [2];
                    }
                  });
                });
              });
            };

            releaseQueue = (0, _createNetworkMiddleware.createReleaseQueue)(mockGetState, mockDispatch, mockDelay, mockDequeueSelector);
            foo = {
              type: 'foo',
              payload: {}
            };
            bar = {
              type: 'bar',
              payload: {}
            };
            actionQueue = [foo, bar];
            return [4, Promise.all([releaseQueue(actionQueue), switchToOffline()])];

          case 1:
            _a.sent();

            expect(mockDispatch).toHaveBeenCalledTimes(2);
            expect(mockDispatch).toHaveBeenNthCalledWith(1, actionCreators.removeActionFromQueue(foo));
            expect(mockDispatch).toHaveBeenNthCalledWith(2, foo);
            return [2];
        }
      });
    });
  });
});
describe('createNetworkMiddleware with wrong type params', function () {
  it('invalid regex', function () {
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var networkMiddleware = (0, _createNetworkMiddleware.default)({
      regexActionType: 'REFRESH'
    });
    var middlewares = [networkMiddleware];
    var mockStore = (0, _reduxMockStore.default)(middlewares);
    var store = mockStore(initialState);
    var action = getFetchAction('REFRESH_DATA');
    expect(function () {
      return store.dispatch(action);
    }).toThrow('You should pass a regex as regexActionType param');
  });
  it('invalid actionTypes', function () {
    var initialState = {
      network: {
        isConnected: false,
        actionQueue: []
      }
    };
    var networkMiddleware = (0, _createNetworkMiddleware.default)({
      actionTypes: 'REFRESH'
    });
    var middlewares = [networkMiddleware];
    var mockStore = (0, _reduxMockStore.default)(middlewares);
    var store = mockStore(initialState);
    var action = getFetchAction('REFRESH_DATA');
    expect(function () {
      return store.dispatch(action);
    }).toThrow('You should pass an array as actionTypes param');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,