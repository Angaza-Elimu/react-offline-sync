b76c8fdc80f49714efec168ebb454adf
Object.defineProperty(exports, "__esModule", { value: true });exports.getByAPI = exports.getAllByTestId = exports.getAllByProps = exports.getAllByDisplayValue = exports.getAllByPlaceholder = exports.getAllByText = exports.getAllByType = exports.getAllByName = exports.fixedGetByTestId = exports.getByTestId = exports.getByProps = exports.getByDisplayValue = exports.getByPlaceholder = exports.getByText = exports.getByType = exports.getByName = void 0;var React = require("@babel/runtime/helpers/interopRequireWildcard")(require("react"));var _prettyFormat = require("@babel/runtime/helpers/interopRequireDefault")(require("pretty-format"));var filterNodeByType = function filterNodeByType(node, type) {return node.type === type;};var filterNodeByName = function filterNodeByName(node, name) {return typeof node.type !== 'string' && (node.type.displayName === name || node.type.name === name);};var getNodeByText = function getNodeByText(node, text) {try {var _require = require('react-native'),Text = _require.Text;var isTextComponent = filterNodeByType(node, Text);if (isTextComponent) {var textChildren = getChildrenAsText(node.props.children, Text);if (textChildren) {var textToTest = textChildren.join('');return typeof text === 'string' ? text === textToTest : text.test(textToTest);}}return false;} catch (error) {throw (0, require("./errors").createLibraryNotSupportedError)(error);}};var getChildrenAsText = function getChildrenAsText(children, TextComponent) {var textContent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];React.Children.forEach(children, function (child) {var _child$props;if (typeof child === 'string') {textContent.push(child);return;}if (typeof child === 'number') {textContent.push(child.toString());return;}if (child == null ? void 0 : (_child$props = child.props) == null ? void 0 : _child$props.children) {getChildrenAsText(child.props.children, TextComponent, textContent);}});return textContent;};var getTextInputNodeByPlaceholder = function getTextInputNodeByPlaceholder(node, placeholder) {try {var _require2 = require('react-native'),TextInput = _require2.TextInput;return filterNodeByType(node, TextInput) && (typeof placeholder === 'string' ? placeholder === node.props.placeholder : placeholder.test(node.props.placeholder));} catch (error) {throw (0, require("./errors").createLibraryNotSupportedError)(error);}};var getTextInputNodeByDisplayValue = function getTextInputNodeByDisplayValue(node, value) {try {var _require3 = require('react-native'),TextInput = _require3.TextInput;return filterNodeByType(node, TextInput) && (typeof value === 'string' ? value === node.props.value : value.test(node.props.value));} catch (error) {throw (0, require("./errors").createLibraryNotSupportedError)(error);}};var getByName = function getByName(instance, warnFn) {return function getByNameFn(name) {warnFn && warnFn('getByName');try {return typeof name === 'string' ? instance.find(function (node) {return filterNodeByName(node, name);}) : instance.findByType(name);} catch (error) {throw new (require("./errors").ErrorWithStack)((0, require("./errors").prepareErrorMessage)(error), getByNameFn);}};};exports.getByName = getByName;var getByType = function getByType(instance, warnFn) {return function getByTypeFn(type) {warnFn && warnFn('getByType');try {return instance.findByType(type);} catch (error) {throw new (require("./errors").ErrorWithStack)((0, require("./errors").prepareErrorMessage)(error), getByTypeFn);}};};exports.getByType = getByType;var getByText = function getByText(instance) {return function getByTextFn(text) {try {return instance.find(function (node) {return getNodeByText(node, text);});} catch (error) {throw new (require("./errors").ErrorWithStack)((0, require("./errors").prepareErrorMessage)(error), getByTextFn);}};};exports.getByText = getByText;var getByPlaceholder = function getByPlaceholder(instance) {return function getByPlaceholderFn(placeholder) {try {return instance.find(function (node) {return getTextInputNodeByPlaceholder(node, placeholder);});} catch (error) {throw new (require("./errors").ErrorWithStack)((0, require("./errors").prepareErrorMessage)(error), getByPlaceholderFn);}};};exports.getByPlaceholder = getByPlaceholder;var getByDisplayValue = function getByDisplayValue(instance) {return function getByDisplayValueFn(placeholder) {try {return instance.find(function (node) {return getTextInputNodeByDisplayValue(node, placeholder);});} catch (error) {throw new (require("./errors").ErrorWithStack)((0, require("./errors").prepareErrorMessage)(error), getByDisplayValueFn);}};};exports.getByDisplayValue = getByDisplayValue;var getByProps = function getByProps(instance, warnFn) {return function getByPropsFn(props) {warnFn && warnFn('getByProps');try {return instance.findByProps(props);} catch (error) {throw new (require("./errors").ErrorWithStack)((0, require("./errors").prepareErrorMessage)(error), getByPropsFn);}};};exports.getByProps = getByProps;var getByTestId = function getByTestId(instance) {return function getByTestIdFn(testID) {try {return instance.findByProps({ testID: testID });} catch (error) {throw new (require("./errors").ErrorWithStack)((0, require("./errors").prepareErrorMessage)(error), getByTestIdFn);}};};exports.getByTestId = getByTestId;var fixedGetByTestId = function fixedGetByTestId(instance) {return function getByTestIdFn(testID) {try {var results = getAllByTestId(instance)(testID);if (results.length === 1) {return results[0];} else {throw new (require("./errors").ErrorWithStack)(" Expected 1 but found " + results.length + " instances with testID: " + String(testID), getByTestIdFn);}} catch (error) {throw new (require("./errors").ErrorWithStack)((0, require("./errors").prepareErrorMessage)(error), getByTestIdFn);}};};exports.fixedGetByTestId = fixedGetByTestId;var getAllByName = function getAllByName(instance, warnFn) {return function getAllByNameFn(name) {warnFn && warnFn('getAllByName');var results = typeof name === 'string' ? instance.findAll(function (node) {return filterNodeByName(node, name);}) : instance.findAllByType(name);if (results.length === 0) {throw new (require("./errors").ErrorWithStack)('No instances found', getAllByNameFn);}return results;};};exports.getAllByName = getAllByName;var getAllByType = function getAllByType(instance, warnFn) {return function getAllByTypeFn(type) {warnFn && warnFn('getAllByType');var results = instance.findAllByType(type);if (results.length === 0) {throw new (require("./errors").ErrorWithStack)('No instances found', getAllByTypeFn);}return results;};};exports.getAllByType = getAllByType;var getAllByText = function getAllByText(instance) {return function getAllByTextFn(text) {var results = instance.findAll(function (node) {return getNodeByText(node, text);});if (results.length === 0) {throw new (require("./errors").ErrorWithStack)("No instances found with text: " + String(text), getAllByTextFn);}return results;};};exports.getAllByText = getAllByText;var getAllByPlaceholder = function getAllByPlaceholder(instance) {return function getAllByPlaceholderFn(placeholder) {var results = instance.findAll(function (node) {return getTextInputNodeByPlaceholder(node, placeholder);});if (results.length === 0) {throw new (require("./errors").ErrorWithStack)("No instances found with placeholder: " + String(placeholder), getAllByPlaceholderFn);}return results;};};exports.getAllByPlaceholder = getAllByPlaceholder;var getAllByDisplayValue = function getAllByDisplayValue(instance) {return function getAllByDisplayValueFn(value) {var results = instance.findAll(function (node) {return getTextInputNodeByDisplayValue(node, value);});if (results.length === 0) {throw new (require("./errors").ErrorWithStack)("No instances found with display value: " + String(value), getAllByDisplayValueFn);}return results;};};exports.getAllByDisplayValue = getAllByDisplayValue;var getAllByProps = function getAllByProps(instance, warnFn) {return function getAllByPropsFn(props) {warnFn && warnFn('getAllByProps');var results = instance.findAllByProps(props);if (results.length === 0) {throw new (require("./errors").ErrorWithStack)("No instances found with props:\n" + (0, _prettyFormat.default)(props), getAllByPropsFn);}return results;};};exports.getAllByProps = getAllByProps;var getAllByTestId = function getAllByTestId(instance) {return function getAllByTestIdFn(testID) {var results = instance.findAllByProps({ testID: testID }).filter(function (element) {return typeof element.type === 'string';});if (results.length === 0) {throw new (require("./errors").ErrorWithStack)("No instances found with testID: " + String(testID), getAllByTestIdFn);}return results;};};exports.getAllByTestId = getAllByTestId;var getByAPI = function getByAPI(instance) {return { getByTestId: getByTestId(instance), getByName: getByName(instance, require("./errors").printDeprecationWarning), getByType: getByType(instance, require("./errors").printUnsafeWarning), getByText: getByText(instance), getByPlaceholder: getByPlaceholder(instance), getByDisplayValue: getByDisplayValue(instance), getByProps: getByProps(instance, require("./errors").printUnsafeWarning), getAllByTestId: getAllByTestId(instance), getAllByName: getAllByName(instance, require("./errors").printDeprecationWarning), getAllByType: getAllByType(instance, require("./errors").printUnsafeWarning), getAllByText: getAllByText(instance), getAllByPlaceholder: getAllByPlaceholder(instance), getAllByDisplayValue: getAllByDisplayValue(instance), getAllByProps: getAllByProps(instance, require("./errors").printUnsafeWarning), UNSAFE_getByType: getByType(instance), UNSAFE_getAllByType: getAllByType(instance), UNSAFE_getByProps: getByProps(instance), UNSAFE_getAllByProps: getAllByProps(instance) };};exports.getByAPI = getByAPI;