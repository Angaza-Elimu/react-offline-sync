{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/test/reducer.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\nimport isEqual from 'lodash/isEqual';\nimport * as actionCreators from '../redux/actionCreators';\nimport { EnqueuedAction, NetworkState } from '../types';\nimport createReducer, {\n  initialState,\n  networkSelector,\n} from '../redux/createReducer';\nimport getSimilarActionInQueue from '../utils/getSimilarActionInQueue';\n\nconst networkReducer = createReducer();\n\nconst getState = (isConnected = false, ...actionQueue: EnqueuedAction[]) => ({\n  isConnected,\n  actionQueue,\n  isQueuePaused: false,\n});\n\n/** Actions used from now on to test different scenarios */\nconst prevActionToRetry1 = {\n  type: 'FETCH_DATA_REQUEST',\n  payload: {\n    id: '1',\n  },\n  meta: {\n    retry: true,\n  },\n};\nconst prevActionToRetry2 = {\n  type: 'FETCH_OTHER_REQUEST',\n  payload: {\n    isFetching: true,\n  },\n  meta: {\n    retry: true,\n  },\n};\nconst prevActionToRetry1WithDifferentPayload = {\n  type: 'FETCH_DATA_REQUEST',\n  payload: {\n    id: '2',\n  },\n  meta: {\n    retry: true,\n  },\n};\n\ndescribe('unknown action type', () => {\n  it('returns prevState on initialization', () => {\n    expect(networkReducer(undefined, { type: 'ACTION_I_DONT_CARE' })).toEqual(\n      initialState,\n    );\n  });\n\n  it('returns prevState if the action is not handled', () => {\n    expect(\n      networkReducer(initialState, { type: 'ANOTHER_ACTION_I_DONT_CARE' }),\n    ).toEqual(initialState);\n  });\n});\n\ndescribe('CONNECTION_CHANGE action type', () => {\n  it('changes isConnected state properly', () => {\n    const mockAction = actionCreators.connectionChange(false);\n    expect(networkReducer(initialState, mockAction)).toEqual({\n      isConnected: false,\n      actionQueue: [],\n      isQueuePaused: false,\n    });\n  });\n});\n\ndescribe('OFFLINE_ACTION action type', () => {\n  describe('meta.retry !== true', () => {\n    it('should NOT add the action to the queue', () => {\n      const prevAction = {\n        type: 'FETCH_DATA_REQUEST',\n        payload: {\n          id: '1',\n        },\n      };\n      const anotherPrevAction = {\n        type: 'FETCH_DATA_REQUEST',\n        payload: {\n          id: '1',\n        },\n        meta: {\n          retry: false,\n        },\n      };\n\n      const action = actionCreators.fetchOfflineMode(prevAction);\n      const anotherAction = actionCreators.fetchOfflineMode(anotherPrevAction);\n\n      expect(networkReducer(initialState, action)).toEqual(initialState);\n      expect(networkReducer(initialState, anotherAction)).toEqual(initialState);\n    });\n  });\n\n  describe('meta.retry === true', () => {\n    describe('actions with DIFFERENT type', () => {\n      it('actions are pushed into the queue in order of arrival', () => {\n        const preAction = actionCreators.connectionChange(false);\n        const action1 = actionCreators.fetchOfflineMode(prevActionToRetry1);\n        const prevState = networkReducer(initialState, preAction);\n\n        let nextState = networkReducer(prevState, action1);\n\n        expect(nextState).toEqual({\n          isConnected: false,\n          actionQueue: [prevActionToRetry1],\n          isQueuePaused: false,\n        });\n\n        const action2 = actionCreators.fetchOfflineMode(prevActionToRetry2);\n        nextState = networkReducer(nextState, action2);\n\n        expect(nextState).toEqual(\n          getState(false, prevActionToRetry1, prevActionToRetry2),\n        );\n      });\n    });\n\n    describe('thunks that are the same with custom comparison function', () => {\n      function comparisonFn(action: any, actionQueue: EnqueuedAction[]) {\n        if (typeof action === 'object') {\n          return actionQueue.find(queued => isEqual(queued, action));\n        }\n        if (typeof action === 'function') {\n          return actionQueue.find(\n            queued =>\n              action.meta.name === queued.meta!.name &&\n              action.meta.args.id === queued.meta!.args.id,\n          );\n        }\n        return undefined;\n      }\n\n      const thunkFactory = (id: number, name: string, age: number) => {\n        function thunk(dispatch: Dispatch) {\n          dispatch({ type: 'UPDATE_DATA_REQUEST', payload: { id, name, age } });\n        }\n        thunk.meta = {\n          args: { id, name, age },\n          retry: true,\n        };\n        return thunk;\n      };\n\n      it(`should add thunks if function is same but thunks are modifying different items`, () => {\n        const prevState = getState(false, thunkFactory(1, 'Bilbo', 55));\n        const thunk = thunkFactory(2, 'Link', 54);\n        const wrappedThunk = actionCreators.fetchOfflineMode(thunk);\n\n        expect(getSimilarActionInQueue(thunk, prevState.actionQueue)).toEqual(\n          prevState.actionQueue[0],\n        );\n\n        const nextState = createReducer(comparisonFn)(prevState, wrappedThunk);\n\n        expect(nextState.actionQueue).toHaveLength(2);\n      });\n\n      it(`should replace a thunk if thunk already exists to modify same item`, () => {\n        const prevState = getState(false, thunkFactory(1, 'Bilbo', 55));\n        const thunk = thunkFactory(1, 'Bilbo', 65);\n        const wrappedThunk = actionCreators.fetchOfflineMode(thunk);\n\n        expect(getSimilarActionInQueue(thunk, prevState.actionQueue)).toEqual(\n          prevState.actionQueue[0],\n        );\n\n        const nextState = createReducer(comparisonFn)(prevState, wrappedThunk);\n\n        expect(nextState.actionQueue).toHaveLength(1);\n      });\n    });\n\n    describe('actions with the same type', () => {\n      it(`should remove the action and add it back at the end of the queue\n   if the action has the same payload`, () => {\n        const prevState = getState(\n          false,\n          prevActionToRetry1,\n          prevActionToRetry2,\n        );\n        const action = actionCreators.fetchOfflineMode(prevActionToRetry1);\n\n        const nextState = networkReducer(prevState, action);\n        expect(nextState).toEqual(\n          getState(false, prevActionToRetry2, prevActionToRetry1),\n        );\n      });\n\n      it(`should push the action if the payload is different`, () => {\n        const prevState = getState(\n          false,\n          prevActionToRetry2,\n          prevActionToRetry1,\n        );\n        const action = actionCreators.fetchOfflineMode(\n          prevActionToRetry1WithDifferentPayload,\n        );\n\n        expect(networkReducer(prevState, action)).toEqual(\n          getState(\n            false,\n            prevActionToRetry2,\n            prevActionToRetry1,\n            prevActionToRetry1WithDifferentPayload,\n          ),\n        );\n      });\n    });\n  });\n});\n\ndescribe('REMOVE_ACTION_FROM_QUEUE action type', () => {\n  it('removes the action from the queue properly', () => {\n    const prevState = getState(\n      false,\n      prevActionToRetry2,\n      prevActionToRetry1,\n      prevActionToRetry1WithDifferentPayload,\n    );\n    // Different object references but same shape, checking that deep equal works correctly\n    const action = actionCreators.removeActionFromQueue({\n      ...prevActionToRetry2,\n    });\n\n    expect(networkReducer(prevState, action)).toEqual(\n      getState(\n        false,\n        prevActionToRetry1,\n        prevActionToRetry1WithDifferentPayload,\n      ),\n    );\n  });\n});\n\ndescribe('QUEUE_SEMAPHORE_CHANGE action type', () => {\n  it('Pauses the queue if semaphore is red', () => {\n    expect(\n      networkReducer(undefined, actionCreators.changeQueueSemaphore('RED')),\n    ).toEqual({\n      ...initialState,\n      isQueuePaused: true,\n    });\n  });\n\n  it('Resumes the queue if semaphore is green', () => {\n    expect(\n      networkReducer(undefined, actionCreators.changeQueueSemaphore('GREEN')),\n    ).toEqual({\n      ...initialState,\n      isQueuePaused: false,\n    });\n  });\n});\n\ndescribe('thunks', () => {\n  function fetchThunk(dispatch: Dispatch) {\n    dispatch({ type: 'FETCH_DATA_REQUEST' });\n  }\n\n  describe('FETCH_OFFLINE_MODE action type', () => {\n    describe('action with meta.retry !== true', () => {\n      it('should NOT add the action to the queue', () => {\n        const action = actionCreators.fetchOfflineMode(fetchThunk);\n        expect(networkReducer(initialState, action)).toEqual(initialState);\n      });\n    });\n\n    describe('action with meta.retry === true', () => {\n      it('should add the action to the queue if the thunk is different', () => {\n        const prevState = getState(false);\n\n        // Property 'meta' does not exist on type '(dispatch: Dispatch<AnyAction>) => void'\n        (fetchThunk as any).meta = {\n          retry: true,\n        };\n        const action = actionCreators.fetchOfflineMode(fetchThunk);\n\n        expect(networkReducer(prevState, action)).toEqual(\n          getState(false, fetchThunk),\n        );\n      });\n\n      it(`should remove the thunk and add it back at the end of the queue \n      if it presents the same shape`, () => {\n        const thunkFactory = (param: any) => {\n          function thunk1(dispatch: Dispatch) {\n            dispatch({ type: 'FETCH_DATA_REQUEST', payload: param });\n          }\n          return thunk1;\n        };\n        const thunk = thunkFactory('foo');\n        const prevState = getState(false, thunk);\n\n        const similarThunk = thunkFactory('bar');\n        (similarThunk as any).meta = {\n          retry: true,\n        };\n        const action = actionCreators.fetchOfflineMode(similarThunk);\n        const nextState = networkReducer(prevState, action);\n\n        expect(nextState).toEqual(getState(false, similarThunk));\n      });\n    });\n  });\n\n  describe('REMOVE_ACTION_FROM_QUEUE action type', () => {\n    it('removes the thunk from the queue properly', () => {\n      const prevState = getState(false, fetchThunk);\n      const action = actionCreators.removeActionFromQueue(fetchThunk);\n\n      expect(networkReducer(prevState, action)).toEqual(getState(false));\n    });\n  });\n});\n\ndescribe('dismiss feature', () => {\n  const actionEnqueued1 = {\n    type: 'FETCH_PAGE_REQUEST',\n    payload: {\n      id: '2',\n    },\n    meta: {\n      retry: true,\n      dismiss: ['NAVIGATE_BACK', 'NAVIGATE_TO_LOGIN'],\n    },\n  };\n  const actionEnqueued2 = {\n    type: 'FETCH_USER_REQUEST',\n    payload: {\n      id: '4',\n    },\n    meta: {\n      retry: true,\n      dismiss: ['NAVIGATE_TO_LOGIN'],\n    },\n  };\n  const actionEnqueued3 = {\n    type: 'FETCH_USER_REQUEST',\n    payload: {\n      id: '4',\n    },\n    meta: {\n      retry: true,\n    },\n  };\n\n  it('NAVIGATE_BACK dispatched, dismissing 1 action', () => {\n    const prevState = getState(\n      false,\n      actionEnqueued1,\n      actionEnqueued2,\n      actionEnqueued3,\n    );\n    const action = actionCreators.dismissActionsFromQueue('NAVIGATE_BACK');\n\n    expect(networkReducer(prevState, action)).toEqual(\n      getState(false, actionEnqueued2, actionEnqueued3),\n    );\n  });\n\n  it('NAVIGATE_TO_LOGIN dispatched, dismissing 2 actions', () => {\n    const prevState = getState(\n      false,\n      actionEnqueued1,\n      actionEnqueued2,\n      actionEnqueued3,\n    );\n    const action = actionCreators.dismissActionsFromQueue('NAVIGATE_TO_LOGIN');\n\n    expect(networkReducer(prevState, action)).toEqual(\n      getState(false, actionEnqueued3),\n    );\n  });\n\n  it(\"Any other action dispatched, no changes (although the middleware won't allow that)\", () => {\n    const prevState = getState(\n      false,\n      actionEnqueued1,\n      actionEnqueued2,\n      actionEnqueued3,\n    );\n    const action = actionCreators.dismissActionsFromQueue('NAVIGATE_AWAY');\n\n    expect(networkReducer(prevState, action)).toEqual(\n      getState(false, actionEnqueued1, actionEnqueued2, actionEnqueued3),\n    );\n  });\n});\n\ndescribe('networkSelector', () => {\n  it('returns the correct shape', () => {\n    const state: { network: NetworkState } = {\n      network: {\n        isConnected: true,\n        actionQueue: [{ type: 'foo', payload: {} }],\n        isQueuePaused: false,\n      },\n    };\n    expect(networkSelector(state)).toEqual({\n      isConnected: true,\n      actionQueue: [{ type: 'foo', payload: {} }],\n      isQueuePaused: false,\n    });\n  });\n});\n"]}