167200799c9816b1d869b0d4340ac63f
jest.mock('redux-saga');

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _utils = require("ts-jest/utils");

var _reduxSaga = require("redux-saga");

var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));

var _sagas = require("../redux/sagas");

var netInfoUnsubscribe = jest.fn();
describe('createNetInfoConnectionChangeChannel', function () {
  it('returns a redux-saga channel', function () {
    var eventChannelMock = jest.fn().mockReturnValue('channel');
    (0, _utils.mocked)(_reduxSaga.eventChannel).mockImplementation(eventChannelMock);
    var mockNetInfoChannelFn = jest.fn().mockReturnValue('handlerFn');
    expect((0, _sagas.createNetInfoConnectionChangeChannel)(mockNetInfoChannelFn)).toBe('channel');
    expect(eventChannelMock).toHaveBeenCalledWith(mockNetInfoChannelFn);
  });
  it('netInfoEventChannelFn adheres to eventChannel cb interface', function () {
    var emitMock = jest.fn();

    _netinfo.default.addEventListener.mockReturnValueOnce(netInfoUnsubscribe);

    var unsubscribe = (0, _sagas.netInfoEventChannelFn)(emitMock);
    expect(_netinfo.default.addEventListener).toHaveBeenCalledWith(emitMock);
    unsubscribe();
    expect(netInfoUnsubscribe).toHaveBeenCalledTimes(1);
  });
});
describe('createIntervalChannel', function () {
  var interval = 50;
  it('returns a redux-saga channel', function () {
    var eventChannelMock = jest.fn().mockReturnValue('channel');
    (0, _utils.mocked)(_reduxSaga.eventChannel).mockImplementation(eventChannelMock);
    var mockIntervalChannelFn = jest.fn().mockReturnValue('handlerFn');
    expect((0, _sagas.createIntervalChannel)(interval, mockIntervalChannelFn)).toBe('channel');
    expect(mockIntervalChannelFn).toHaveBeenCalledWith(interval);
    expect(_reduxSaga.eventChannel).toHaveBeenCalledWith('handlerFn');
  });
  it('intervalChannelFn adheres to eventChannel cb interface', function (done) {
    global.clearInterval = jest.fn();
    var emitMock = jest.fn();
    var unsubscribe = (0, _sagas.intervalChannelFn)(interval)(emitMock);
    setTimeout(function () {
      expect(emitMock).toHaveBeenCalledWith(true);
      done();
    }, interval + 20);
    unsubscribe();
    expect(global.clearInterval).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3Qvc2FnYUNoYW5uZWxzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxZQUFWOzs7O0FBVkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBUUEsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsRUFBTCxFQUEzQjtBQUVBLFFBQVEsQ0FBQyxzQ0FBRCxFQUF5QyxZQUFBO0FBQy9DLEVBQUEsRUFBRSxDQUFDLDhCQUFELEVBQWlDLFlBQUE7QUFDakMsUUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsRUFBTCxHQUFVLGVBQVYsQ0FBMEIsU0FBMUIsQ0FBekI7QUFDQSx1QkFBTyx1QkFBUCxFQUFxQixrQkFBckIsQ0FBd0MsZ0JBQXhDO0FBQ0EsUUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsRUFBTCxHQUFVLGVBQVYsQ0FBMEIsV0FBMUIsQ0FBN0I7QUFDQSxJQUFBLE1BQU0sQ0FBQyxpREFBcUMsb0JBQXJDLENBQUQsQ0FBTixDQUFtRSxJQUFuRSxDQUNFLFNBREY7QUFHQSxJQUFBLE1BQU0sQ0FBQyxnQkFBRCxDQUFOLENBQXlCLG9CQUF6QixDQUE4QyxvQkFBOUM7QUFDRCxHQVJDLENBQUY7QUFVQSxFQUFBLEVBQUUsQ0FBQyw0REFBRCxFQUErRCxZQUFBO0FBQy9ELFFBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFMLEVBQWpCOztBQUNDLHFCQUFRLGdCQUFSLENBQXVDLG1CQUF2QyxDQUNDLGtCQUREOztBQUdELFFBQU0sV0FBVyxHQUFHLGtDQUFzQixRQUF0QixDQUFwQjtBQUVBLElBQUEsTUFBTSxDQUFDLGlCQUFRLGdCQUFULENBQU4sQ0FBaUMsb0JBQWpDLENBQXNELFFBQXREO0FBQ0EsSUFBQSxXQUFXO0FBQ1gsSUFBQSxNQUFNLENBQUMsa0JBQUQsQ0FBTixDQUEyQixxQkFBM0IsQ0FBaUQsQ0FBakQ7QUFDRCxHQVZDLENBQUY7QUFXRCxDQXRCTyxDQUFSO0FBd0JBLFFBQVEsQ0FBQyx1QkFBRCxFQUEwQixZQUFBO0FBQ2hDLE1BQU0sUUFBUSxHQUFHLEVBQWpCO0FBQ0EsRUFBQSxFQUFFLENBQUMsOEJBQUQsRUFBaUMsWUFBQTtBQUNqQyxRQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxFQUFMLEdBQVUsZUFBVixDQUEwQixTQUExQixDQUF6QjtBQUNBLHVCQUFPLHVCQUFQLEVBQXFCLGtCQUFyQixDQUF3QyxnQkFBeEM7QUFDQSxRQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxFQUFMLEdBQVUsZUFBVixDQUEwQixXQUExQixDQUE5QjtBQUNBLElBQUEsTUFBTSxDQUFDLGtDQUFzQixRQUF0QixFQUFnQyxxQkFBaEMsQ0FBRCxDQUFOLENBQStELElBQS9ELENBQ0UsU0FERjtBQUdBLElBQUEsTUFBTSxDQUFDLHFCQUFELENBQU4sQ0FBOEIsb0JBQTlCLENBQW1ELFFBQW5EO0FBQ0EsSUFBQSxNQUFNLENBQUMsdUJBQUQsQ0FBTixDQUFxQixvQkFBckIsQ0FBMEMsV0FBMUM7QUFDRCxHQVRDLENBQUY7QUFXQSxFQUFBLEVBQUUsQ0FBQyx3REFBRCxFQUEyRCxVQUFBLElBQUEsRUFBSTtBQUMvRCxJQUFBLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLElBQUksQ0FBQyxFQUFMLEVBQXZCO0FBQ0EsUUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUwsRUFBakI7QUFDQSxRQUFNLFdBQVcsR0FBRyw4QkFBa0IsUUFBbEIsRUFBNEIsUUFBNUIsQ0FBcEI7QUFDQSxJQUFBLFVBQVUsQ0FBQyxZQUFBO0FBQ1QsTUFBQSxNQUFNLENBQUMsUUFBRCxDQUFOLENBQWlCLG9CQUFqQixDQUFzQyxJQUF0QztBQUNBLE1BQUEsSUFBSTtBQUNMLEtBSFMsRUFHUCxRQUFRLEdBQUcsRUFISixDQUFWO0FBSUEsSUFBQSxXQUFXO0FBQ1gsSUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQVIsQ0FBTixDQUE2QixnQkFBN0I7QUFDRCxHQVZDLENBQUY7QUFXRCxDQXhCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW9ja2VkIH0gZnJvbSAndHMtamVzdC91dGlscyc7XG5pbXBvcnQgeyBldmVudENoYW5uZWwgfSBmcm9tICdyZWR1eC1zYWdhJztcbmltcG9ydCBOZXRJbmZvIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L25ldGluZm8nO1xuaW1wb3J0IHtcbiAgY3JlYXRlTmV0SW5mb0Nvbm5lY3Rpb25DaGFuZ2VDaGFubmVsLFxuICBuZXRJbmZvRXZlbnRDaGFubmVsRm4sXG4gIGNyZWF0ZUludGVydmFsQ2hhbm5lbCxcbiAgaW50ZXJ2YWxDaGFubmVsRm4sXG59IGZyb20gJy4uL3NyYy9yZWR1eC9zYWdhcyc7XG5cbmplc3QubW9jaygncmVkdXgtc2FnYScpO1xuY29uc3QgbmV0SW5mb1Vuc3Vic2NyaWJlID0gamVzdC5mbigpO1xuXG5kZXNjcmliZSgnY3JlYXRlTmV0SW5mb0Nvbm5lY3Rpb25DaGFuZ2VDaGFubmVsJywgKCkgPT4ge1xuICBpdCgncmV0dXJucyBhIHJlZHV4LXNhZ2EgY2hhbm5lbCcsICgpID0+IHtcbiAgICBjb25zdCBldmVudENoYW5uZWxNb2NrID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnY2hhbm5lbCcpO1xuICAgIG1vY2tlZChldmVudENoYW5uZWwpLm1vY2tJbXBsZW1lbnRhdGlvbihldmVudENoYW5uZWxNb2NrKTtcbiAgICBjb25zdCBtb2NrTmV0SW5mb0NoYW5uZWxGbiA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoJ2hhbmRsZXJGbicpO1xuICAgIGV4cGVjdChjcmVhdGVOZXRJbmZvQ29ubmVjdGlvbkNoYW5nZUNoYW5uZWwobW9ja05ldEluZm9DaGFubmVsRm4pKS50b0JlKFxuICAgICAgJ2NoYW5uZWwnLFxuICAgICk7XG4gICAgZXhwZWN0KGV2ZW50Q2hhbm5lbE1vY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tOZXRJbmZvQ2hhbm5lbEZuKTtcbiAgfSk7XG5cbiAgaXQoJ25ldEluZm9FdmVudENoYW5uZWxGbiBhZGhlcmVzIHRvIGV2ZW50Q2hhbm5lbCBjYiBpbnRlcmZhY2UnLCAoKSA9PiB7XG4gICAgY29uc3QgZW1pdE1vY2sgPSBqZXN0LmZuKCk7XG4gICAgKE5ldEluZm8uYWRkRXZlbnRMaXN0ZW5lciBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZU9uY2UoXG4gICAgICBuZXRJbmZvVW5zdWJzY3JpYmUsXG4gICAgKTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IG5ldEluZm9FdmVudENoYW5uZWxGbihlbWl0TW9jayk7XG5cbiAgICBleHBlY3QoTmV0SW5mby5hZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChlbWl0TW9jayk7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgICBleHBlY3QobmV0SW5mb1Vuc3Vic2NyaWJlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdjcmVhdGVJbnRlcnZhbENoYW5uZWwnLCAoKSA9PiB7XG4gIGNvbnN0IGludGVydmFsID0gNTA7XG4gIGl0KCdyZXR1cm5zIGEgcmVkdXgtc2FnYSBjaGFubmVsJywgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50Q2hhbm5lbE1vY2sgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCdjaGFubmVsJyk7XG4gICAgbW9ja2VkKGV2ZW50Q2hhbm5lbCkubW9ja0ltcGxlbWVudGF0aW9uKGV2ZW50Q2hhbm5lbE1vY2spO1xuICAgIGNvbnN0IG1vY2tJbnRlcnZhbENoYW5uZWxGbiA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoJ2hhbmRsZXJGbicpO1xuICAgIGV4cGVjdChjcmVhdGVJbnRlcnZhbENoYW5uZWwoaW50ZXJ2YWwsIG1vY2tJbnRlcnZhbENoYW5uZWxGbikpLnRvQmUoXG4gICAgICAnY2hhbm5lbCcsXG4gICAgKTtcbiAgICBleHBlY3QobW9ja0ludGVydmFsQ2hhbm5lbEZuKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChpbnRlcnZhbCk7XG4gICAgZXhwZWN0KGV2ZW50Q2hhbm5lbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2hhbmRsZXJGbicpO1xuICB9KTtcblxuICBpdCgnaW50ZXJ2YWxDaGFubmVsRm4gYWRoZXJlcyB0byBldmVudENoYW5uZWwgY2IgaW50ZXJmYWNlJywgZG9uZSA9PiB7XG4gICAgZ2xvYmFsLmNsZWFySW50ZXJ2YWwgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgZW1pdE1vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSBpbnRlcnZhbENoYW5uZWxGbihpbnRlcnZhbCkoZW1pdE1vY2spO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZXhwZWN0KGVtaXRNb2NrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0cnVlKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9LCBpbnRlcnZhbCArIDIwKTtcbiAgICB1bnN1YnNjcmliZSgpO1xuICAgIGV4cGVjdChnbG9iYWwuY2xlYXJJbnRlcnZhbCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl19