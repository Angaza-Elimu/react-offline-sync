eb7698ccc881b10dfca97822bdd5f9da
jest.mock('../utils/checkConnectivityInterval');
jest.mock('../utils/checkInternetAccess', function () {
  return jest.fn().mockResolvedValue(true);
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));

var _reactNative = require("react-native");

var _enzyme = require("enzyme");

var _reactNativeTestingLibrary = require("react-native-testing-library");

var _NetworkConnectivity = _interopRequireDefault(require("../components/NetworkConnectivity"));

var _checkConnectivityInterval = require("../utils/checkConnectivityInterval");

var _checkInternetAccess = _interopRequireDefault(require("../utils/checkInternetAccess"));

var _objectEntries = _interopRequireDefault(require("../utils/objectEntries"));

var _constants = require("../utils/constants");

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var mockConnectionChangeHandler = jest.fn();
var mockGetConnectionChangeHandler = jest.fn(function () {
  return mockConnectionChangeHandler;
});
var mockIntervalHandler = jest.fn();
var mockHandleNetInfoChange = jest.fn();
var mockHandleConnectivityChange = jest.fn();
var mockCheckInternet = jest.fn();
var addEventListener = _netinfo.default.addEventListener;
var unsubscribe = jest.fn();
var fetch = _netinfo.default.fetch;

function mockPrototypeMethods(methodsMap) {
  if (methodsMap === void 0) {
    methodsMap = {};
  }

  var ClassWithMocks = function (_super) {
    __extends(ClassWithMocks, _super);

    function ClassWithMocks() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    return ClassWithMocks;
  }(_NetworkConnectivity.default);

  (0, _objectEntries.default)(methodsMap).forEach(function (_a) {
    var method = _a[0],
        mockFn = _a[1];
    return ClassWithMocks.prototype[method] = mockFn;
  });
  return ClassWithMocks;
}

var ChildrenComponent = function ChildrenComponent() {
  return React.createElement(_reactNative.View, null);
};

var initialProps = {
  children: ChildrenComponent
};

var getElement = function getElement(_a) {
  var _b = _a === void 0 ? {} : _a,
      _c = _b.props,
      props = _c === void 0 ? initialProps : _c,
      _d = _b.Component,
      Component = _d === void 0 ? _NetworkConnectivity.default : _d;

  var children = props.children,
      rest = __rest(props, ["children"]);

  return React.createElement(Component, __assign({}, rest), children);
};

describe('NetworkConnectivity', function () {
  afterEach(function () {
    addEventListener.mockClear();
    fetch.mockClear();
    mockConnectionChangeHandler.mockClear();
    mockGetConnectionChangeHandler.mockClear();
    mockIntervalHandler.mockClear();
    mockHandleNetInfoChange.mockClear();
    mockHandleConnectivityChange.mockClear();
    mockCheckInternet.mockClear();
  });
  it('defaultProps', function () {
    expect(_NetworkConnectivity.default.defaultProps).toMatchSnapshot();
  });
  it('passes the connection state into the FACC', function () {
    var children = jest.fn();
    (0, _enzyme.shallow)(getElement({
      props: {
        children: children
      }
    }));
    expect(children).toHaveBeenCalledWith({
      isConnected: true
    });
  });
  describe('componentDidMount', function () {
    describe('iOS, pingInterval = 0', function () {
      it("sets up a NetInfo.isConnected listener for connectionChange \n      AND does NOT call setupConnectivityCheckInterval", function () {
        _reactNative.Platform.OS = 'ios';
        var MockedNetworkConnectivity = mockPrototypeMethods({
          getConnectionChangeHandler: mockGetConnectionChangeHandler
        });
        (0, _enzyme.shallow)(getElement({
          Component: MockedNetworkConnectivity
        }));
        expect(_netinfo.default.addEventListener).toHaveBeenCalledTimes(1);
        expect(_netinfo.default.addEventListener).toHaveBeenCalledWith(mockConnectionChangeHandler);
        expect(_checkConnectivityInterval.setup).not.toHaveBeenCalled();
      });
    });
    describe('Android, pingInterval = 0', function () {
      it("sets up a NetInfo.isConnected listener for connectionChange\n      AND fetches initial connection\n      AND calls the handler\n      AND does NOT call setupConnectivityCheckInterval", function (done) {
        fetch.mockImplementationOnce(function () {
          return Promise.resolve(false);
        });
        _reactNative.Platform.OS = 'android';
        var MockedNetworkConnectivity = mockPrototypeMethods({
          getConnectionChangeHandler: mockGetConnectionChangeHandler
        });
        (0, _enzyme.shallow)(getElement({
          Component: MockedNetworkConnectivity
        }));
        expect(_netinfo.default.addEventListener).toHaveBeenCalledTimes(1);
        expect(_netinfo.default.addEventListener).toHaveBeenCalledWith(mockConnectionChangeHandler);
        expect(_netinfo.default.fetch).toHaveBeenCalledTimes(1);
        process.nextTick(function () {
          expect(mockConnectionChangeHandler).toHaveBeenCalledWith(false);
          expect(_checkConnectivityInterval.setup).not.toHaveBeenCalled();
          done();
        });
      });
    });
    it("calls setupConnectivityCheckInterval with the right arguments\n     WHEN pingInterval is higher than 0", function () {
      _reactNative.Platform.OS = 'ios';
      var MockedNetworkConnectivity = mockPrototypeMethods({
        intervalHandler: mockIntervalHandler
      });
      (0, _enzyme.shallow)(getElement({
        Component: MockedNetworkConnectivity,
        props: {
          children: ChildrenComponent,
          pingInterval: 1000
        }
      }));
      expect(_checkConnectivityInterval.setup).toHaveBeenCalled();
    });
  });
  describe('componentWillUnmount', function () {
    it("removes the NetInfo listener with the right parameters\n      AND call connectivityInterval.clear", function () {
      _netinfo.default.addEventListener.mockReturnValueOnce(unsubscribe);

      var MockedNetworkConnectivity = mockPrototypeMethods({
        getConnectionChangeHandler: mockGetConnectionChangeHandler
      });
      var wrapper = (0, _enzyme.shallow)(getElement({
        Component: MockedNetworkConnectivity
      }));
      wrapper.unmount();
      expect(unsubscribe).toHaveBeenCalledTimes(1);
      expect(_checkConnectivityInterval.clear).toHaveBeenCalled();
    });
  });
  describe('getConnectionChangeHandler', function () {
    it('returns this.handleNetInfoChange when props.shouldPing = true', function () {
      var wrapper = (0, _enzyme.shallow)(getElement({
        props: {
          children: ChildrenComponent,
          shouldPing: true
        }
      }));
      wrapper.instance().handleNetInfoChange = mockHandleNetInfoChange;
      expect(wrapper.instance().getConnectionChangeHandler()).toBe(mockHandleNetInfoChange);
    });
    it('returns this.handleConnectivityChange when props.shouldPing = false', function () {
      var wrapper = (0, _enzyme.shallow)(getElement({
        props: {
          children: ChildrenComponent,
          shouldPing: false
        }
      }));
      wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;
      expect(wrapper.instance().getConnectionChangeHandler()).toBe(mockHandleConnectivityChange);
    });
  });
  describe('handleNetInfoChange', function () {
    it('calls handleConnectivityChange if isConnected is false', function () {
      var wrapper = (0, _enzyme.shallow)(getElement());
      wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;
      wrapper.instance().checkInternet = mockCheckInternet;
      wrapper.instance().handleNetInfoChange({
        type: 'none',
        isConnected: false,
        isInternetReachable: false,
        details: null
      });
      expect(mockHandleConnectivityChange).toHaveBeenCalledWith({
        type: 'none',
        isConnected: false,
        isInternetReachable: false,
        details: null
      });
      expect(mockCheckInternet).not.toHaveBeenCalled();
    });
    it('calls checkInternet if isConnected is true', function () {
      var wrapper = (0, _enzyme.shallow)(getElement());
      wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;
      wrapper.instance().checkInternet = mockCheckInternet;
      wrapper.instance().handleNetInfoChange({
        type: 'other',
        isConnected: true,
        isInternetReachable: true,
        details: {
          cellularGeneration: null,
          isConnectionExpensive: false
        }
      });
      expect(mockHandleConnectivityChange).not.toHaveBeenCalled();
      expect(mockCheckInternet).toHaveBeenCalled();
    });
  });
  describe('checkInternet', function () {
    it('returns early if pingIfBackground = false AND app is not in the foreground', function () {
      return __awaiter(void 0, void 0, void 0, function () {
        var wrapper;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              _reactNative.AppState.currentState = 'background';
              wrapper = (0, _enzyme.shallow)(getElement({
                props: {
                  children: ChildrenComponent,
                  pingInBackground: false
                }
              }));
              wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;
              return [4, wrapper.instance().checkInternet()];

            case 1:
              _a.sent();

              expect(_checkInternetAccess.default).not.toHaveBeenCalled();
              expect(mockHandleConnectivityChange).not.toHaveBeenCalled();
              return [2];
          }
        });
      });
    });
    it("calls checkInternetAccess AND handleConnectivityChange \n    with the right arguments if app is in foreground", function () {
      return __awaiter(void 0, void 0, void 0, function () {
        var props, wrapper;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              props = {
                pingTimeout: 2000,
                pingServerUrl: 'dummy.com',
                httpMethod: 'OPTIONS',
                children: ChildrenComponent,
                customHeaders: _constants.DEFAULT_CUSTOM_HEADERS
              };
              _reactNative.AppState.currentState = 'active';
              wrapper = (0, _enzyme.shallow)(getElement({
                props: props
              }));
              wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;
              return [4, wrapper.instance().checkInternet()];

            case 1:
              _a.sent();

              expect(_checkInternetAccess.default).toHaveBeenCalledWith({
                url: props.pingServerUrl,
                timeout: props.pingTimeout,
                method: props.httpMethod,
                customHeaders: props.customHeaders
              });
              expect(mockHandleConnectivityChange).toHaveBeenCalledWith({
                isConnected: true
              });
              return [2];
          }
        });
      });
    });
  });
  describe('intervalHandler', function () {
    it('returns early if there is connection AND pingOnlyIfOffline = true', function () {
      var wrapper = (0, _enzyme.shallow)(getElement({
        props: {
          children: ChildrenComponent,
          pingOnlyIfOffline: true
        }
      }));
      wrapper.instance().checkInternet = mockCheckInternet;
      wrapper.setState({
        isConnected: true
      });
      wrapper.instance().intervalHandler();
      expect(mockCheckInternet).not.toHaveBeenCalled();
    });
    it("calls checkInternet if it's not connected OR pingOnlyIfOffline = false", function () {
      var wrapper = (0, _enzyme.shallow)(getElement({
        props: {
          children: ChildrenComponent,
          pingOnlyIfOffline: false
        }
      }));
      wrapper.instance().checkInternet = mockCheckInternet;
      wrapper.setState({
        isConnected: false
      });
      wrapper.instance().intervalHandler();
      expect(mockCheckInternet).toHaveBeenCalledTimes(1);
      wrapper.setState({
        isConnected: true
      });
      wrapper.instance().intervalHandler();
      expect(mockCheckInternet).toHaveBeenCalledTimes(2);
    });
  });
  describe('handleConnectivityChange', function () {
    it('calls setState with the new connection value', function () {
      var mockSetState = jest.fn();
      var MockedNetworkConnectivity = mockPrototypeMethods({
        setState: mockSetState
      });
      var wrapper = (0, _enzyme.shallow)(getElement({
        Component: MockedNetworkConnectivity
      }));
      wrapper.instance().handleConnectivityChange({
        type: 'other',
        isConnected: true,
        isInternetReachable: true,
        details: {
          cellularGeneration: null,
          isConnectionExpensive: false
        }
      });
      expect(mockSetState).toHaveBeenCalledWith({
        isConnected: true
      });
      wrapper.instance().handleConnectivityChange({
        type: 'none',
        isConnected: false,
        isInternetReachable: false,
        details: null
      });
      expect(mockSetState).toHaveBeenCalledWith({
        isConnected: false
      });
    });
  });
  describe('pingUrlChange', function () {
    it('calls checkInternet if pingServerUrl changes', function () {
      var wrapper = (0, _enzyme.shallow)(getElement());
      wrapper.instance().checkInternet = mockCheckInternet;
      expect(mockCheckInternet).not.toHaveBeenCalled();
      wrapper.setProps({
        pingServerUrl: 'https://newServerToPing.com'
      });
      expect(mockCheckInternet).toHaveBeenCalled();
    });
  });
  describe('props validation', function () {
    it('throws if prop pingTimeout is not a number', function () {
      expect(function () {
        return (0, _reactNativeTestingLibrary.render)(getElement({
          props: {
            pingTimeout: '4000',
            children: ChildrenComponent
          }
        }));
      }).toThrow('you should pass a number as pingTimeout parameter');
    });
    it('throws if prop pingServerUrl is not a string', function () {
      expect(function () {
        return (0, _reactNativeTestingLibrary.render)(getElement({
          props: {
            pingServerUrl: 90,
            children: ChildrenComponent
          }
        }));
      }).toThrow('you should pass a string as pingServerUrl parameter');
    });
    it('throws if prop shouldPing is not a boolean', function () {
      expect(function () {
        return (0, _reactNativeTestingLibrary.render)(getElement({
          props: {
            shouldPing: function shouldPing() {
              return null;
            },
            children: ChildrenComponent
          }
        }));
      }).toThrow('you should pass a boolean as shouldPing parameter');
    });
    it('throws if prop pingInterval is not a number', function () {
      expect(function () {
        return (0, _reactNativeTestingLibrary.render)(getElement({
          props: {
            pingInterval: false,
            children: ChildrenComponent
          }
        }));
      }).toThrow('you should pass a number as pingInterval parameter');
    });
    it('throws if prop pingOnlyIfOffline is not a boolean', function () {
      expect(function () {
        return (0, _reactNativeTestingLibrary.render)(getElement({
          props: {
            pingOnlyIfOffline: 10,
            children: ChildrenComponent
          }
        }));
      }).toThrow('you should pass a boolean as pingOnlyIfOffline parameter');
    });
    it('throws if prop pingInBackground is not a boolean', function () {
      expect(function () {
        return (0, _reactNativeTestingLibrary.render)(getElement({
          props: {
            pingInBackground: '4000',
            children: ChildrenComponent
          }
        }));
      }).toThrow('you should pass a string as pingServerUrl parameter');
    });
    it('throws if prop httpMethod is not either HEAD or OPTIONS', function () {
      expect(function () {
        return (0, _reactNativeTestingLibrary.render)(getElement({
          props: {
            httpMethod: 'POST',
            children: ChildrenComponent
          }
        }));
      }).toThrow('httpMethod parameter should be either HEAD or OPTIONS');
    });
    it('throws if prop onConnectivityChange is not a function', function () {
      expect(function () {
        return (0, _reactNativeTestingLibrary.render)(getElement({
          props: {
            onConnectivityChange: 'foo',
            children: ChildrenComponent
          }
        }));
      }).toThrow('you should pass a function as onConnectivityChange parameter');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,