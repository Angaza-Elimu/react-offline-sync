{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/test/NetworkConnectivity.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport NetInfo, { NetInfoStateType } from '@react-native-community/netinfo';\nimport { AppState, Platform, View } from 'react-native';\nimport { shallow } from 'enzyme';\nimport { render } from 'react-native-testing-library';\nimport NetworkConnectivity, {\n  RequiredProps,\n} from '../components/NetworkConnectivity';\nimport { clear, setup } from '../utils/checkConnectivityInterval';\nimport checkInternetAccess from '../utils/checkInternetAccess';\nimport entries from '../utils/objectEntries';\nimport { DEFAULT_CUSTOM_HEADERS } from '../utils/constants';\n\ntype OptionalProps = Omit<RequiredProps, 'children'>;\ntype GetElementParams<P = any> = {\n  props?: Pick<RequiredProps, 'children'> & Partial<OptionalProps>;\n  Component?: React.ComponentType<P>;\n};\n\ninterface MethodsMap {\n  getConnectionChangeHandler?: any;\n  intervalHandler?: any;\n  setState?: any;\n}\nconst mockConnectionChangeHandler = jest.fn();\nconst mockGetConnectionChangeHandler = jest.fn(\n  () => mockConnectionChangeHandler,\n);\nconst mockIntervalHandler = jest.fn();\nconst mockHandleNetInfoChange = jest.fn();\nconst mockHandleConnectivityChange = jest.fn();\nconst mockCheckInternet = jest.fn();\n\nconst addEventListener = NetInfo.addEventListener as jest.Mock;\nconst unsubscribe = jest.fn();\nconst fetch = NetInfo.fetch as jest.Mock;\njest.mock('../utils/checkConnectivityInterval');\njest.mock('../utils/checkInternetAccess', () =>\n  jest.fn().mockResolvedValue(true),\n);\n\n/**\n * Helper function that creates a class that extends NetworkConnectivity\n * and mocks the specific methods on the prototype,\n * in order to not affect the rest of the tests\n * @param methodsMap\n * @returns {ClassWithMocks}\n */\n\nfunction mockPrototypeMethods(methodsMap: MethodsMap = {} as MethodsMap) {\n  class ClassWithMocks extends NetworkConnectivity {}\n  entries(methodsMap).forEach(\n    ([method, mockFn]) => (ClassWithMocks.prototype[method] = mockFn),\n  );\n  return ClassWithMocks;\n}\n\nconst ChildrenComponent = () => <View />;\n\nconst initialProps = {\n  children: ChildrenComponent,\n};\n\nconst getElement = ({\n  props = initialProps,\n  Component = NetworkConnectivity,\n}: GetElementParams = {}) => {\n  const { children, ...rest } = props;\n  return <Component {...rest}>{children}</Component>;\n};\n\ndescribe('NetworkConnectivity', () => {\n  afterEach(() => {\n    addEventListener.mockClear();\n    fetch.mockClear();\n    mockConnectionChangeHandler.mockClear();\n    mockGetConnectionChangeHandler.mockClear();\n    mockIntervalHandler.mockClear();\n    mockHandleNetInfoChange.mockClear();\n    mockHandleConnectivityChange.mockClear();\n    mockCheckInternet.mockClear();\n  });\n\n  it('defaultProps', () => {\n    expect(NetworkConnectivity.defaultProps).toMatchSnapshot();\n  });\n\n  it('passes the connection state into the FACC', () => {\n    const children = jest.fn();\n    shallow(getElement({ props: { children } }));\n    expect(children).toHaveBeenCalledWith({ isConnected: true });\n  });\n\n  describe('componentDidMount', () => {\n    describe('iOS, pingInterval = 0', () => {\n      it(`sets up a NetInfo.isConnected listener for connectionChange \n      AND does NOT call setupConnectivityCheckInterval`, () => {\n        Platform.OS = 'ios';\n        const MockedNetworkConnectivity = mockPrototypeMethods({\n          getConnectionChangeHandler: mockGetConnectionChangeHandler,\n        });\n        shallow(\n          getElement({\n            Component: MockedNetworkConnectivity,\n          }),\n        );\n        expect(NetInfo.addEventListener).toHaveBeenCalledTimes(1);\n        expect(NetInfo.addEventListener).toHaveBeenCalledWith(\n          mockConnectionChangeHandler,\n        );\n        expect(setup).not.toHaveBeenCalled();\n      });\n    });\n\n    describe('Android, pingInterval = 0', () => {\n      it(`sets up a NetInfo.isConnected listener for connectionChange\n      AND fetches initial connection\n      AND calls the handler\n      AND does NOT call setupConnectivityCheckInterval`, (done: Function) => {\n        fetch.mockImplementationOnce(() => Promise.resolve(false));\n        Platform.OS = 'android';\n        const MockedNetworkConnectivity = mockPrototypeMethods({\n          getConnectionChangeHandler: mockGetConnectionChangeHandler,\n        });\n        shallow(\n          getElement({\n            Component: MockedNetworkConnectivity,\n          }),\n        );\n        expect(NetInfo.addEventListener).toHaveBeenCalledTimes(1);\n        expect(NetInfo.addEventListener).toHaveBeenCalledWith(\n          mockConnectionChangeHandler,\n        );\n        expect(NetInfo.fetch).toHaveBeenCalledTimes(1);\n        process.nextTick(() => {\n          expect(mockConnectionChangeHandler).toHaveBeenCalledWith(false);\n          expect(setup).not.toHaveBeenCalled();\n          done();\n        });\n      });\n    });\n\n    it(`calls setupConnectivityCheckInterval with the right arguments\n     WHEN pingInterval is higher than 0`, () => {\n      Platform.OS = 'ios';\n      const MockedNetworkConnectivity = mockPrototypeMethods({\n        intervalHandler: mockIntervalHandler,\n      });\n      shallow(\n        getElement({\n          Component: MockedNetworkConnectivity,\n          props: {\n            children: ChildrenComponent,\n            pingInterval: 1000,\n          },\n        }),\n      );\n      expect(setup).toHaveBeenCalled();\n    });\n  });\n\n  describe('componentWillUnmount', () => {\n    it(`removes the NetInfo listener with the right parameters\n      AND call connectivityInterval.clear`, () => {\n      (NetInfo.addEventListener as jest.Mock).mockReturnValueOnce(unsubscribe);\n      const MockedNetworkConnectivity = mockPrototypeMethods({\n        getConnectionChangeHandler: mockGetConnectionChangeHandler,\n      });\n      const wrapper = shallow(\n        getElement({\n          Component: MockedNetworkConnectivity,\n        }),\n      );\n      wrapper.unmount();\n      expect(unsubscribe).toHaveBeenCalledTimes(1);\n      expect(clear).toHaveBeenCalled();\n    });\n  });\n\n  describe('getConnectionChangeHandler', () => {\n    it('returns this.handleNetInfoChange when props.shouldPing = true', () => {\n      const wrapper = shallow<NetworkConnectivity>(\n        getElement({\n          props: {\n            children: ChildrenComponent,\n            shouldPing: true,\n          },\n        }),\n      );\n      wrapper.instance().handleNetInfoChange = mockHandleNetInfoChange;\n      expect(wrapper.instance().getConnectionChangeHandler()).toBe(\n        mockHandleNetInfoChange,\n      );\n    });\n\n    it('returns this.handleConnectivityChange when props.shouldPing = false', () => {\n      const wrapper = shallow<NetworkConnectivity>(\n        getElement({\n          props: {\n            children: ChildrenComponent,\n            shouldPing: false,\n          },\n        }),\n      );\n      wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;\n      expect(wrapper.instance().getConnectionChangeHandler()).toBe(\n        mockHandleConnectivityChange,\n      );\n    });\n  });\n\n  describe('handleNetInfoChange', () => {\n    it('calls handleConnectivityChange if isConnected is false', () => {\n      const wrapper = shallow<NetworkConnectivity>(getElement());\n      wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;\n      wrapper.instance().checkInternet = mockCheckInternet;\n      wrapper.instance().handleNetInfoChange({\n        type: 'none' as NetInfoStateType.none,\n        isConnected: false,\n        isInternetReachable: false,\n        details: null,\n      });\n      expect(mockHandleConnectivityChange).toHaveBeenCalledWith({\n        type: 'none' as NetInfoStateType.none,\n        isConnected: false,\n        isInternetReachable: false,\n        details: null,\n      });\n      expect(mockCheckInternet).not.toHaveBeenCalled();\n    });\n\n    it('calls checkInternet if isConnected is true', () => {\n      const wrapper = shallow<NetworkConnectivity>(getElement());\n      wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;\n      wrapper.instance().checkInternet = mockCheckInternet;\n      wrapper.instance().handleNetInfoChange({\n        type: 'other' as NetInfoStateType.other,\n        isConnected: true,\n        isInternetReachable: true,\n        details: {\n          cellularGeneration: null,\n          isConnectionExpensive: false,\n        },\n      });\n      expect(mockHandleConnectivityChange).not.toHaveBeenCalled();\n      expect(mockCheckInternet).toHaveBeenCalled();\n    });\n  });\n\n  describe('checkInternet', () => {\n    it('returns early if pingIfBackground = false AND app is not in the foreground', async () => {\n      AppState.currentState = 'background';\n      const wrapper = shallow<NetworkConnectivity>(\n        getElement({\n          props: {\n            children: ChildrenComponent,\n            pingInBackground: false,\n          },\n        }),\n      );\n      wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;\n      await wrapper.instance().checkInternet();\n      expect(checkInternetAccess).not.toHaveBeenCalled();\n      expect(mockHandleConnectivityChange).not.toHaveBeenCalled();\n    });\n\n    it(`calls checkInternetAccess AND handleConnectivityChange \n    with the right arguments if app is in foreground`, async () => {\n      const props = {\n        pingTimeout: 2000,\n        pingServerUrl: 'dummy.com',\n        httpMethod: 'OPTIONS' as 'OPTIONS',\n        children: ChildrenComponent,\n        customHeaders: DEFAULT_CUSTOM_HEADERS,\n      };\n      AppState.currentState = 'active';\n      const wrapper = shallow<NetworkConnectivity>(\n        getElement({\n          props,\n        }),\n      );\n      wrapper.instance().handleConnectivityChange = mockHandleConnectivityChange;\n      await wrapper.instance().checkInternet();\n      expect(checkInternetAccess).toHaveBeenCalledWith({\n        url: props.pingServerUrl,\n        timeout: props.pingTimeout,\n        method: props.httpMethod,\n        customHeaders: props.customHeaders,\n      });\n      expect(mockHandleConnectivityChange).toHaveBeenCalledWith({\n        isConnected: true,\n      });\n    });\n  });\n\n  describe('intervalHandler', () => {\n    it('returns early if there is connection AND pingOnlyIfOffline = true', () => {\n      const wrapper = shallow<NetworkConnectivity>(\n        getElement({\n          props: {\n            children: ChildrenComponent,\n            pingOnlyIfOffline: true,\n          },\n        }),\n      );\n      wrapper.instance().checkInternet = mockCheckInternet;\n      wrapper.setState({ isConnected: true });\n      wrapper.instance().intervalHandler();\n      expect(mockCheckInternet).not.toHaveBeenCalled();\n    });\n\n    it(`calls checkInternet if it's not connected OR pingOnlyIfOffline = false`, () => {\n      const wrapper = shallow<NetworkConnectivity>(\n        getElement({\n          props: {\n            children: ChildrenComponent,\n            pingOnlyIfOffline: false,\n          },\n        }),\n      );\n      wrapper.instance().checkInternet = mockCheckInternet;\n      wrapper.setState({ isConnected: false });\n      wrapper.instance().intervalHandler();\n      expect(mockCheckInternet).toHaveBeenCalledTimes(1);\n\n      wrapper.setState({ isConnected: true });\n      wrapper.instance().intervalHandler();\n      expect(mockCheckInternet).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('handleConnectivityChange', () => {\n    it('calls setState with the new connection value', () => {\n      const mockSetState = jest.fn();\n      const MockedNetworkConnectivity = mockPrototypeMethods({\n        setState: mockSetState,\n      });\n      const wrapper = shallow<NetworkConnectivity>(\n        getElement({\n          Component: MockedNetworkConnectivity,\n        }),\n      );\n\n      wrapper.instance().handleConnectivityChange({\n        type: 'other' as NetInfoStateType.other,\n        isConnected: true,\n        isInternetReachable: true,\n        details: {\n          cellularGeneration: null,\n          isConnectionExpensive: false,\n        },\n      });\n      expect(mockSetState).toHaveBeenCalledWith({ isConnected: true });\n\n      wrapper.instance().handleConnectivityChange({\n        type: 'none' as NetInfoStateType.none,\n        isConnected: false,\n        isInternetReachable: false,\n        details: null,\n      });\n      expect(mockSetState).toHaveBeenCalledWith({ isConnected: false });\n    });\n  });\n\n  describe('pingUrlChange', () => {\n    it('calls checkInternet if pingServerUrl changes', () => {\n      const wrapper = shallow<NetworkConnectivity>(getElement());\n      wrapper.instance().checkInternet = mockCheckInternet;\n      expect(mockCheckInternet).not.toHaveBeenCalled();\n      wrapper.setProps({ pingServerUrl: 'https://newServerToPing.com' });\n      expect(mockCheckInternet).toHaveBeenCalled();\n    });\n  });\n\n  describe('props validation', () => {\n    it('throws if prop pingTimeout is not a number', () => {\n      expect(() =>\n        render(\n          // @ts-ignore\n          getElement({\n            props: { pingTimeout: '4000', children: ChildrenComponent },\n          }),\n        ),\n      ).toThrow('you should pass a number as pingTimeout parameter');\n    });\n\n    it('throws if prop pingServerUrl is not a string', () => {\n      expect(() =>\n        render(\n          // @ts-ignore\n          getElement({\n            props: { pingServerUrl: 90, children: ChildrenComponent },\n          }),\n        ),\n      ).toThrow('you should pass a string as pingServerUrl parameter');\n    });\n\n    it('throws if prop shouldPing is not a boolean', () => {\n      expect(() =>\n        render(\n          // @ts-ignore\n          getElement({\n            props: { shouldPing: () => null, children: ChildrenComponent },\n          }),\n        ),\n      ).toThrow('you should pass a boolean as shouldPing parameter');\n    });\n\n    it('throws if prop pingInterval is not a number', () => {\n      expect(() =>\n        render(\n          // @ts-ignore\n          getElement({\n            props: { pingInterval: false, children: ChildrenComponent },\n          }),\n        ),\n      ).toThrow('you should pass a number as pingInterval parameter');\n    });\n\n    it('throws if prop pingOnlyIfOffline is not a boolean', () => {\n      expect(() =>\n        render(\n          // @ts-ignore\n          getElement({\n            props: { pingOnlyIfOffline: 10, children: ChildrenComponent },\n          }),\n        ),\n      ).toThrow('you should pass a boolean as pingOnlyIfOffline parameter');\n    });\n\n    it('throws if prop pingInBackground is not a boolean', () => {\n      expect(() =>\n        render(\n          // @ts-ignore\n          getElement({\n            props: { pingInBackground: '4000', children: ChildrenComponent },\n          }),\n        ),\n      ).toThrow('you should pass a string as pingServerUrl parameter');\n    });\n\n    it('throws if prop httpMethod is not either HEAD or OPTIONS', () => {\n      expect(() =>\n        render(\n          // @ts-ignore\n          getElement({\n            props: { httpMethod: 'POST', children: ChildrenComponent },\n          }),\n        ),\n      ).toThrow('httpMethod parameter should be either HEAD or OPTIONS');\n    });\n\n    it('throws if prop onConnectivityChange is not a function', () => {\n      expect(() =>\n        render(\n          // @ts-ignore\n          getElement({\n            props: { onConnectivityChange: 'foo', children: ChildrenComponent },\n          }),\n        ),\n      ).toThrow('you should pass a function as onConnectivityChange parameter');\n    });\n  });\n});\n"]}