{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/test/sagas.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* @flow */\nimport {\n  testSaga,\n  TestApi,\n  TestApiWithEffectsTesters,\n} from 'redux-saga-test-plan';\nimport { Platform, AppState } from 'react-native';\nimport NetInfo, { NetInfoState } from '@react-native-community/netinfo';\nimport networkSaga, {\n  netInfoChangeSaga,\n  connectionIntervalSaga,\n  createNetInfoConnectionChangeChannel,\n  connectionHandler,\n  checkInternetAccessSaga,\n  handleConnectivityChange,\n  createIntervalChannel,\n  intervalChannelFn,\n  netInfoEventChannelFn,\n} from '../redux/sagas';\nimport { connectionChange } from '../redux/actionCreators';\n\nimport { networkSelector } from '../redux/createReducer';\n\nimport checkInternetAccess from '../utils/checkInternetAccess';\nimport { DEFAULT_ARGS } from '../utils/constants';\n\nconst args = DEFAULT_ARGS;\n\ndescribe('sagas', () => {\n  describe('networkSaga', () => {\n    it('forks netInfoChangeSaga with the right params', () => {\n      const { pingInterval, ...params } = args;\n      const { pingInBackground, pingOnlyIfOffline, ...rest } = params;\n      testSaga(networkSaga, params)\n        .next()\n        .fork(netInfoChangeSaga, rest)\n        .next()\n        .isDone();\n    });\n\n    it(`forks netInfoChangeSaga AND sets an interval \n    if pingInterval is higher than 0`, () => {\n      const { pingInterval, ...params } = args;\n      const {\n        pingInBackground,\n        pingOnlyIfOffline,\n        shouldPing,\n        ...rest\n      } = params;\n      testSaga(networkSaga, { ...args, pingInterval: 3000 })\n        .next()\n        .fork(netInfoChangeSaga, { ...rest, shouldPing })\n        .next()\n        .fork(connectionIntervalSaga, {\n          ...rest,\n          pingInterval: 3000,\n          pingOnlyIfOffline,\n          pingInBackground,\n        })\n        .next()\n        .isDone();\n    });\n\n    it('default parameters', () => {\n      const {\n        pingOnlyIfOffline,\n        pingInterval,\n        pingInBackground,\n        ...params\n      } = args;\n      testSaga(networkSaga)\n        .next()\n        .fork(netInfoChangeSaga, { ...params })\n        .next()\n        .isDone();\n    });\n  });\n\n  describe('netInfoChangeSaga', () => {\n    const params = {\n      pingTimeout: args.pingTimeout,\n      pingServerUrl: args.pingServerUrl,\n      shouldPing: args.shouldPing,\n      httpMethod: args.httpMethod,\n      customHeaders: args.customHeaders,\n    };\n    function channelLoop(saga: TestApi) {\n      return saga\n        .next()\n        .call(createNetInfoConnectionChangeChannel, netInfoEventChannelFn)\n        .next('channel')\n        .take('channel')\n        .next(true)\n        .fork(connectionHandler, {\n          ...params,\n          isConnected: true,\n        })\n        .next()\n        .take('channel');\n    }\n    it('iOS', () => {\n      Platform.OS = 'ios';\n      // @ts-ignore\n      const saga = testSaga(netInfoChangeSaga, params);\n      channelLoop(saga);\n    });\n\n    it('Android', () => {\n      Platform.OS = 'android';\n      // @ts-ignore\n      const saga = testSaga(netInfoChangeSaga, params)\n        .next()\n        .call([NetInfo, NetInfo.fetch])\n        .next({ isConnected: false })\n        .fork(connectionHandler, {\n          ...params,\n          isConnected: false,\n        });\n      channelLoop(saga);\n    });\n\n    it('closes the channel when it ends emitting', () => {\n      Platform.OS = 'ios';\n      const mockCloseFn = jest.fn();\n      const mockChannel = {\n        close: mockCloseFn,\n      };\n\n      const iterator = netInfoChangeSaga(params);\n      iterator.next();\n      // This will make take(mockChannel) throw an error, since it's not a valid\n      // channel or a valid pattern for take() inside the infinite loop,\n      // hence executing the finally block.\n      iterator.next((mockChannel as unknown) as NetInfoState);\n      try {\n        iterator.next({ isConnected: true } as NetInfoState);\n        expect(mockCloseFn).toHaveBeenCalled();\n        // eslint-disable-next-line\n      } catch (e) {}\n    });\n\n    it('does NOT close the channel if redux-saga does NOT yield a cancelled effect', () => {\n      Platform.OS = 'ios';\n      const mockCloseFn = jest.fn();\n      const mockChannel = {\n        close: mockCloseFn,\n      };\n\n      const iterator = netInfoChangeSaga(params);\n      iterator.next();\n      // This will make take(mockChannel) throw an error, since it's not a valid\n      // channel or a valid pattern for take() inside the infinite loop,\n      // hence executing the finally block.\n      iterator.next((mockChannel as unknown) as NetInfoState);\n      try {\n        iterator.next({ isConnected: false } as NetInfoState);\n        expect(mockCloseFn).not.toHaveBeenCalled();\n        // eslint-disable-next-line\n      } catch (e) {}\n    });\n  });\n\n  describe('connectionHandler', () => {\n    const params = {\n      pingTimeout: args.pingTimeout,\n      pingServerUrl: args.pingServerUrl,\n      shouldPing: true,\n      httpMethod: args.httpMethod,\n      isConnected: true,\n      customHeaders: args.customHeaders,\n    };\n    it('forks checkInternetAccessSaga if shouldPing AND isConnected are true', () => {\n      const saga = testSaga(connectionHandler, params);\n      saga\n        .next()\n        .fork(checkInternetAccessSaga, {\n          pingTimeout: args.pingTimeout,\n          pingServerUrl: args.pingServerUrl,\n          httpMethod: args.httpMethod,\n          pingInBackground: args.pingInBackground,\n          customHeaders: args.customHeaders,\n        })\n        .next()\n        .isDone();\n    });\n    it('forks handleConnectivityChange if shouldPing OR isConnected are NOT true', () => {\n      params.isConnected = false;\n      const saga = testSaga(connectionHandler, params);\n      saga\n        .next()\n        .fork(handleConnectivityChange, false)\n        .next()\n        .isDone();\n    });\n  });\n\n  describe('connectionIntervalSaga', () => {\n    const { shouldPing, ...params } = args;\n    function takeChannelAndGetConnection(saga: TestApi, isConnected: boolean) {\n      return saga\n        .next()\n        .call(createIntervalChannel, 3000, intervalChannelFn)\n        .next('channel')\n        .take('channel')\n        .next()\n        .select(networkSelector)\n        .next({ isConnected });\n    }\n    it(`forks checkInternetAccessSaga if it's NOT connected or it is,\n     but pingOnlyIfOffline is false`, () => {\n      // @ts-ignore\n      let saga: TestApiWithEffectsTesters = testSaga(connectionIntervalSaga, {\n        ...params,\n        pingOnlyIfOffline: false,\n        pingInterval: 3000,\n      });\n      saga = takeChannelAndGetConnection(saga, true);\n      saga\n        .fork(checkInternetAccessSaga, {\n          pingTimeout: params.pingTimeout,\n          pingServerUrl: params.pingServerUrl,\n          httpMethod: params.httpMethod,\n          pingInBackground: params.pingInBackground,\n          customHeaders: args.customHeaders,\n        })\n        .next()\n        .take('channel');\n    });\n\n    it(`does NOT fork checkInternetAccessSaga if it's connected \n    AND pingOnlyIfOffline is true`, () => {\n      // @ts-ignore\n      let saga: TestApiWithEffectsTesters = testSaga(connectionIntervalSaga, {\n        ...params,\n        pingOnlyIfOffline: true,\n        pingInterval: 3000,\n      });\n      saga = takeChannelAndGetConnection(saga, true);\n      saga.take('channel');\n    });\n\n    it('closes the channel when it ends emitting', () => {\n      const mockCloseFn = jest.fn();\n      const mockChannel = {\n        close: mockCloseFn,\n        isConnected: false,\n        actionQueue: [],\n        isQueuePaused: false,\n      };\n      const iterator = connectionIntervalSaga({\n        ...params,\n        pingOnlyIfOffline: true,\n        pingInterval: 3000,\n      });\n      iterator.next();\n      // This will make take(mockChannel) throw an error, since it's not a valid\n      // channel or a valid pattern for take() inside the infinite loop,\n      // hence executing the finally block.\n      iterator.next(mockChannel);\n      try {\n        // @ts-ignore\n        iterator.next(true);\n        expect(mockCloseFn).toHaveBeenCalled();\n        // eslint-disable-next-line\n      } catch (e) {}\n    });\n\n    it('does NOT close the channel if redux-saga does NOT yield a cancelled effect', () => {\n      const mockCloseFn = jest.fn();\n      const mockChannel = {\n        close: mockCloseFn,\n        isConnected: false,\n        actionQueue: [],\n        isQueuePaused: false,\n      };\n      const iterator = connectionIntervalSaga({\n        ...params,\n        pingOnlyIfOffline: true,\n        pingInterval: 3000,\n      });\n      iterator.next();\n      // This will make take(mockChannel) throw an error, since it's not a valid\n      // channel or a valid pattern for take() inside the infinite loop,\n      // hence executing the finally block.\n      iterator.next(mockChannel);\n      try {\n        // @ts-ignore\n        iterator.next(false);\n        expect(mockCloseFn).not.toHaveBeenCalled();\n        // eslint-disable-next-line\n      } catch (e) {}\n    });\n  });\n\n  describe('checkInternetAccessSaga', () => {\n    const params = {\n      pingServerUrl: args.pingServerUrl,\n      pingTimeout: args.pingTimeout,\n      httpMethod: args.httpMethod,\n      pingInBackground: false,\n      customHeaders: args.customHeaders,\n    };\n    it('returns early if pingInBackground is false AND app state is NOT active', () => {\n      AppState.currentState = 'inactive';\n      const saga = testSaga(checkInternetAccessSaga, params);\n      saga.next().isDone();\n    });\n\n    it('calls checkInternetAccess AND handleConnectivityChange', () => {\n      params.pingInBackground = true;\n      const saga = testSaga(checkInternetAccessSaga, params);\n      saga\n        .next()\n        .call(checkInternetAccess, {\n          url: params.pingServerUrl,\n          timeout: params.pingTimeout,\n          method: params.httpMethod,\n          customHeaders: params.customHeaders,\n        })\n        .next(true)\n        .call(handleConnectivityChange, true)\n        .next()\n        .isDone();\n    });\n  });\n\n  describe('handleConnectivityChange', () => {\n    it('dispatches a CONNECTION_CHANGE action if the connection changed ', () => {\n      const actionQueue = ['foo', 'bar'];\n      // @ts-ignore\n      const saga = testSaga(handleConnectivityChange, false);\n      saga\n        .next()\n        .select(networkSelector)\n        .next({ actionQueue, isConnected: true })\n        .put(connectionChange(false))\n        .next()\n        .isDone();\n    });\n\n    it('does NOT dispatch if connection did NOT change and we are offline', () => {\n      const actionQueue = ['foo', 'bar'];\n      // @ts-ignore\n      const saga = testSaga(handleConnectivityChange, false);\n      saga\n        .next()\n        .select(networkSelector)\n        .next({ actionQueue, isConnected: false })\n        .isDone();\n    });\n  });\n});\n"]}