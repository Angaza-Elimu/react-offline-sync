d81ea6e6f28ad08e595c14665c7f08a9
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _reduxSagaTestPlan = require("redux-saga-test-plan");

var _reactNative = require("react-native");

var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));

var _sagas = _interopRequireWildcard(require("../redux/sagas"));

var _actionCreators = require("../redux/actionCreators");

var _createReducer = require("../redux/createReducer");

var _checkInternetAccess = _interopRequireDefault(require("../utils/checkInternetAccess"));

var _constants = require("../utils/constants");

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var args = _constants.DEFAULT_ARGS;
describe('sagas', function () {
  describe('networkSaga', function () {
    it('forks netInfoChangeSaga with the right params', function () {
      var pingInterval = args.pingInterval,
          params = __rest(args, ["pingInterval"]);

      var pingInBackground = params.pingInBackground,
          pingOnlyIfOffline = params.pingOnlyIfOffline,
          rest = __rest(params, ["pingInBackground", "pingOnlyIfOffline"]);

      (0, _reduxSagaTestPlan.testSaga)(_sagas.default, params).next().fork(_sagas.netInfoChangeSaga, rest).next().isDone();
    });
    it("forks netInfoChangeSaga AND sets an interval \n    if pingInterval is higher than 0", function () {
      var pingInterval = args.pingInterval,
          params = __rest(args, ["pingInterval"]);

      var pingInBackground = params.pingInBackground,
          pingOnlyIfOffline = params.pingOnlyIfOffline,
          shouldPing = params.shouldPing,
          rest = __rest(params, ["pingInBackground", "pingOnlyIfOffline", "shouldPing"]);

      (0, _reduxSagaTestPlan.testSaga)(_sagas.default, __assign(__assign({}, args), {
        pingInterval: 3000
      })).next().fork(_sagas.netInfoChangeSaga, __assign(__assign({}, rest), {
        shouldPing: shouldPing
      })).next().fork(_sagas.connectionIntervalSaga, __assign(__assign({}, rest), {
        pingInterval: 3000,
        pingOnlyIfOffline: pingOnlyIfOffline,
        pingInBackground: pingInBackground
      })).next().isDone();
    });
    it('default parameters', function () {
      var pingOnlyIfOffline = args.pingOnlyIfOffline,
          pingInterval = args.pingInterval,
          pingInBackground = args.pingInBackground,
          params = __rest(args, ["pingOnlyIfOffline", "pingInterval", "pingInBackground"]);

      (0, _reduxSagaTestPlan.testSaga)(_sagas.default).next().fork(_sagas.netInfoChangeSaga, __assign({}, params)).next().isDone();
    });
  });
  describe('netInfoChangeSaga', function () {
    var params = {
      pingTimeout: args.pingTimeout,
      pingServerUrl: args.pingServerUrl,
      shouldPing: args.shouldPing,
      httpMethod: args.httpMethod,
      customHeaders: args.customHeaders
    };

    function channelLoop(saga) {
      return saga.next().call(_sagas.createNetInfoConnectionChangeChannel, _sagas.netInfoEventChannelFn).next('channel').take('channel').next(true).fork(_sagas.connectionHandler, __assign(__assign({}, params), {
        isConnected: true
      })).next().take('channel');
    }

    it('iOS', function () {
      _reactNative.Platform.OS = 'ios';
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.netInfoChangeSaga, params);
      channelLoop(saga);
    });
    it('Android', function () {
      _reactNative.Platform.OS = 'android';
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.netInfoChangeSaga, params).next().call([_netinfo.default, _netinfo.default.fetch]).next({
        isConnected: false
      }).fork(_sagas.connectionHandler, __assign(__assign({}, params), {
        isConnected: false
      }));
      channelLoop(saga);
    });
    it('closes the channel when it ends emitting', function () {
      _reactNative.Platform.OS = 'ios';
      var mockCloseFn = jest.fn();
      var mockChannel = {
        close: mockCloseFn
      };
      var iterator = (0, _sagas.netInfoChangeSaga)(params);
      iterator.next();
      iterator.next(mockChannel);

      try {
        iterator.next({
          isConnected: true
        });
        expect(mockCloseFn).toHaveBeenCalled();
      } catch (e) {}
    });
    it('does NOT close the channel if redux-saga does NOT yield a cancelled effect', function () {
      _reactNative.Platform.OS = 'ios';
      var mockCloseFn = jest.fn();
      var mockChannel = {
        close: mockCloseFn
      };
      var iterator = (0, _sagas.netInfoChangeSaga)(params);
      iterator.next();
      iterator.next(mockChannel);

      try {
        iterator.next({
          isConnected: false
        });
        expect(mockCloseFn).not.toHaveBeenCalled();
      } catch (e) {}
    });
  });
  describe('connectionHandler', function () {
    var params = {
      pingTimeout: args.pingTimeout,
      pingServerUrl: args.pingServerUrl,
      shouldPing: true,
      httpMethod: args.httpMethod,
      isConnected: true,
      customHeaders: args.customHeaders
    };
    it('forks checkInternetAccessSaga if shouldPing AND isConnected are true', function () {
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.connectionHandler, params);
      saga.next().fork(_sagas.checkInternetAccessSaga, {
        pingTimeout: args.pingTimeout,
        pingServerUrl: args.pingServerUrl,
        httpMethod: args.httpMethod,
        pingInBackground: args.pingInBackground,
        customHeaders: args.customHeaders
      }).next().isDone();
    });
    it('forks handleConnectivityChange if shouldPing OR isConnected are NOT true', function () {
      params.isConnected = false;
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.connectionHandler, params);
      saga.next().fork(_sagas.handleConnectivityChange, false).next().isDone();
    });
  });
  describe('connectionIntervalSaga', function () {
    var shouldPing = args.shouldPing,
        params = __rest(args, ["shouldPing"]);

    function takeChannelAndGetConnection(saga, isConnected) {
      return saga.next().call(_sagas.createIntervalChannel, 3000, _sagas.intervalChannelFn).next('channel').take('channel').next().select(_createReducer.networkSelector).next({
        isConnected: isConnected
      });
    }

    it("forks checkInternetAccessSaga if it's NOT connected or it is,\n     but pingOnlyIfOffline is false", function () {
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.connectionIntervalSaga, __assign(__assign({}, params), {
        pingOnlyIfOffline: false,
        pingInterval: 3000
      }));
      saga = takeChannelAndGetConnection(saga, true);
      saga.fork(_sagas.checkInternetAccessSaga, {
        pingTimeout: params.pingTimeout,
        pingServerUrl: params.pingServerUrl,
        httpMethod: params.httpMethod,
        pingInBackground: params.pingInBackground,
        customHeaders: args.customHeaders
      }).next().take('channel');
    });
    it("does NOT fork checkInternetAccessSaga if it's connected \n    AND pingOnlyIfOffline is true", function () {
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.connectionIntervalSaga, __assign(__assign({}, params), {
        pingOnlyIfOffline: true,
        pingInterval: 3000
      }));
      saga = takeChannelAndGetConnection(saga, true);
      saga.take('channel');
    });
    it('closes the channel when it ends emitting', function () {
      var mockCloseFn = jest.fn();
      var mockChannel = {
        close: mockCloseFn,
        isConnected: false,
        actionQueue: [],
        isQueuePaused: false
      };
      var iterator = (0, _sagas.connectionIntervalSaga)(__assign(__assign({}, params), {
        pingOnlyIfOffline: true,
        pingInterval: 3000
      }));
      iterator.next();
      iterator.next(mockChannel);

      try {
        iterator.next(true);
        expect(mockCloseFn).toHaveBeenCalled();
      } catch (e) {}
    });
    it('does NOT close the channel if redux-saga does NOT yield a cancelled effect', function () {
      var mockCloseFn = jest.fn();
      var mockChannel = {
        close: mockCloseFn,
        isConnected: false,
        actionQueue: [],
        isQueuePaused: false
      };
      var iterator = (0, _sagas.connectionIntervalSaga)(__assign(__assign({}, params), {
        pingOnlyIfOffline: true,
        pingInterval: 3000
      }));
      iterator.next();
      iterator.next(mockChannel);

      try {
        iterator.next(false);
        expect(mockCloseFn).not.toHaveBeenCalled();
      } catch (e) {}
    });
  });
  describe('checkInternetAccessSaga', function () {
    var params = {
      pingServerUrl: args.pingServerUrl,
      pingTimeout: args.pingTimeout,
      httpMethod: args.httpMethod,
      pingInBackground: false,
      customHeaders: args.customHeaders
    };
    it('returns early if pingInBackground is false AND app state is NOT active', function () {
      _reactNative.AppState.currentState = 'inactive';
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.checkInternetAccessSaga, params);
      saga.next().isDone();
    });
    it('calls checkInternetAccess AND handleConnectivityChange', function () {
      params.pingInBackground = true;
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.checkInternetAccessSaga, params);
      saga.next().call(_checkInternetAccess.default, {
        url: params.pingServerUrl,
        timeout: params.pingTimeout,
        method: params.httpMethod,
        customHeaders: params.customHeaders
      }).next(true).call(_sagas.handleConnectivityChange, true).next().isDone();
    });
  });
  describe('handleConnectivityChange', function () {
    it('dispatches a CONNECTION_CHANGE action if the connection changed ', function () {
      var actionQueue = ['foo', 'bar'];
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.handleConnectivityChange, false);
      saga.next().select(_createReducer.networkSelector).next({
        actionQueue: actionQueue,
        isConnected: true
      }).put((0, _actionCreators.connectionChange)(false)).next().isDone();
    });
    it('does NOT dispatch if connection did NOT change and we are offline', function () {
      var actionQueue = ['foo', 'bar'];
      var saga = (0, _reduxSagaTestPlan.testSaga)(_sagas.handleConnectivityChange, false);
      saga.next().select(_createReducer.networkSelector).next({
        actionQueue: actionQueue,
        isConnected: false
      }).isDone();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,