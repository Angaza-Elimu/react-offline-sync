b21bd89642ec0900f85d5327438c8d3e










'use strict';function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}



function deprecatedCreateStrictShapeTypeChecker(shapeTypes)


{
  function checkType(
  isRequired,
  props,
  propName,
  componentName,
  location)

  {
    if (!props[propName]) {
      if (isRequired) {
        require('invariant')(
        false,
        "Required object `" + propName + "` was not specified in " + ("`" +
        componentName + "`."));

      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';
    if (propType !== 'object') {
      require('invariant')(
      false,
      "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" +
      componentName + "`, expected `object`."));

    }


    var allKeys = _objectSpread(_objectSpread({}, props[propName]), shapeTypes);for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {rest[_key - 5] = arguments[_key];}
    for (var _key2 in allKeys) {
      var checker = shapeTypes[_key2];
      if (!checker) {
        require('invariant')(
        false,
        "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." +
        '\nBad object: ' +
        JSON.stringify(props[propName], null, '  ') +
        '\nValid keys: ' +
        JSON.stringify(Object.keys(shapeTypes), null, '  '));

      }
      var error = checker.apply(void 0, [propValue, _key2, componentName, location].concat(rest));
      if (error) {
        require('invariant')(
        false,
        error.message +
        '\nBad object: ' +
        JSON.stringify(props[propName], null, '  '));

      }
    }
  }
  function chainedCheckType(
  props,
  propName,
  componentName,
  location)

  {for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {rest[_key3 - 4] = arguments[_key3];}
    return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}

module.exports = deprecatedCreateStrictShapeTypeChecker;