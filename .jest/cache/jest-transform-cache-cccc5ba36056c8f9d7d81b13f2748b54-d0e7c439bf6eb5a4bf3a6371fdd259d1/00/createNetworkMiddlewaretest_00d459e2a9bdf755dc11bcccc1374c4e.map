{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/test/createNetworkMiddleware.test.ts"],"names":[],"mappings":"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","sourcesContent":["import configureStore from 'redux-mock-store';\nimport thunk, { ThunkDispatch } from 'redux-thunk';\nimport { Dispatch, AnyAction } from 'redux';\nimport createNetworkMiddleware, {\n  createReleaseQueue,\n} from '../redux/createNetworkMiddleware';\nimport * as actionCreators from '../redux/actionCreators';\nimport wait from '../utils/wait';\nimport { SEMAPHORE_COLOR } from '../utils/constants';\n\ntype Thunk = ThunkDispatch<{}, undefined, AnyAction>;\n\nconst getFetchAction = (type: string) => ({\n  type,\n  payload: {\n    isFetching: true,\n  },\n});\n\ndescribe('createNetworkMiddleware with actionTypes in config', () => {\n  const networkMiddleware = createNetworkMiddleware({\n    actionTypes: ['REFRESH_DATA'],\n  });\n  const middlewares = [networkMiddleware, thunk];\n  const mockStore = configureStore(middlewares);\n\n  it('action DOES NOT match criteria', () => {\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n\n    store.dispatch({ type: 'TEST' });\n\n    const actions = store.getActions();\n    expect(actions).toEqual([{ type: 'TEST' }]);\n  });\n\n  it('action MATCHES criteria, status ONLINE', () => {\n    const initialState = {\n      network: {\n        isConnected: true,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n    const action = getFetchAction('FETCH_SOME_DATA_REQUEST');\n    store.dispatch(action);\n\n    const actions = store.getActions();\n    expect(actions).toEqual([getFetchAction('FETCH_SOME_DATA_REQUEST')]);\n  });\n\n  it('action MATCHES criteria through REGEX, status OFFLINE', () => {\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n    const action = getFetchAction('FETCH_SOME_DATA_REQUEST');\n    store.dispatch(action);\n\n    const actions = store.getActions();\n    expect(actions).toEqual([actionCreators.fetchOfflineMode(action)]);\n  });\n\n  it('action MATCHES criteria through ARRAY of ACTION TYPES, status OFFLINE', () => {\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n    const action = getFetchAction('REFRESH_DATA');\n    store.dispatch(action);\n\n    const actions = store.getActions();\n    expect(actions).toEqual([actionCreators.fetchOfflineMode(action)]);\n  });\n\n  it('action ENQUEUED, status back ONLINE', async () => {\n    const action1 = getFetchAction('FETCH_SOME_DATA_REQUEST');\n    const action2 = getFetchAction('FETCH_SOMETHING_ELSE_REQUEST');\n    const action3 = getFetchAction('FETCH_USER_REQUEST');\n    const prevActionQueue = [action1, action2, action3];\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: prevActionQueue,\n      },\n    };\n    const store = mockStore(initialState);\n    store.dispatch(actionCreators.connectionChange(true));\n    const actions = store.getActions();\n    expect(actions).toEqual([actionCreators.connectionChange(true)]);\n  });\n\n  it('action ENQUEUED, queue PAUSED, status queue RESUMED', async () => {\n    const action1 = getFetchAction('FETCH_SOME_DATA_REQUEST');\n    const action2 = getFetchAction('FETCH_SOMETHING_ELSE_REQUEST');\n    const action3 = getFetchAction('FETCH_USER_REQUEST');\n    const prevActionQueue = [action1, action2, action3];\n    const initialState = {\n      network: {\n        isConnected: true,\n        isQueuePaused: true,\n        actionQueue: prevActionQueue,\n      },\n    };\n    const store = mockStore(initialState);\n    store.dispatch(actionCreators.changeQueueSemaphore(SEMAPHORE_COLOR.GREEN));\n    const actions = store.getActions();\n    expect(actions).toEqual([\n      actionCreators.changeQueueSemaphore(SEMAPHORE_COLOR.GREEN),\n    ]);\n  });\n});\n\ndescribe('createNetworkMiddleware with NO CONFIG', () => {\n  const networkMiddleware = createNetworkMiddleware();\n  const middlewares = [networkMiddleware];\n  const mockStore = configureStore(middlewares);\n\n  it('REFRESH_ACTION does not match in this case in OFFLINE mode', () => {\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n    const action = getFetchAction('REFRESH_DATA');\n    store.dispatch(action);\n\n    const actions = store.getActions();\n    expect(actions).toEqual([getFetchAction('REFRESH_DATA')]);\n  });\n});\n\ndescribe('createNetworkMiddleware with different REGEX config', () => {\n  const networkMiddleware = createNetworkMiddleware({\n    regexActionType: /REFRESH/,\n  });\n  const middlewares = [networkMiddleware];\n  const mockStore = configureStore(middlewares);\n\n  it('REFRESH_ACTION MATCHES through REGEX in OFFLINE mode', () => {\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n    const action = getFetchAction('REFRESH_DATA');\n    store.dispatch(action);\n\n    const actions = store.getActions();\n    expect(actions).toEqual([actionCreators.fetchOfflineMode(action)]);\n  });\n\n  it('FETCH_ACTION type no longer matches default REGEX', () => {\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n    const action = getFetchAction('FETCH_DATA');\n    store.dispatch(action);\n\n    const actions = store.getActions();\n    expect(actions).toEqual([getFetchAction('FETCH_DATA')]);\n  });\n});\n\ndescribe('createNetworkMiddleware with thunks', () => {\n  // Helper to simulate a network request\n  const fetchMockData = (dispatch: Dispatch) =>\n    new Promise(resolve => {\n      setTimeout(() => {\n        dispatch({ type: 'FETCH_DATA_SUCCESS' });\n        resolve();\n      }, 1000);\n    });\n\n  const fetchData = (dispatch: Dispatch) => {\n    dispatch({ type: 'FETCH_DATA_REQUEST' });\n    return fetchMockData(dispatch);\n  };\n\n  fetchData.interceptInOffline = true;\n\n  function fetchSomethingWithoutInterception(dispatch: Dispatch) {\n    return dispatch({ type: 'TOGGLE_DROPDOWN' });\n  }\n\n  it('thunk does NOT match criteria', () => {\n    const networkMiddleware = createNetworkMiddleware();\n    const middlewares = [networkMiddleware, thunk];\n    const mockStore = configureStore<{}, Thunk>(middlewares);\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n\n    store.dispatch(fetchSomethingWithoutInterception);\n\n    const actions = store.getActions();\n    // The action went through and was dispatched\n    expect(actions).toEqual([{ type: 'TOGGLE_DROPDOWN' }]);\n  });\n\n  it('thunk MATCHES criteria and we are OFFLINE', () => {\n    const networkMiddleware = createNetworkMiddleware();\n    const middlewares = [networkMiddleware, thunk];\n    const mockStore = configureStore<{}, Thunk>(middlewares);\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n\n    store.dispatch(fetchData);\n\n    const actions = store.getActions();\n    expect(actions).toEqual([actionCreators.fetchOfflineMode(fetchData)]);\n  });\n\n  it('thunk enqueued, regex MATCHES criteria, back ONLINE -> thunk gets redispatched', () => {\n    const networkMiddleware = createNetworkMiddleware();\n    const middlewares = [networkMiddleware, thunk];\n    const mockStore = configureStore<{}, Thunk>(middlewares);\n    (fetchData as any).retry = true;\n    const initialState = {\n      network: {\n        isConnected: true,\n        actionQueue: [fetchData],\n      },\n    };\n    const store = mockStore(initialState);\n\n    store.dispatch(fetchData).then(() => {\n      const actions = store.getActions();\n      expect(actions).toEqual([\n        actionCreators.removeActionFromQueue(fetchData),\n        { type: 'FETCH_DATA_REQUEST' },\n        { type: 'FETCH_DATA_SUCCESS' },\n      ]);\n    });\n  });\n});\n\ndescribe('createNetworkMiddleware with dismissing actions functionality', () => {\n  describe('Plain objects', () => {\n    const getFetchActionWithDismiss = (\n      type: string,\n      ...actionsToDismiss: string[]\n    ) => ({\n      type,\n      payload: {\n        isFetching: true,\n      },\n      meta: {\n        retry: true,\n        dismiss: actionsToDismiss,\n      },\n    });\n\n    it('NO actions enqueued with dismiss options', () => {\n      const networkMiddleware = createNetworkMiddleware();\n      const middlewares = [networkMiddleware];\n      const mockStore = configureStore(middlewares);\n      const actionEnqueued = getFetchActionWithDismiss('FETCH_DATA');\n      const navigationAction = { type: 'NAVIGATE_BACK' };\n      const initialState = {\n        network: {\n          isConnected: false,\n          actionQueue: [actionEnqueued],\n        },\n      };\n      const store = mockStore(initialState);\n      store.dispatch(navigationAction);\n\n      const actionsDispatched = store.getActions();\n      expect(actionsDispatched).toEqual([{ type: 'NAVIGATE_BACK' }]);\n    });\n\n    it('SOME actions enqueued with dismiss options', () => {\n      const networkMiddleware = createNetworkMiddleware();\n      const middlewares = [networkMiddleware];\n      const mockStore = configureStore(middlewares);\n      const actionEnqueued = getFetchActionWithDismiss(\n        'FETCH_DATA',\n        'NAVIGATE_BACK',\n      );\n      const navigationAction = { type: 'NAVIGATE_BACK' };\n      const initialState = {\n        network: {\n          isConnected: false,\n          actionQueue: [actionEnqueued],\n        },\n      };\n      const store = mockStore(initialState);\n      store.dispatch(navigationAction);\n\n      const actionsDispatched = store.getActions();\n      expect(actionsDispatched).toEqual([\n        actionCreators.dismissActionsFromQueue('NAVIGATE_BACK'),\n        { type: 'NAVIGATE_BACK' },\n      ]);\n    });\n\n    it('SOME actions enqueued with dismiss options, but no match', () => {\n      const networkMiddleware = createNetworkMiddleware();\n      const middlewares = [networkMiddleware];\n      const mockStore = configureStore(middlewares);\n      const actionEnqueued = getFetchActionWithDismiss(\n        'FETCH_DATA',\n        'NAVIGATE_BACK',\n      );\n      const navigationAction = { type: 'NAVIGATE_TO_LOGIN' };\n      const initialState = {\n        network: {\n          isConnected: false,\n          actionQueue: [actionEnqueued],\n        },\n      };\n      const store = mockStore(initialState);\n      store.dispatch(navigationAction);\n\n      const actionsDispatched = store.getActions();\n      expect(actionsDispatched).toEqual([{ type: 'NAVIGATE_TO_LOGIN' }]);\n    });\n  });\n  describe('thunks', () => {\n    function fetchThunk(dispatch: Dispatch) {\n      dispatch({ type: 'FETCH_DATA_REQUEST' });\n    }\n\n    it('Thunks enqueued with NO dismiss options', () => {\n      const networkMiddleware = createNetworkMiddleware();\n      const middlewares = [networkMiddleware];\n      const mockStore = configureStore(middlewares);\n      (fetchThunk as any).meta = {\n        retry: true,\n        dismiss: [],\n      };\n      const navigationAction = { type: 'NAVIGATE_BACK' };\n      const initialState = {\n        network: {\n          isConnected: false,\n          actionQueue: [fetchThunk],\n        },\n      };\n      const store = mockStore(initialState);\n      store.dispatch(navigationAction);\n\n      const actionsDispatched = store.getActions();\n      expect(actionsDispatched).toEqual([{ type: 'NAVIGATE_BACK' }]);\n    });\n\n    it('SOME thunks enqueued with dismiss options', () => {\n      const networkMiddleware = createNetworkMiddleware();\n      const middlewares = [networkMiddleware];\n      const mockStore = configureStore(middlewares);\n      (fetchThunk as any).meta = {\n        retry: true,\n        dismiss: ['NAVIGATE_TO_LOGIN'],\n      };\n      const navigationAction = { type: 'NAVIGATE_TO_LOGIN' };\n      const initialState = {\n        network: {\n          isConnected: false,\n          actionQueue: [fetchThunk],\n        },\n      };\n      const store = mockStore(initialState);\n      store.dispatch(navigationAction);\n\n      const actionsDispatched = store.getActions();\n      expect(actionsDispatched).toEqual([\n        actionCreators.dismissActionsFromQueue('NAVIGATE_TO_LOGIN'),\n        { type: 'NAVIGATE_TO_LOGIN' },\n      ]);\n    });\n  });\n});\n\ndescribe('createNetworkMiddleware with queueDeselector', () => {\n  const mockDequeueSelector = jest.fn();\n  const networkMiddleware = createNetworkMiddleware({\n    shouldDequeueSelector: mockDequeueSelector,\n  });\n  const middlewares = [networkMiddleware];\n  const mockStore = configureStore(middlewares);\n\n  it('Proxies action to next middleware if deselector returns false', () => {\n    const initialState = {\n      network: {\n        isConnected: true,\n        actionQueue: [],\n      },\n    };\n    const store = mockStore(initialState);\n    const action = getFetchAction('REFRESH_DATA');\n    store.dispatch(action);\n\n    const actions = store.getActions();\n    expect(actions).toEqual([getFetchAction('REFRESH_DATA')]);\n  });\n});\n\ndescribe('createReleaseQueue', () => {\n  const mockDispatch = jest.fn();\n  const mockGetState = jest.fn();\n  const mockDequeueSelector = jest.fn();\n  const mockDelay = 50;\n\n  beforeEach(() => {\n    mockDequeueSelector.mockImplementation(() => true);\n    mockGetState.mockImplementation(() => ({\n      network: {\n        isConnected: true,\n        isQueuePaused: false,\n      },\n    }));\n  });\n\n  afterEach(() => {\n    mockDispatch.mockClear();\n    mockGetState.mockClear();\n  });\n\n  it('empties the queue if we are online and queue is not halted', async () => {\n    const releaseQueue = createReleaseQueue(\n      mockGetState,\n      mockDispatch,\n      mockDelay,\n      mockDequeueSelector,\n    );\n    const foo = { type: 'foo', payload: {} };\n    const bar = { type: 'bar', payload: {} };\n    const actionQueue = [foo, bar];\n    await releaseQueue(actionQueue);\n    expect(mockDispatch).toHaveBeenCalledTimes(4);\n    expect(mockDispatch).toHaveBeenNthCalledWith(\n      1,\n      actionCreators.removeActionFromQueue(foo),\n    );\n    expect(mockDispatch).toHaveBeenNthCalledWith(2, foo);\n    expect(mockDispatch).toHaveBeenNthCalledWith(\n      3,\n      actionCreators.removeActionFromQueue(bar),\n    );\n    expect(mockDispatch).toHaveBeenNthCalledWith(4, bar);\n  });\n\n  it('does not empty the queue if dequeue selector returns false', async () => {\n    const releaseQueue = createReleaseQueue(\n      mockGetState,\n      mockDispatch,\n      mockDelay,\n      () => false,\n    );\n    const foo = { type: 'foo', payload: {} };\n    const bar = { type: 'bar', payload: {} };\n    const actionQueue = [foo, bar];\n    await releaseQueue(actionQueue);\n    expect(mockDispatch).toHaveBeenCalledTimes(0);\n  });\n\n  it('does not empty the queue if queue has been halted', async () => {\n    mockGetState.mockImplementation(() => ({\n      network: {\n        isQueuePaused: true,\n      },\n    }));\n    const releaseQueue = createReleaseQueue(\n      mockGetState,\n      mockDispatch,\n      mockDelay,\n      mockDequeueSelector,\n    );\n    const foo = { type: 'foo', payload: {} };\n    const bar = { type: 'bar', payload: {} };\n    const actionQueue = [foo, bar];\n    await releaseQueue(actionQueue);\n    expect(mockDispatch).toHaveBeenCalledTimes(0);\n  });\n\n  it('dispatches only during the online window', async () => {\n    const switchToOffline = () =>\n      new Promise(async resolve => {\n        await wait(30);\n        mockGetState.mockImplementation(() => ({\n          network: {\n            isConnected: false,\n          },\n        }));\n        resolve();\n      });\n    const releaseQueue = createReleaseQueue(\n      mockGetState,\n      mockDispatch,\n      mockDelay,\n      mockDequeueSelector,\n    );\n    const foo = { type: 'foo', payload: {} };\n    const bar = { type: 'bar', payload: {} };\n    const actionQueue = [foo, bar];\n    await Promise.all([releaseQueue(actionQueue), switchToOffline()]);\n    expect(mockDispatch).toHaveBeenCalledTimes(2);\n    expect(mockDispatch).toHaveBeenNthCalledWith(\n      1,\n      actionCreators.removeActionFromQueue(foo),\n    );\n    expect(mockDispatch).toHaveBeenNthCalledWith(2, foo);\n  });\n});\n\ndescribe('createNetworkMiddleware with wrong type params', () => {\n  it('invalid regex', () => {\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    // typecasting as any because otherwise TS won't let you send a string\n    const networkMiddleware = createNetworkMiddleware({\n      regexActionType: 'REFRESH' as any,\n    });\n    const middlewares = [networkMiddleware];\n    const mockStore = configureStore(middlewares);\n\n    const store = mockStore(initialState);\n    const action = getFetchAction('REFRESH_DATA');\n\n    expect(() => store.dispatch(action)).toThrow(\n      'You should pass a regex as regexActionType param',\n    );\n  });\n\n  it('invalid actionTypes', () => {\n    const initialState = {\n      network: {\n        isConnected: false,\n        actionQueue: [],\n      },\n    };\n    const networkMiddleware = createNetworkMiddleware({\n      actionTypes: 'REFRESH',\n    });\n\n    const middlewares = [networkMiddleware];\n    const mockStore = configureStore(middlewares);\n\n    const store = mockStore(initialState);\n    const action = getFetchAction('REFRESH_DATA');\n\n    expect(() => store.dispatch(action)).toThrow(\n      'You should pass an array as actionTypes param',\n    );\n  });\n});\n"]}