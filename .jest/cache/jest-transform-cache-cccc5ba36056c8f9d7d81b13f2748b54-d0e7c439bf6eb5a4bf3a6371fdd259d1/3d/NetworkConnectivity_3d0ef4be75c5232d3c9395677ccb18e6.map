{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/components/NetworkConnectivity.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { AppState, Platform } from 'react-native';\nimport NetInfo, { NetInfoState } from '@react-native-community/netinfo';\nimport * as connectivityInterval from '../utils/checkConnectivityInterval';\nimport checkInternetAccess from '../utils/checkInternetAccess';\nimport { ConnectivityArgs, ConnectivityState } from '../types';\nimport { DEFAULT_ARGS } from '../utils/constants';\n\nexport type RequiredProps = {\n  children: (state: ConnectivityState) => React.ReactNode;\n} & DefaultProps;\n\nexport type DefaultProps = ConnectivityArgs & {\n  onConnectivityChange: (isConnected: boolean) => void;\n};\n\nfunction validateProps(props: RequiredProps) {\n  if (typeof props.onConnectivityChange !== 'function') {\n    throw new Error(\n      'you should pass a function as onConnectivityChange parameter',\n    );\n  }\n  if (typeof props.pingTimeout !== 'number') {\n    throw new Error('you should pass a number as pingTimeout parameter');\n  }\n  if (typeof props.pingServerUrl !== 'string') {\n    throw new Error('you should pass a string as pingServerUrl parameter');\n  }\n  if (typeof props.shouldPing !== 'boolean') {\n    throw new Error('you should pass a boolean as shouldPing parameter');\n  }\n  if (typeof props.pingInterval !== 'number') {\n    throw new Error('you should pass a number as pingInterval parameter');\n  }\n  if (typeof props.pingOnlyIfOffline !== 'boolean') {\n    throw new Error('you should pass a boolean as pingOnlyIfOffline parameter');\n  }\n  if (typeof props.pingInBackground !== 'boolean') {\n    throw new Error('you should pass a string as pingServerUrl parameter');\n  }\n  if (!['HEAD', 'OPTIONS'].includes(props.httpMethod)) {\n    throw new Error('httpMethod parameter should be either HEAD or OPTIONS');\n  }\n}\n\nclass NetworkConnectivity extends React.PureComponent<\n  RequiredProps,\n  ConnectivityState\n> {\n  private unsubscribe: () => void = () => undefined;\n\n  static defaultProps = {\n    ...DEFAULT_ARGS,\n    onConnectivityChange: () => undefined,\n  };\n\n  constructor(props: RequiredProps) {\n    super(props);\n    validateProps(props);\n    this.state = {\n      isConnected: true,\n    };\n  }\n\n  async componentDidMount() {\n    const { pingInterval } = this.props;\n    const handler = this.getConnectionChangeHandler();\n\n    this.unsubscribe = NetInfo.addEventListener(handler);\n    // On Android the listener does not fire on startup\n    if (Platform.OS === 'android') {\n      const netInfoState = await NetInfo.fetch();\n      handler(netInfoState);\n    }\n    if (pingInterval > 0) {\n      connectivityInterval.setup(this.intervalHandler, pingInterval);\n    }\n  }\n\n  componentDidUpdate(prevProps: RequiredProps, prevState: ConnectivityState) {\n    const { pingServerUrl, onConnectivityChange } = this.props;\n    const { isConnected } = this.state;\n    if (prevProps.pingServerUrl !== pingServerUrl) {\n      this.checkInternet();\n    }\n    if (prevState.isConnected !== isConnected) {\n      onConnectivityChange(isConnected);\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n    connectivityInterval.clear();\n  }\n\n  getConnectionChangeHandler() {\n    const { shouldPing } = this.props;\n    return shouldPing\n      ? this.handleNetInfoChange\n      : this.handleConnectivityChange;\n  }\n\n  handleNetInfoChange = (connectionState: NetInfoState) => {\n    if (!connectionState.isConnected) {\n      this.handleConnectivityChange(connectionState);\n    } else {\n      this.checkInternet();\n    }\n  };\n\n  checkInternet = async () => {\n    const {\n      pingInBackground,\n      pingTimeout,\n      pingServerUrl,\n      httpMethod,\n      customHeaders,\n    } = this.props;\n    if (pingInBackground === false && AppState.currentState !== 'active') {\n      return; // <-- Return early as we don't care about connectivity if app is not in foreground.\n    }\n    const [hasInternetAccess, netInfoState] = await Promise.all([\n      checkInternetAccess({\n        url: pingServerUrl,\n        timeout: pingTimeout,\n        method: httpMethod,\n        customHeaders,\n      }),\n      NetInfo.fetch(),\n    ]);\n\n    this.handleConnectivityChange({\n      ...netInfoState,\n      isConnected: hasInternetAccess,\n    } as NetInfoState);\n  };\n\n  intervalHandler = () => {\n    const { isConnected } = this.state;\n    const { pingOnlyIfOffline } = this.props;\n    if (isConnected && pingOnlyIfOffline === true) {\n      return;\n    }\n    this.checkInternet();\n  };\n\n  handleConnectivityChange = ({ isConnected }: NetInfoState) => {\n    this.setState({\n      isConnected,\n    });\n  };\n\n  render() {\n    const { children } = this.props;\n    return children(this.state);\n  }\n}\n\nexport default NetworkConnectivity;\n"]}