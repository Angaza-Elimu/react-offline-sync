2f66b43cb2d61dd1943eafd90b335a97
jest.mock('redux-saga');

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _utils = require("ts-jest/utils");

var _reduxSaga = require("redux-saga");

var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));

var _sagas = require("../redux/sagas");

var netInfoUnsubscribe = jest.fn();
describe('createNetInfoConnectionChangeChannel', function () {
  it('returns a redux-saga channel', function () {
    var eventChannelMock = jest.fn().mockReturnValue('channel');
    (0, _utils.mocked)(_reduxSaga.eventChannel).mockImplementation(eventChannelMock);
    var mockNetInfoChannelFn = jest.fn().mockReturnValue('handlerFn');
    expect((0, _sagas.createNetInfoConnectionChangeChannel)(mockNetInfoChannelFn)).toBe('channel');
    expect(eventChannelMock).toHaveBeenCalledWith(mockNetInfoChannelFn);
  });
  it('netInfoEventChannelFn adheres to eventChannel cb interface', function () {
    var emitMock = jest.fn();

    _netinfo.default.addEventListener.mockReturnValueOnce(netInfoUnsubscribe);

    var unsubscribe = (0, _sagas.netInfoEventChannelFn)(emitMock);
    expect(_netinfo.default.addEventListener).toHaveBeenCalledWith(emitMock);
    unsubscribe();
    expect(netInfoUnsubscribe).toHaveBeenCalledTimes(1);
  });
});
describe('createIntervalChannel', function () {
  var interval = 50;
  it('returns a redux-saga channel', function () {
    var eventChannelMock = jest.fn().mockReturnValue('channel');
    (0, _utils.mocked)(_reduxSaga.eventChannel).mockImplementation(eventChannelMock);
    var mockIntervalChannelFn = jest.fn().mockReturnValue('handlerFn');
    expect((0, _sagas.createIntervalChannel)(interval, mockIntervalChannelFn)).toBe('channel');
    expect(mockIntervalChannelFn).toHaveBeenCalledWith(interval);
    expect(_reduxSaga.eventChannel).toHaveBeenCalledWith('handlerFn');
  });
  it('intervalChannelFn adheres to eventChannel cb interface', function (done) {
    global.clearInterval = jest.fn();
    var emitMock = jest.fn();
    var unsubscribe = (0, _sagas.intervalChannelFn)(interval)(emitMock);
    setTimeout(function () {
      expect(emitMock).toHaveBeenCalledWith(true);
      done();
    }, interval + 20);
    unsubscribe();
    expect(global.clearInterval).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3Qvc2FnYUNoYW5uZWxzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxZQUFWOzs7O0FBVkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBUUEsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsRUFBTCxFQUEzQjtBQUVBLFFBQVEsQ0FBQyxzQ0FBRCxFQUF5QyxZQUFBO0FBQy9DLEVBQUEsRUFBRSxDQUFDLDhCQUFELEVBQWlDLFlBQUE7QUFDakMsUUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsRUFBTCxHQUFVLGVBQVYsQ0FBMEIsU0FBMUIsQ0FBekI7QUFDQSx1QkFBTyx1QkFBUCxFQUFxQixrQkFBckIsQ0FBd0MsZ0JBQXhDO0FBQ0EsUUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsRUFBTCxHQUFVLGVBQVYsQ0FBMEIsV0FBMUIsQ0FBN0I7QUFDQSxJQUFBLE1BQU0sQ0FBQyxpREFBcUMsb0JBQXJDLENBQUQsQ0FBTixDQUFtRSxJQUFuRSxDQUNFLFNBREY7QUFHQSxJQUFBLE1BQU0sQ0FBQyxnQkFBRCxDQUFOLENBQXlCLG9CQUF6QixDQUE4QyxvQkFBOUM7QUFDRCxHQVJDLENBQUY7QUFVQSxFQUFBLEVBQUUsQ0FBQyw0REFBRCxFQUErRCxZQUFBO0FBQy9ELFFBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFMLEVBQWpCOztBQUNDLHFCQUFRLGdCQUFSLENBQXVDLG1CQUF2QyxDQUNDLGtCQUREOztBQUdELFFBQU0sV0FBVyxHQUFHLGtDQUFzQixRQUF0QixDQUFwQjtBQUVBLElBQUEsTUFBTSxDQUFDLGlCQUFRLGdCQUFULENBQU4sQ0FBaUMsb0JBQWpDLENBQXNELFFBQXREO0FBQ0EsSUFBQSxXQUFXO0FBQ1gsSUFBQSxNQUFNLENBQUMsa0JBQUQsQ0FBTixDQUEyQixxQkFBM0IsQ0FBaUQsQ0FBakQ7QUFDRCxHQVZDLENBQUY7QUFXRCxDQXRCTyxDQUFSO0FBd0JBLFFBQVEsQ0FBQyx1QkFBRCxFQUEwQixZQUFBO0FBQ2hDLE1BQU0sUUFBUSxHQUFHLEVBQWpCO0FBQ0EsRUFBQSxFQUFFLENBQUMsOEJBQUQsRUFBaUMsWUFBQTtBQUNqQyxRQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxFQUFMLEdBQVUsZUFBVixDQUEwQixTQUExQixDQUF6QjtBQUNBLHVCQUFPLHVCQUFQLEVBQXFCLGtCQUFyQixDQUF3QyxnQkFBeEM7QUFDQSxRQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxFQUFMLEdBQVUsZUFBVixDQUEwQixXQUExQixDQUE5QjtBQUNBLElBQUEsTUFBTSxDQUFDLGtDQUFzQixRQUF0QixFQUFnQyxxQkFBaEMsQ0FBRCxDQUFOLENBQStELElBQS9ELENBQ0UsU0FERjtBQUdBLElBQUEsTUFBTSxDQUFDLHFCQUFELENBQU4sQ0FBOEIsb0JBQTlCLENBQW1ELFFBQW5EO0FBQ0EsSUFBQSxNQUFNLENBQUMsdUJBQUQsQ0FBTixDQUFxQixvQkFBckIsQ0FBMEMsV0FBMUM7QUFDRCxHQVRDLENBQUY7QUFXQSxFQUFBLEVBQUUsQ0FBQyx3REFBRCxFQUEyRCxVQUFBLElBQUEsRUFBSTtBQUMvRCxJQUFBLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLElBQUksQ0FBQyxFQUFMLEVBQXZCO0FBQ0EsUUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUwsRUFBakI7QUFDQSxRQUFNLFdBQVcsR0FBRyw4QkFBa0IsUUFBbEIsRUFBNEIsUUFBNUIsQ0FBcEI7QUFDQSxJQUFBLFVBQVUsQ0FBQyxZQUFBO0FBQ1QsTUFBQSxNQUFNLENBQUMsUUFBRCxDQUFOLENBQWlCLG9CQUFqQixDQUFzQyxJQUF0QztBQUNBLE1BQUEsSUFBSTtBQUNMLEtBSFMsRUFHUCxRQUFRLEdBQUcsRUFISixDQUFWO0FBSUEsSUFBQSxXQUFXO0FBQ1gsSUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQVIsQ0FBTixDQUE2QixnQkFBN0I7QUFDRCxHQVZDLENBQUY7QUFXRCxDQXhCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW9ja2VkIH0gZnJvbSAndHMtamVzdC91dGlscyc7XG5pbXBvcnQgeyBldmVudENoYW5uZWwgfSBmcm9tICdyZWR1eC1zYWdhJztcbmltcG9ydCBOZXRJbmZvIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L25ldGluZm8nO1xuaW1wb3J0IHtcbiAgY3JlYXRlTmV0SW5mb0Nvbm5lY3Rpb25DaGFuZ2VDaGFubmVsLFxuICBuZXRJbmZvRXZlbnRDaGFubmVsRm4sXG4gIGNyZWF0ZUludGVydmFsQ2hhbm5lbCxcbiAgaW50ZXJ2YWxDaGFubmVsRm4sXG59IGZyb20gJy4uL3JlZHV4L3NhZ2FzJztcblxuamVzdC5tb2NrKCdyZWR1eC1zYWdhJyk7XG5jb25zdCBuZXRJbmZvVW5zdWJzY3JpYmUgPSBqZXN0LmZuKCk7XG5cbmRlc2NyaWJlKCdjcmVhdGVOZXRJbmZvQ29ubmVjdGlvbkNoYW5nZUNoYW5uZWwnLCAoKSA9PiB7XG4gIGl0KCdyZXR1cm5zIGEgcmVkdXgtc2FnYSBjaGFubmVsJywgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50Q2hhbm5lbE1vY2sgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCdjaGFubmVsJyk7XG4gICAgbW9ja2VkKGV2ZW50Q2hhbm5lbCkubW9ja0ltcGxlbWVudGF0aW9uKGV2ZW50Q2hhbm5lbE1vY2spO1xuICAgIGNvbnN0IG1vY2tOZXRJbmZvQ2hhbm5lbEZuID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnaGFuZGxlckZuJyk7XG4gICAgZXhwZWN0KGNyZWF0ZU5ldEluZm9Db25uZWN0aW9uQ2hhbmdlQ2hhbm5lbChtb2NrTmV0SW5mb0NoYW5uZWxGbikpLnRvQmUoXG4gICAgICAnY2hhbm5lbCcsXG4gICAgKTtcbiAgICBleHBlY3QoZXZlbnRDaGFubmVsTW9jaykudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja05ldEluZm9DaGFubmVsRm4pO1xuICB9KTtcblxuICBpdCgnbmV0SW5mb0V2ZW50Q2hhbm5lbEZuIGFkaGVyZXMgdG8gZXZlbnRDaGFubmVsIGNiIGludGVyZmFjZScsICgpID0+IHtcbiAgICBjb25zdCBlbWl0TW9jayA9IGplc3QuZm4oKTtcbiAgICAoTmV0SW5mby5hZGRFdmVudExpc3RlbmVyIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlT25jZShcbiAgICAgIG5ldEluZm9VbnN1YnNjcmliZSxcbiAgICApO1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gbmV0SW5mb0V2ZW50Q2hhbm5lbEZuKGVtaXRNb2NrKTtcblxuICAgIGV4cGVjdChOZXRJbmZvLmFkZEV2ZW50TGlzdGVuZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGVtaXRNb2NrKTtcbiAgICB1bnN1YnNjcmliZSgpO1xuICAgIGV4cGVjdChuZXRJbmZvVW5zdWJzY3JpYmUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2NyZWF0ZUludGVydmFsQ2hhbm5lbCcsICgpID0+IHtcbiAgY29uc3QgaW50ZXJ2YWwgPSA1MDtcbiAgaXQoJ3JldHVybnMgYSByZWR1eC1zYWdhIGNoYW5uZWwnLCAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRDaGFubmVsTW9jayA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoJ2NoYW5uZWwnKTtcbiAgICBtb2NrZWQoZXZlbnRDaGFubmVsKS5tb2NrSW1wbGVtZW50YXRpb24oZXZlbnRDaGFubmVsTW9jayk7XG4gICAgY29uc3QgbW9ja0ludGVydmFsQ2hhbm5lbEZuID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnaGFuZGxlckZuJyk7XG4gICAgZXhwZWN0KGNyZWF0ZUludGVydmFsQ2hhbm5lbChpbnRlcnZhbCwgbW9ja0ludGVydmFsQ2hhbm5lbEZuKSkudG9CZShcbiAgICAgICdjaGFubmVsJyxcbiAgICApO1xuICAgIGV4cGVjdChtb2NrSW50ZXJ2YWxDaGFubmVsRm4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGludGVydmFsKTtcbiAgICBleHBlY3QoZXZlbnRDaGFubmVsKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnaGFuZGxlckZuJyk7XG4gIH0pO1xuXG4gIGl0KCdpbnRlcnZhbENoYW5uZWxGbiBhZGhlcmVzIHRvIGV2ZW50Q2hhbm5lbCBjYiBpbnRlcmZhY2UnLCBkb25lID0+IHtcbiAgICBnbG9iYWwuY2xlYXJJbnRlcnZhbCA9IGplc3QuZm4oKTtcbiAgICBjb25zdCBlbWl0TW9jayA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IGludGVydmFsQ2hhbm5lbEZuKGludGVydmFsKShlbWl0TW9jayk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBleHBlY3QoZW1pdE1vY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRydWUpO1xuICAgICAgZG9uZSgpO1xuICAgIH0sIGludGVydmFsICsgMjApO1xuICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgZXhwZWN0KGdsb2JhbC5jbGVhckludGVydmFsKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXX0=