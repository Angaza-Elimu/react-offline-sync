{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/components/NetworkProvider.tsx"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;AAMA,SAAS,eAAT,CAAyB,EAAzB,EASiB;MARf,EAAA,GAAA,EAAA,CAAA,U;MAAA,UAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,wBAAA,UAAA,GAAA,E;MACA,EAAA,GAAA,EAAA,CAAA,gB;MAAA,gBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,wBAAA,gBAAA,GAAA,E;MACA,EAAA,GAAA,EAAA,CAAA,Y;MAAA,YAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,wBAAA,YAAA,GAAA,E;MACA,EAAA,GAAA,EAAA,CAAA,iB;MAAA,iBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,wBAAA,iBAAA,GAAA,E;MACA,EAAA,GAAA,EAAA,CAAA,a;MAAA,aAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,wBAAA,aAAA,GAAA,E;MACA,EAAA,GAAA,EAAA,CAAA,W;MAAA,WAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,wBAAA,WAAA,GAAA,E;MACA,EAAA,GAAA,EAAA,CAAA,U;MAAA,UAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,wBAAA,UAAA,GAAA,E;MACA,QAAA,GAAA,EAAA,CAAA,Q;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,4BAAD,EAAoB,QAAA,CAAA,EAAA,EACd;AACF,IAAA,UAAU,EAAA,UADR;AAEF,IAAA,gBAAgB,EAAA,gBAFd;AAGF,IAAA,YAAY,EAAA,YAHV;AAIF,IAAA,iBAAiB,EAAA,iBAJf;AAKF,IAAA,aAAa,EAAA,aALX;AAMF,IAAA,WAAW,EAAA,WANT;AAOF,IAAA,UAAU,EAAA;AAPR,GADc,CAApB,EAWG,UAAA,eAAA,EAAe;AAAI,WAClB,KAAA,CAAA,aAAA,CAAC,wBAAe,QAAhB,EAAwB;AAAC,MAAA,KAAK,EAAE;AAAR,KAAxB,EADkB,QAClB,CADkB;AAInB,GAfH,CADF;AAmBD;;eAEc,e","sourcesContent":["import * as React from 'react';\nimport NetworkConnectivity from './NetworkConnectivity';\nimport NetworkContext from './NetworkContext';\nimport { ConnectivityArgs } from '../types';\nimport { DEFAULT_ARGS } from '../utils/constants';\n\ntype Props = {\n  children: React.ReactNode;\n} & ConnectivityArgs;\n\nfunction NetworkProvider({\n  httpMethod = DEFAULT_ARGS.httpMethod,\n  pingInBackground = DEFAULT_ARGS.pingInBackground,\n  pingInterval = DEFAULT_ARGS.pingInterval,\n  pingOnlyIfOffline = DEFAULT_ARGS.pingOnlyIfOffline,\n  pingServerUrl = DEFAULT_ARGS.pingServerUrl,\n  pingTimeout = DEFAULT_ARGS.pingTimeout,\n  shouldPing = DEFAULT_ARGS.shouldPing,\n  children,\n}: Partial<Props>) {\n  return (\n    <NetworkConnectivity\n      {...{\n        httpMethod,\n        pingInBackground,\n        pingInterval,\n        pingOnlyIfOffline,\n        pingServerUrl,\n        pingTimeout,\n        shouldPing,\n      }}\n    >\n      {connectionState => (\n        <NetworkContext.Provider value={connectionState}>\n          {children}\n        </NetworkContext.Provider>\n      )}\n    </NetworkConnectivity>\n  );\n}\n\nexport default NetworkProvider;\n"]}