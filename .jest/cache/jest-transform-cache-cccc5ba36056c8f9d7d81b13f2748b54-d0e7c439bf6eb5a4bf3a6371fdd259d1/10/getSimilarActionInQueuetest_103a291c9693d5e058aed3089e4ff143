f0b43e2802077beab63ab1000ae77653
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _getSimilarActionInQueue = _interopRequireDefault(require("../utils/getSimilarActionInQueue"));

describe('getSimilarActionInQueue', function () {
  describe('action is an object', function () {
    var action1 = {
      type: 'foo',
      payload: {
        bar: 1
      }
    };
    var action1Copy = {
      type: 'foo',
      payload: {
        bar: 1
      }
    };
    var action2 = {
      type: 'foo',
      payload: {
        bar: 3
      }
    };
    it('should return the action enqueued if it presents the same shape than some action passed', function () {
      expect((0, _getSimilarActionInQueue.default)(action1Copy, [action1])).toBe(action1);
    });
    it('should return undefined if the action enqueued does NOT present the same shape than the action passed', function () {
      expect((0, _getSimilarActionInQueue.default)(action1, [action2])).toBe(undefined);
    });
  });
  describe('action is a thunk', function () {
    var thunkFactory = function thunkFactory(param) {
      function thunk1(dispatch) {
        dispatch({
          type: 'FETCH_DATA_REQUEST',
          payload: param
        });
      }

      return thunk1;
    };

    function thunk2(dispatch) {
      dispatch({
        type: 'SOMETHING_ELSE'
      });
    }

    it("should return the thunk enqueued if\n     it presents the same shape than the thunk passed", function () {
      var thunk = thunkFactory('foo');
      var thunkCopy = thunkFactory('bar');
      expect((0, _getSimilarActionInQueue.default)(thunkCopy, [thunk])).toBe(thunk);
      expect((0, _getSimilarActionInQueue.default)(thunk, [thunk])).toBe(thunk);
    });
    it("should return undefined if the thunk enqueued\n     does NOT present the same shape than the thunk passed", function () {
      expect((0, _getSimilarActionInQueue.default)(thunkFactory('foo'), [thunk2])).toBe(undefined);
    });
  });
  it('returns undefined if action JS type is something different', function () {
    expect((0, _getSimilarActionInQueue.default)(false, [])).toBe(undefined);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3QvZ2V0U2ltaWxhckFjdGlvbkluUXVldWUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBOztBQUVBLFFBQVEsQ0FBQyx5QkFBRCxFQUE0QixZQUFBO0FBQ2xDLEVBQUEsUUFBUSxDQUFDLHFCQUFELEVBQXdCLFlBQUE7QUFDOUIsUUFBTSxPQUFPLEdBQUc7QUFDZCxNQUFBLElBQUksRUFBRSxLQURRO0FBRWQsTUFBQSxPQUFPLEVBQUU7QUFDUCxRQUFBLEdBQUcsRUFBRTtBQURFO0FBRkssS0FBaEI7QUFNQSxRQUFNLFdBQVcsR0FBRztBQUNsQixNQUFBLElBQUksRUFBRSxLQURZO0FBRWxCLE1BQUEsT0FBTyxFQUFFO0FBQ1AsUUFBQSxHQUFHLEVBQUU7QUFERTtBQUZTLEtBQXBCO0FBTUEsUUFBTSxPQUFPLEdBQUc7QUFDZCxNQUFBLElBQUksRUFBRSxLQURRO0FBRWQsTUFBQSxPQUFPLEVBQUU7QUFDUCxRQUFBLEdBQUcsRUFBRTtBQURFO0FBRkssS0FBaEI7QUFPQSxJQUFBLEVBQUUsQ0FBQyx5RkFBRCxFQUE0RixZQUFBO0FBQzVGLE1BQUEsTUFBTSxDQUFDLHNDQUF3QixXQUF4QixFQUFxQyxDQUFDLE9BQUQsQ0FBckMsQ0FBRCxDQUFOLENBQXdELElBQXhELENBQTZELE9BQTdEO0FBQ0QsS0FGQyxDQUFGO0FBSUEsSUFBQSxFQUFFLENBQUMsdUdBQUQsRUFBMEcsWUFBQTtBQUMxRyxNQUFBLE1BQU0sQ0FBQyxzQ0FBd0IsT0FBeEIsRUFBaUMsQ0FBQyxPQUFELENBQWpDLENBQUQsQ0FBTixDQUFvRCxJQUFwRCxDQUF5RCxTQUF6RDtBQUNELEtBRkMsQ0FBRjtBQUdELEdBM0JPLENBQVI7QUE2QkEsRUFBQSxRQUFRLENBQUMsbUJBQUQsRUFBc0IsWUFBQTtBQUM1QixRQUFNLFlBQVksR0FBRyxTQUFmLFlBQWUsQ0FBQyxLQUFELEVBQVc7QUFDOUIsZUFBUyxNQUFULENBQWdCLFFBQWhCLEVBQWtDO0FBQ2hDLFFBQUEsUUFBUSxDQUFDO0FBQUUsVUFBQSxJQUFJLEVBQUUsb0JBQVI7QUFBOEIsVUFBQSxPQUFPLEVBQUU7QUFBdkMsU0FBRCxDQUFSO0FBQ0Q7O0FBQ0QsYUFBTyxNQUFQO0FBQ0QsS0FMRDs7QUFPQSxhQUFTLE1BQVQsQ0FBZ0IsUUFBaEIsRUFBa0M7QUFDaEMsTUFBQSxRQUFRLENBQUM7QUFBRSxRQUFBLElBQUksRUFBRTtBQUFSLE9BQUQsQ0FBUjtBQUNEOztBQUVELElBQUEsRUFBRSxDQUFDLDRGQUFELEVBQ2tELFlBQUE7QUFDbEQsVUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUQsQ0FBMUI7QUFDQSxVQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBRCxDQUE5QjtBQUNBLE1BQUEsTUFBTSxDQUFDLHNDQUF3QixTQUF4QixFQUFtQyxDQUFDLEtBQUQsQ0FBbkMsQ0FBRCxDQUFOLENBQW9ELElBQXBELENBQXlELEtBQXpEO0FBQ0EsTUFBQSxNQUFNLENBQUMsc0NBQXdCLEtBQXhCLEVBQStCLENBQUMsS0FBRCxDQUEvQixDQUFELENBQU4sQ0FBZ0QsSUFBaEQsQ0FBcUQsS0FBckQ7QUFDRCxLQU5DLENBQUY7QUFRQSxJQUFBLEVBQUUsQ0FBQywyR0FBRCxFQUN1RCxZQUFBO0FBQ3ZELE1BQUEsTUFBTSxDQUFDLHNDQUF3QixZQUFZLENBQUMsS0FBRCxDQUFwQyxFQUE2QyxDQUFDLE1BQUQsQ0FBN0MsQ0FBRCxDQUFOLENBQStELElBQS9ELENBQ0UsU0FERjtBQUdELEtBTEMsQ0FBRjtBQU1ELEdBMUJPLENBQVI7QUE0QkEsRUFBQSxFQUFFLENBQUMsNERBQUQsRUFBK0QsWUFBQTtBQUMvRCxJQUFBLE1BQU0sQ0FBQyxzQ0FBd0IsS0FBeEIsRUFBK0IsRUFBL0IsQ0FBRCxDQUFOLENBQTJDLElBQTNDLENBQWdELFNBQWhEO0FBQ0QsR0FGQyxDQUFGO0FBR0QsQ0E3RE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3BhdGNoIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IGdldFNpbWlsYXJBY3Rpb25JblF1ZXVlIGZyb20gJy4uL3V0aWxzL2dldFNpbWlsYXJBY3Rpb25JblF1ZXVlJztcblxuZGVzY3JpYmUoJ2dldFNpbWlsYXJBY3Rpb25JblF1ZXVlJywgKCkgPT4ge1xuICBkZXNjcmliZSgnYWN0aW9uIGlzIGFuIG9iamVjdCcsICgpID0+IHtcbiAgICBjb25zdCBhY3Rpb24xID0ge1xuICAgICAgdHlwZTogJ2ZvbycsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIGJhcjogMSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBjb25zdCBhY3Rpb24xQ29weSA9IHtcbiAgICAgIHR5cGU6ICdmb28nLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBiYXI6IDEsXG4gICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgYWN0aW9uMiA9IHtcbiAgICAgIHR5cGU6ICdmb28nLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBiYXI6IDMsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiB0aGUgYWN0aW9uIGVucXVldWVkIGlmIGl0IHByZXNlbnRzIHRoZSBzYW1lIHNoYXBlIHRoYW4gc29tZSBhY3Rpb24gcGFzc2VkJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldFNpbWlsYXJBY3Rpb25JblF1ZXVlKGFjdGlvbjFDb3B5LCBbYWN0aW9uMV0pKS50b0JlKGFjdGlvbjEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoZSBhY3Rpb24gZW5xdWV1ZWQgZG9lcyBOT1QgcHJlc2VudCB0aGUgc2FtZSBzaGFwZSB0aGFuIHRoZSBhY3Rpb24gcGFzc2VkJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldFNpbWlsYXJBY3Rpb25JblF1ZXVlKGFjdGlvbjEsIFthY3Rpb24yXSkpLnRvQmUodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2FjdGlvbiBpcyBhIHRodW5rJywgKCkgPT4ge1xuICAgIGNvbnN0IHRodW5rRmFjdG9yeSA9IChwYXJhbTogYW55KSA9PiB7XG4gICAgICBmdW5jdGlvbiB0aHVuazEoZGlzcGF0Y2g6IERpc3BhdGNoKSB7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0ZFVENIX0RBVEFfUkVRVUVTVCcsIHBheWxvYWQ6IHBhcmFtIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRodW5rMTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdGh1bmsyKGRpc3BhdGNoOiBEaXNwYXRjaCkge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU09NRVRISU5HX0VMU0UnIH0pO1xuICAgIH1cblxuICAgIGl0KGBzaG91bGQgcmV0dXJuIHRoZSB0aHVuayBlbnF1ZXVlZCBpZlxuICAgICBpdCBwcmVzZW50cyB0aGUgc2FtZSBzaGFwZSB0aGFuIHRoZSB0aHVuayBwYXNzZWRgLCAoKSA9PiB7XG4gICAgICBjb25zdCB0aHVuayA9IHRodW5rRmFjdG9yeSgnZm9vJyk7XG4gICAgICBjb25zdCB0aHVua0NvcHkgPSB0aHVua0ZhY3RvcnkoJ2JhcicpO1xuICAgICAgZXhwZWN0KGdldFNpbWlsYXJBY3Rpb25JblF1ZXVlKHRodW5rQ29weSwgW3RodW5rXSkpLnRvQmUodGh1bmspO1xuICAgICAgZXhwZWN0KGdldFNpbWlsYXJBY3Rpb25JblF1ZXVlKHRodW5rLCBbdGh1bmtdKSkudG9CZSh0aHVuayk7XG4gICAgfSk7XG5cbiAgICBpdChgc2hvdWxkIHJldHVybiB1bmRlZmluZWQgaWYgdGhlIHRodW5rIGVucXVldWVkXG4gICAgIGRvZXMgTk9UIHByZXNlbnQgdGhlIHNhbWUgc2hhcGUgdGhhbiB0aGUgdGh1bmsgcGFzc2VkYCwgKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldFNpbWlsYXJBY3Rpb25JblF1ZXVlKHRodW5rRmFjdG9yeSgnZm9vJyksIFt0aHVuazJdKSkudG9CZShcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgdW5kZWZpbmVkIGlmIGFjdGlvbiBKUyB0eXBlIGlzIHNvbWV0aGluZyBkaWZmZXJlbnQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdldFNpbWlsYXJBY3Rpb25JblF1ZXVlKGZhbHNlLCBbXSkpLnRvQmUodW5kZWZpbmVkKTtcbiAgfSk7XG59KTtcbiJdfQ==