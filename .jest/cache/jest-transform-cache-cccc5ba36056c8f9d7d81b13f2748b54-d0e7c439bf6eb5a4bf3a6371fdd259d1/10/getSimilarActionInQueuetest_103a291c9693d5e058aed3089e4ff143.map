{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/test/getSimilarActionInQueue.test.ts"],"names":[],"mappings":";;AACA;;AAEA,QAAQ,CAAC,yBAAD,EAA4B,YAAA;AAClC,EAAA,QAAQ,CAAC,qBAAD,EAAwB,YAAA;AAC9B,QAAM,OAAO,GAAG;AACd,MAAA,IAAI,EAAE,KADQ;AAEd,MAAA,OAAO,EAAE;AACP,QAAA,GAAG,EAAE;AADE;AAFK,KAAhB;AAMA,QAAM,WAAW,GAAG;AAClB,MAAA,IAAI,EAAE,KADY;AAElB,MAAA,OAAO,EAAE;AACP,QAAA,GAAG,EAAE;AADE;AAFS,KAApB;AAMA,QAAM,OAAO,GAAG;AACd,MAAA,IAAI,EAAE,KADQ;AAEd,MAAA,OAAO,EAAE;AACP,QAAA,GAAG,EAAE;AADE;AAFK,KAAhB;AAOA,IAAA,EAAE,CAAC,yFAAD,EAA4F,YAAA;AAC5F,MAAA,MAAM,CAAC,sCAAwB,WAAxB,EAAqC,CAAC,OAAD,CAArC,CAAD,CAAN,CAAwD,IAAxD,CAA6D,OAA7D;AACD,KAFC,CAAF;AAIA,IAAA,EAAE,CAAC,uGAAD,EAA0G,YAAA;AAC1G,MAAA,MAAM,CAAC,sCAAwB,OAAxB,EAAiC,CAAC,OAAD,CAAjC,CAAD,CAAN,CAAoD,IAApD,CAAyD,SAAzD;AACD,KAFC,CAAF;AAGD,GA3BO,CAAR;AA6BA,EAAA,QAAQ,CAAC,mBAAD,EAAsB,YAAA;AAC5B,QAAM,YAAY,GAAG,SAAf,YAAe,CAAC,KAAD,EAAW;AAC9B,eAAS,MAAT,CAAgB,QAAhB,EAAkC;AAChC,QAAA,QAAQ,CAAC;AAAE,UAAA,IAAI,EAAE,oBAAR;AAA8B,UAAA,OAAO,EAAE;AAAvC,SAAD,CAAR;AACD;;AACD,aAAO,MAAP;AACD,KALD;;AAOA,aAAS,MAAT,CAAgB,QAAhB,EAAkC;AAChC,MAAA,QAAQ,CAAC;AAAE,QAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD;;AAED,IAAA,EAAE,CAAC,4FAAD,EACkD,YAAA;AAClD,UAAM,KAAK,GAAG,YAAY,CAAC,KAAD,CAA1B;AACA,UAAM,SAAS,GAAG,YAAY,CAAC,KAAD,CAA9B;AACA,MAAA,MAAM,CAAC,sCAAwB,SAAxB,EAAmC,CAAC,KAAD,CAAnC,CAAD,CAAN,CAAoD,IAApD,CAAyD,KAAzD;AACA,MAAA,MAAM,CAAC,sCAAwB,KAAxB,EAA+B,CAAC,KAAD,CAA/B,CAAD,CAAN,CAAgD,IAAhD,CAAqD,KAArD;AACD,KANC,CAAF;AAQA,IAAA,EAAE,CAAC,2GAAD,EACuD,YAAA;AACvD,MAAA,MAAM,CAAC,sCAAwB,YAAY,CAAC,KAAD,CAApC,EAA6C,CAAC,MAAD,CAA7C,CAAD,CAAN,CAA+D,IAA/D,CACE,SADF;AAGD,KALC,CAAF;AAMD,GA1BO,CAAR;AA4BA,EAAA,EAAE,CAAC,4DAAD,EAA+D,YAAA;AAC/D,IAAA,MAAM,CAAC,sCAAwB,KAAxB,EAA+B,EAA/B,CAAD,CAAN,CAA2C,IAA3C,CAAgD,SAAhD;AACD,GAFC,CAAF;AAGD,CA7DO,CAAR","sourcesContent":["import { Dispatch } from 'redux';\nimport getSimilarActionInQueue from '../utils/getSimilarActionInQueue';\n\ndescribe('getSimilarActionInQueue', () => {\n  describe('action is an object', () => {\n    const action1 = {\n      type: 'foo',\n      payload: {\n        bar: 1,\n      },\n    };\n    const action1Copy = {\n      type: 'foo',\n      payload: {\n        bar: 1,\n      },\n    };\n    const action2 = {\n      type: 'foo',\n      payload: {\n        bar: 3,\n      },\n    };\n\n    it('should return the action enqueued if it presents the same shape than some action passed', () => {\n      expect(getSimilarActionInQueue(action1Copy, [action1])).toBe(action1);\n    });\n\n    it('should return undefined if the action enqueued does NOT present the same shape than the action passed', () => {\n      expect(getSimilarActionInQueue(action1, [action2])).toBe(undefined);\n    });\n  });\n\n  describe('action is a thunk', () => {\n    const thunkFactory = (param: any) => {\n      function thunk1(dispatch: Dispatch) {\n        dispatch({ type: 'FETCH_DATA_REQUEST', payload: param });\n      }\n      return thunk1;\n    };\n\n    function thunk2(dispatch: Dispatch) {\n      dispatch({ type: 'SOMETHING_ELSE' });\n    }\n\n    it(`should return the thunk enqueued if\n     it presents the same shape than the thunk passed`, () => {\n      const thunk = thunkFactory('foo');\n      const thunkCopy = thunkFactory('bar');\n      expect(getSimilarActionInQueue(thunkCopy, [thunk])).toBe(thunk);\n      expect(getSimilarActionInQueue(thunk, [thunk])).toBe(thunk);\n    });\n\n    it(`should return undefined if the thunk enqueued\n     does NOT present the same shape than the thunk passed`, () => {\n      expect(getSimilarActionInQueue(thunkFactory('foo'), [thunk2])).toBe(\n        undefined,\n      );\n    });\n  });\n\n  it('returns undefined if action JS type is something different', () => {\n    expect(getSimilarActionInQueue(false, [])).toBe(undefined);\n  });\n});\n"]}