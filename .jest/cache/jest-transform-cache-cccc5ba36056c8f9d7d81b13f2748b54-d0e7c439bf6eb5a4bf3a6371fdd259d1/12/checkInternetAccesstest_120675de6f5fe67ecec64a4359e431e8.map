{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/test/checkInternetAccess.test.ts"],"names":[],"mappings":"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","sourcesContent":["import checkInternetAccess from '../utils/checkInternetAccess';\nimport makeHttpRequest from '../utils/makeHttpRequest';\nimport {\n  DEFAULT_HTTP_METHOD,\n  DEFAULT_PING_SERVER_URL,\n  DEFAULT_TIMEOUT,\n  DEFAULT_CUSTOM_HEADERS,\n} from '../utils/constants';\n\njest.mock('../utils/makeHttpRequest', () =>\n  jest.fn(params => {\n    if (params.method === 'FAIL') {\n      return Promise.reject(false);\n    }\n    return Promise.resolve(true);\n  }),\n);\n\ndescribe('checkInternetAccess', () => {\n  it('uses defaults parameters if no args are passed', async () => {\n    await checkInternetAccess();\n    expect(makeHttpRequest).toHaveBeenCalledWith({\n      timeout: DEFAULT_TIMEOUT,\n      url: DEFAULT_PING_SERVER_URL,\n      method: DEFAULT_HTTP_METHOD,\n      customHeaders: DEFAULT_CUSTOM_HEADERS,\n    });\n  });\n\n  it('resolves to true if there is Internet access', async () => {\n    const timeout = 2000;\n    const url = 'foo.com';\n    const hasInternetAccess = await checkInternetAccess({\n      url,\n      timeout,\n      customHeaders: DEFAULT_CUSTOM_HEADERS,\n    });\n    expect(makeHttpRequest).toHaveBeenCalledWith({\n      url,\n      timeout,\n      method: DEFAULT_HTTP_METHOD,\n      customHeaders: DEFAULT_CUSTOM_HEADERS,\n    });\n    expect(hasInternetAccess).toBe(true);\n  });\n\n  it('resolves to false if there is NOT Internet access', async () => {\n    const timeout = 2000;\n    const url = 'foo123321.com';\n    const method = 'FAIL';\n    const customHeaders = DEFAULT_CUSTOM_HEADERS;\n    const hasInternetAccess = await checkInternetAccess({\n      timeout,\n      url,\n      method,\n      customHeaders,\n    } as any); // typecasting it because method can only be HEAD, OPTIONS as per TS\n    expect(makeHttpRequest).toHaveBeenCalledWith({\n      timeout,\n      url,\n      method,\n      customHeaders,\n    });\n    expect(hasInternetAccess).toBe(false);\n  });\n\n  it('resolves to true if there is internet access after including custom headers as well', async () => {\n    const timeout = 2000;\n    const url = 'foo.com';\n    const customHeadersToAdd = {\n      'any-cool-header-key': 'something-cool',\n    };\n    const hasInternetAccess = await checkInternetAccess({\n      url,\n      timeout,\n      customHeaders: customHeadersToAdd,\n    });\n    expect(makeHttpRequest).toHaveBeenCalledWith({\n      url,\n      timeout,\n      method: DEFAULT_HTTP_METHOD,\n      customHeaders: customHeadersToAdd,\n    });\n    expect(hasInternetAccess).toBe(true);\n  });\n});\n"]}