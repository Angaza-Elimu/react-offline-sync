{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/test/makeHttpRequest.test.ts"],"names":[],"mappings":"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","sourcesContent":["import makeHttpRequest, { headers } from '../utils/makeHttpRequest';\nimport {\n  DEFAULT_HTTP_METHOD,\n  DEFAULT_PING_SERVER_URL,\n  DEFAULT_TIMEOUT,\n} from '../utils/constants';\n\nconst mockOpen = jest.fn();\nconst mockSetRequestHeader = jest.fn();\nconst mockSend = jest.fn();\nconst mockSetTimeout = jest.fn();\nconst mockOnLoad = jest.fn();\nconst mockOnError = jest.fn();\nconst mockOnTimeout = jest.fn();\n\ntype Fn = () => any;\n\n// @ts-ignore\nglobal.XMLHttpRequest = class MockXMLHttpRequest {\n  // @ts-ignore\n  private status = 0;\n\n  // @ts-ignore\n  private t = 0;\n\n  private callbackToFire: string;\n\n  constructor(callbackToFire = '') {\n    this.callbackToFire = callbackToFire;\n    switch (callbackToFire) {\n      case 'onload/2xx':\n        this.status = 200;\n        break;\n      case 'onload/3xx':\n        this.status = 304;\n        break;\n      case 'onload/4xx':\n        this.status = 403;\n        break;\n      case 'onload/5xx':\n        this.status = 500;\n        break;\n      case 'onerror':\n      case 'ontimeout':\n        this.status = -1;\n        break;\n      default:\n        this.status = 0;\n    }\n  }\n\n  set timeout(t: number) {\n    mockSetTimeout(t);\n    this.t = t;\n  }\n\n  set onload(fn: Fn) {\n    mockOnLoad();\n    if (this.callbackToFire.includes('onload')) {\n      fn.call(this);\n    }\n  }\n\n  set onerror(fn: Fn) {\n    mockOnError();\n    if (this.callbackToFire === 'onerror') {\n      fn.call(this);\n    }\n  }\n\n  set ontimeout(fn: Fn) {\n    mockOnTimeout();\n    if (this.callbackToFire === 'ontimeout') {\n      fn.call(this);\n    }\n  }\n};\n\n// @ts-ignore\nglobal.XMLHttpRequest.prototype.open = mockOpen;\n// @ts-ignore\nglobal.XMLHttpRequest.prototype.setRequestHeader = mockSetRequestHeader;\n// @ts-ignore\nglobal.XMLHttpRequest.prototype.send = mockSend;\n\ndescribe('makeHttpRequest', () => {\n  afterEach(() => {\n    mockOpen.mockClear();\n    mockSend.mockClear();\n    mockSetTimeout.mockClear();\n    mockSetRequestHeader.mockClear();\n    mockOnLoad.mockClear();\n    mockOnError.mockClear();\n    mockOnTimeout.mockClear();\n  });\n  const params = {\n    method: 'HEAD' as 'HEAD',\n    url: 'foo.com',\n    timeout: 5000,\n  };\n  it('sets up the XMLHttpRequest configuration properly', async () => {\n    const headerKeys = Object.keys(headers);\n    makeHttpRequest(params);\n    expect(mockOpen).toHaveBeenCalledWith(params.method, params.url);\n    expect(mockSetTimeout).toHaveBeenCalledWith(params.timeout);\n    expect(mockOnLoad).toHaveBeenCalledTimes(1);\n    expect(mockOnError).toHaveBeenCalledTimes(1);\n    expect(mockOnTimeout).toHaveBeenCalledTimes(1);\n    expect(mockSetRequestHeader).toHaveBeenCalledTimes(3);\n    headerKeys.forEach((key, index) => {\n      const k = key as keyof typeof headers;\n      expect(mockSetRequestHeader).toHaveBeenNthCalledWith(\n        index + 1,\n        k,\n        headers[k],\n      );\n    });\n    expect(mockSend).toHaveBeenCalledWith(null);\n  });\n\n  it('accepts custom headers', () => {\n    makeHttpRequest({ ...params, customHeaders: { foo: 'bar' } });\n    expect(mockSetRequestHeader).toHaveBeenNthCalledWith(4, 'foo', 'bar');\n  });\n\n  it('default parameters', () => {\n    makeHttpRequest();\n    expect(mockOpen).toHaveBeenCalledWith(\n      DEFAULT_HTTP_METHOD,\n      DEFAULT_PING_SERVER_URL,\n    );\n    expect(mockSetTimeout).toHaveBeenCalledWith(DEFAULT_TIMEOUT);\n  });\n\n  describe('onload', () => {\n    it('resolves the promise if status is 2xx or 3xx', async () => {\n      let result = await makeHttpRequest({\n        ...params,\n        testMethod: 'onload/2xx',\n      });\n      expect(result).toEqual({ status: 200 });\n\n      result = await makeHttpRequest({\n        ...params,\n        testMethod: 'onload/3xx',\n      });\n\n      expect(result).toEqual({ status: 304 });\n    });\n\n    it('rejects the promise if status is 4xx or 5xx', async () => {\n      try {\n        await makeHttpRequest({\n          ...params,\n          testMethod: 'onload/4xx',\n        });\n      } catch (e) {\n        expect(e).toEqual({ status: 403 });\n      }\n\n      try {\n        await makeHttpRequest({\n          ...params,\n          testMethod: 'onload/5xx',\n        });\n      } catch (e) {\n        expect(e).toEqual({ status: 500 });\n      }\n    });\n  });\n\n  describe('onerror', () => {\n    it('rejects the promise with the xhr status', async () => {\n      try {\n        await makeHttpRequest({\n          ...params,\n          testMethod: 'onerror',\n        });\n      } catch (e) {\n        expect(e).toEqual({ status: -1 });\n      }\n    });\n  });\n\n  describe('ontimeout', () => {\n    it('rejects the promise with the xhr status', async () => {\n      try {\n        await makeHttpRequest({\n          ...params,\n          testMethod: 'ontimeout',\n        });\n      } catch (e) {\n        expect(e).toEqual({ status: -1 });\n      }\n    });\n  });\n});\n"]}