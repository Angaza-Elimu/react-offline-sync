d579e866ff11736358952f00e9e591dc
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _makeHttpRequest = _interopRequireWildcard(require("../utils/makeHttpRequest"));

var _constants = require("../utils/constants");

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var mockOpen = jest.fn();
var mockSetRequestHeader = jest.fn();
var mockSend = jest.fn();
var mockSetTimeout = jest.fn();
var mockOnLoad = jest.fn();
var mockOnError = jest.fn();
var mockOnTimeout = jest.fn();

global.XMLHttpRequest = function () {
  function MockXMLHttpRequest(callbackToFire) {
    if (callbackToFire === void 0) {
      callbackToFire = '';
    }

    this.status = 0;
    this.t = 0;
    this.callbackToFire = callbackToFire;

    switch (callbackToFire) {
      case 'onload/2xx':
        this.status = 200;
        break;

      case 'onload/3xx':
        this.status = 304;
        break;

      case 'onload/4xx':
        this.status = 403;
        break;

      case 'onload/5xx':
        this.status = 500;
        break;

      case 'onerror':
      case 'ontimeout':
        this.status = -1;
        break;

      default:
        this.status = 0;
    }
  }

  Object.defineProperty(MockXMLHttpRequest.prototype, "timeout", {
    set: function set(t) {
      mockSetTimeout(t);
      this.t = t;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MockXMLHttpRequest.prototype, "onload", {
    set: function set(fn) {
      mockOnLoad();

      if (this.callbackToFire.includes('onload')) {
        fn.call(this);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MockXMLHttpRequest.prototype, "onerror", {
    set: function set(fn) {
      mockOnError();

      if (this.callbackToFire === 'onerror') {
        fn.call(this);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MockXMLHttpRequest.prototype, "ontimeout", {
    set: function set(fn) {
      mockOnTimeout();

      if (this.callbackToFire === 'ontimeout') {
        fn.call(this);
      }
    },
    enumerable: true,
    configurable: true
  });
  return MockXMLHttpRequest;
}();

global.XMLHttpRequest.prototype.open = mockOpen;
global.XMLHttpRequest.prototype.setRequestHeader = mockSetRequestHeader;
global.XMLHttpRequest.prototype.send = mockSend;
describe('makeHttpRequest', function () {
  afterEach(function () {
    mockOpen.mockClear();
    mockSend.mockClear();
    mockSetTimeout.mockClear();
    mockSetRequestHeader.mockClear();
    mockOnLoad.mockClear();
    mockOnError.mockClear();
    mockOnTimeout.mockClear();
  });
  var params = {
    method: 'HEAD',
    url: 'foo.com',
    timeout: 5000
  };
  it('sets up the XMLHttpRequest configuration properly', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var headerKeys;
      return __generator(this, function (_a) {
        headerKeys = Object.keys(_makeHttpRequest.headers);
        (0, _makeHttpRequest.default)(params);
        expect(mockOpen).toHaveBeenCalledWith(params.method, params.url);
        expect(mockSetTimeout).toHaveBeenCalledWith(params.timeout);
        expect(mockOnLoad).toHaveBeenCalledTimes(1);
        expect(mockOnError).toHaveBeenCalledTimes(1);
        expect(mockOnTimeout).toHaveBeenCalledTimes(1);
        expect(mockSetRequestHeader).toHaveBeenCalledTimes(3);
        headerKeys.forEach(function (key, index) {
          var k = key;
          expect(mockSetRequestHeader).toHaveBeenNthCalledWith(index + 1, k, _makeHttpRequest.headers[k]);
        });
        expect(mockSend).toHaveBeenCalledWith(null);
        return [2];
      });
    });
  });
  it('accepts custom headers', function () {
    (0, _makeHttpRequest.default)(__assign(__assign({}, params), {
      customHeaders: {
        foo: 'bar'
      }
    }));
    expect(mockSetRequestHeader).toHaveBeenNthCalledWith(4, 'foo', 'bar');
  });
  it('default parameters', function () {
    (0, _makeHttpRequest.default)();
    expect(mockOpen).toHaveBeenCalledWith(_constants.DEFAULT_HTTP_METHOD, _constants.DEFAULT_PING_SERVER_URL);
    expect(mockSetTimeout).toHaveBeenCalledWith(_constants.DEFAULT_TIMEOUT);
  });
  describe('onload', function () {
    it('resolves the promise if status is 2xx or 3xx', function () {
      return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, (0, _makeHttpRequest.default)(__assign(__assign({}, params), {
                testMethod: 'onload/2xx'
              }))];

            case 1:
              result = _a.sent();
              expect(result).toEqual({
                status: 200
              });
              return [4, (0, _makeHttpRequest.default)(__assign(__assign({}, params), {
                testMethod: 'onload/3xx'
              }))];

            case 2:
              result = _a.sent();
              expect(result).toEqual({
                status: 304
              });
              return [2];
          }
        });
      });
    });
    it('rejects the promise if status is 4xx or 5xx', function () {
      return __awaiter(void 0, void 0, void 0, function () {
        var e_1, e_2;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2,, 3]);

              return [4, (0, _makeHttpRequest.default)(__assign(__assign({}, params), {
                testMethod: 'onload/4xx'
              }))];

            case 1:
              _a.sent();

              return [3, 3];

            case 2:
              e_1 = _a.sent();
              expect(e_1).toEqual({
                status: 403
              });
              return [3, 3];

            case 3:
              _a.trys.push([3, 5,, 6]);

              return [4, (0, _makeHttpRequest.default)(__assign(__assign({}, params), {
                testMethod: 'onload/5xx'
              }))];

            case 4:
              _a.sent();

              return [3, 6];

            case 5:
              e_2 = _a.sent();
              expect(e_2).toEqual({
                status: 500
              });
              return [3, 6];

            case 6:
              return [2];
          }
        });
      });
    });
  });
  describe('onerror', function () {
    it('rejects the promise with the xhr status', function () {
      return __awaiter(void 0, void 0, void 0, function () {
        var e_3;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2,, 3]);

              return [4, (0, _makeHttpRequest.default)(__assign(__assign({}, params), {
                testMethod: 'onerror'
              }))];

            case 1:
              _a.sent();

              return [3, 3];

            case 2:
              e_3 = _a.sent();
              expect(e_3).toEqual({
                status: -1
              });
              return [3, 3];

            case 3:
              return [2];
          }
        });
      });
    });
  });
  describe('ontimeout', function () {
    it('rejects the promise with the xhr status', function () {
      return __awaiter(void 0, void 0, void 0, function () {
        var e_4;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2,, 3]);

              return [4, (0, _makeHttpRequest.default)(__assign(__assign({}, params), {
                testMethod: 'ontimeout'
              }))];

            case 1:
              _a.sent();

              return [3, 3];

            case 2:
              e_4 = _a.sent();
              expect(e_4).toEqual({
                status: -1
              });
              return [3, 3];

            case 3:
              return [2];
          }
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,