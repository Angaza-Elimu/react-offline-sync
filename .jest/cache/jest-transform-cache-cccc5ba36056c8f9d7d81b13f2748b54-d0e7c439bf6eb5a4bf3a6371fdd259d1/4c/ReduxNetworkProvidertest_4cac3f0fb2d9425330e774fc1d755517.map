{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/test/ReduxNetworkProvider.test.tsx"],"names":[],"mappings":";;AAAA;;AACA;;AACA;;AAIA;;AACA;;AAIA;;;;;;;;;;;;;;;;;;AAEA,IAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,IAAM,KAAK,GAAG;AACZ,EAAA,QAAQ,EAAA,QADI;AAEZ,EAAA,WAAW,EAAE;AAFD,CAAd;;AAKA,IAAM,QAAQ,GAAG,SAAX,QAAW,CAAC,SAAD,EAAe;AAAd,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,EAAA;AAAc;;AAAK,SAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,KAAN,CAAA,EAAgB,SAAhB,CAAA;AAA4B,CAAjE;;AAEA,QAAQ,CAAC,sBAAD,EAAyB,YAAA;AAC/B,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,QAAQ,CAAC,SAAT;AACD,GAFQ,CAAT;AAIA,EAAA,QAAQ,CAAC,QAAD,EAAW,YAAA;AACjB,IAAA,EAAE,CAAC,2BAAD,EAA8B,YAAA;AACtB,UAAA,MAAA,GAAA,wCAAA,eAAA,aAAA,CAAA,0CAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,CAAA,E,qDAAA,CAAA,EAAM,MAAN;AAKR,MAAA,MAAM,CAAC,MAAD,CAAN,CAAe,eAAf;AACD,KAPC,CAAF;AASA,IAAA,EAAE,CAAC,gCAAD,EAAmC,YAAA;AAC3B,UAAA,SAAA,GAAA,uCAAA,eAAA,aAAA,CAAA,0CAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,CAAA,E,4DAAA,CAAA,EAAS,SAAT;AAMR,UAAM,SAAS,GAAG,SAAS,CAAC,KAAD,CAA3B;AACA,MAAA,MAAM,CAAC,SAAD,CAAN,CAAkB,WAAlB;AACD,KATC,CAAF;AAUD,GApBO,CAAR;AAsBA,EAAA,QAAQ,CAAC,0BAAD,EAA6B,YAAA;AACnC,IAAA,EAAE,CAAC,+DAAD,EAAkE,YAAA;AAClE,UAAM,OAAO,GAAG,qBACd,eAAA,aAAA,CAAC,0CAAD,EAAqB,QAAA,CAAA,EAAA,EAAK,KAAL,CAArB,EACE,eAAA,aAAA,CAAC,iBAAD,EAAK,IAAL,CADF,CADc,CAAhB;AAKA,MAAA,OAAO,CAAC,QAAR,GAAmB,wBAAnB,CAA4C,IAA5C;AACA,MAAA,MAAM,CAAC,KAAK,CAAC,QAAP,CAAN,CAAuB,oBAAvB,CAA4C,sCAAiB,IAAjB,CAA5C;AACA,MAAA,MAAM,CAAC,KAAK,CAAC,QAAP,CAAN,CAAuB,qBAAvB,CAA6C,CAA7C;AACD,KATC,CAAF;AAWA,IAAA,EAAE,CAAC,oFAAD,EACe,YAAA;AACf,UAAM,OAAO,GAAG,qBACd,eAAA,aAAA,CAAC,0CAAD,EAAqB,QAAA,CAAA,EAAA,EAAK,QAAQ,CAAC;AAAE,QAAA,WAAW,EAAE;AAAf,OAAD,CAAb,CAArB,EACE,eAAA,aAAA,CAAC,iBAAD,EAAK,IAAL,CADF,CADc,CAAhB;AAKA,MAAA,OAAO,CAAC,QAAR,GAAmB,wBAAnB,CAA4C,IAA5C;AACA,MAAA,MAAM,CAAC,KAAK,CAAC,QAAP,CAAN,CAAuB,GAAvB,CAA2B,gBAA3B;AACD,KATC,CAAF;AAUD,GAtBO,CAAR;AAuBD,CAlDO,CAAR;AAoDA,QAAQ,CAAC,iBAAD,EAAoB,YAAA;AAC1B,EAAA,EAAE,CAAC,iDAAD,EAAoD,YAAA;AACpD,QAAM,QAAQ,GAAG;AAAE,MAAA,WAAW,EAAE;AAAf,KAAjB;AACA,QAAM,KAAK,GAAG;AACZ,MAAA,OAAO,EAAA,QAAA,CAAA;AACL,QAAA,WAAW,EAAE,EADR;AAEL,QAAA,aAAa,EAAE;AAFV,OAAA,EAGF,QAHE;AADK,KAAd;AAQA,IAAA,MAAM,CAAC,2CAAgB,KAAhB,CAAD,CAAN,CAA+B,OAA/B,CAAuC,QAAvC;AACD,GAXC,CAAF;AAYD,CAbO,CAAR","sourcesContent":["import React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  shallow as rnShallow,\n  render as rnRender,\n} from 'react-native-testing-library';\nimport { shallow } from 'enzyme';\nimport {\n  ReduxNetworkProvider,\n  mapStateToProps,\n} from '../components/ReduxNetworkProvider';\nimport { connectionChange } from '../redux/actionCreators';\n\nconst dispatch = jest.fn();\nconst props = {\n  dispatch,\n  isConnected: false,\n};\n\nconst getProps = (overrides = {}) => ({ ...props, ...overrides });\n\ndescribe('ReduxNetworkProvider', () => {\n  afterEach(() => {\n    dispatch.mockClear();\n  });\n\n  describe('render', () => {\n    it('has the correct structure', () => {\n      const { output } = rnShallow(\n        <ReduxNetworkProvider {...props}>\n          <View />\n        </ReduxNetworkProvider>,\n      );\n      expect(output).toMatchSnapshot();\n    });\n\n    it('renders the children correctly', () => {\n      const { getByText } = rnRender(\n        <ReduxNetworkProvider {...props}>\n          <Text>Baz</Text>\n        </ReduxNetworkProvider>,\n      );\n\n      const viewChild = getByText('Baz');\n      expect(viewChild).toBeDefined();\n    });\n  });\n\n  describe('handleConnectivityChange', () => {\n    it(`dispatches a CONNECTION_CHANGE action with the new connection`, () => {\n      const wrapper = shallow<ReduxNetworkProvider>(\n        <ReduxNetworkProvider {...props}>\n          <View />\n        </ReduxNetworkProvider>,\n      );\n      wrapper.instance().handleConnectivityChange(true);\n      expect(props.dispatch).toHaveBeenCalledWith(connectionChange(true));\n      expect(props.dispatch).toHaveBeenCalledTimes(1);\n    });\n\n    it(`does NOT dispatch a CONNECTION_CHANGE action if the connection\n    did not change`, () => {\n      const wrapper = shallow<ReduxNetworkProvider>(\n        <ReduxNetworkProvider {...getProps({ isConnected: true })}>\n          <View />\n        </ReduxNetworkProvider>,\n      );\n      wrapper.instance().handleConnectivityChange(true);\n      expect(props.dispatch).not.toHaveBeenCalled();\n    });\n  });\n});\n\ndescribe('mapStateToProps', () => {\n  it('maps isConnected and actionQueue state to props', () => {\n    const expected = { isConnected: false };\n    const state = {\n      network: {\n        actionQueue: [],\n        isQueuePaused: false,\n        ...expected,\n      },\n    };\n\n    expect(mapStateToProps(state)).toEqual(expected);\n  });\n});\n"]}