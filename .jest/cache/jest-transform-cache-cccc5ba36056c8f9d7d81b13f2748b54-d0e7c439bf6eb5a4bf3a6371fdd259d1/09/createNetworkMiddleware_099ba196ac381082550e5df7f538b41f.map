{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/redux/createNetworkMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import find from 'lodash/find';\nimport get from 'lodash/get';\nimport { Middleware, MiddlewareAPI, Dispatch, AnyAction } from 'redux';\nimport {\n  fetchOfflineMode,\n  removeActionFromQueue,\n  dismissActionsFromQueue,\n} from './actionCreators';\nimport * as networkActionTypes from './actionTypes';\nimport wait from '../utils/wait';\nimport { NetworkState, EnqueuedAction } from '../types';\nimport { SEMAPHORE_COLOR } from '../utils/constants';\n\ntype GetState = MiddlewareAPI<Dispatch, State>['getState'];\ntype State = {\n  network: NetworkState;\n};\ntype ActionType = Array<string> | string;\ntype Arguments = {\n  regexActionType: RegExp;\n  actionTypes: ActionType;\n  queueReleaseThrottle: number;\n  shouldDequeueSelector: (state: State) => boolean;\n};\n\nconst DEFAULT_ARGUMENTS: Arguments = {\n  actionTypes: [],\n  regexActionType: /FETCH.*REQUEST/,\n  queueReleaseThrottle: 50,\n  shouldDequeueSelector: () => true,\n};\n\n// because I don't know how many middlewares would be added, thunk, oberservable etc\ntype StoreDispatch = (...args: any[]) => any;\n\nfunction validateParams(regexActionType: RegExp, actionTypes: ActionType) {\n  if ({}.toString.call(regexActionType) !== '[object RegExp]')\n    throw new Error('You should pass a regex as regexActionType param');\n\n  if ({}.toString.call(actionTypes) !== '[object Array]')\n    throw new Error('You should pass an array as actionTypes param');\n}\n\nfunction findActionToBeDismissed(\n  action: AnyAction,\n  actionQueue: EnqueuedAction[],\n) {\n  return find(actionQueue, a => {\n    const actionsToDismiss = get(a, 'meta.dismiss', []);\n    return actionsToDismiss.includes(action.type);\n  });\n}\n\nfunction isObjectAndShouldBeIntercepted(\n  action: EnqueuedAction,\n  regexActionType: RegExp,\n  actionTypes: ActionType,\n) {\n  if (typeof action === 'object' && 'type' in action) {\n    return (\n      regexActionType.test(action.type) || actionTypes.includes(action.type)\n    );\n  }\n  return false;\n}\n\nfunction isThunkAndShouldBeIntercepted(action: EnqueuedAction) {\n  return typeof action === 'function' && action.interceptInOffline === true;\n}\n\nfunction checkIfActionShouldBeIntercepted(\n  action: EnqueuedAction,\n  regexActionType: RegExp,\n  actionTypes: ActionType,\n): boolean {\n  return (\n    isObjectAndShouldBeIntercepted(action, regexActionType, actionTypes) ||\n    isThunkAndShouldBeIntercepted(action)\n  );\n}\n\nfunction didComeBackOnline(action: EnqueuedAction, wasConnected: boolean) {\n  if ('type' in action && 'payload' in action) {\n    return (\n      action.type === networkActionTypes.CONNECTION_CHANGE &&\n      !wasConnected &&\n      action.payload === true\n    );\n  }\n  return false;\n}\n\nfunction didQueueResume(action: EnqueuedAction, isQueuePaused: boolean) {\n  if ('type' in action && 'payload' in action) {\n    return (\n      action.type === networkActionTypes.CHANGE_QUEUE_SEMAPHORE &&\n      isQueuePaused &&\n      action.payload === SEMAPHORE_COLOR.GREEN\n    );\n  }\n  return false;\n}\n\nexport const createReleaseQueue = (\n  getState: GetState,\n  next: StoreDispatch,\n  delay: number,\n  shouldDequeueSelector: Arguments['shouldDequeueSelector'],\n) => async (queue: EnqueuedAction[]) => {\n  // eslint-disable-next-line\n  for (const action of queue) {\n    const state = getState();\n    const { isConnected, isQueuePaused } = state.network;\n    if (isConnected && !isQueuePaused && shouldDequeueSelector(state)) {\n      next(removeActionFromQueue(action));\n      next(action);\n      // eslint-disable-next-line\n      await wait(delay);\n    } else {\n      break;\n    }\n  }\n};\n\nfunction createNetworkMiddleware({\n  regexActionType = DEFAULT_ARGUMENTS.regexActionType,\n  actionTypes = DEFAULT_ARGUMENTS.actionTypes,\n  queueReleaseThrottle = DEFAULT_ARGUMENTS.queueReleaseThrottle,\n  shouldDequeueSelector = DEFAULT_ARGUMENTS.shouldDequeueSelector,\n}: Partial<Arguments> = {}): Middleware<{}, State, Dispatch> {\n  return ({ getState }: MiddlewareAPI<Dispatch, State>) => (\n    next: StoreDispatch,\n  ) => (action: EnqueuedAction) => {\n    const { isConnected, actionQueue, isQueuePaused } = getState().network;\n    const releaseQueue = createReleaseQueue(\n      getState,\n      next,\n      queueReleaseThrottle,\n      shouldDequeueSelector,\n    );\n    validateParams(regexActionType, actionTypes);\n\n    const shouldInterceptAction = checkIfActionShouldBeIntercepted(\n      action,\n      regexActionType,\n      actionTypes,\n    );\n\n    if (shouldInterceptAction && isConnected === false) {\n      // Offline, preventing the original action from being dispatched.\n      // Dispatching an internal action instead.\n      return next(fetchOfflineMode(action));\n    }\n\n    const isBackOnline = didComeBackOnline(action, isConnected);\n    const hasQueueBeenResumed = didQueueResume(action, isQueuePaused);\n\n    const shouldDequeue =\n      (isBackOnline || (isConnected && hasQueueBeenResumed)) &&\n      shouldDequeueSelector(getState());\n\n    if (shouldDequeue) {\n      // Dispatching queued actions in order of arrival (if we have any)\n      next(action);\n      return releaseQueue(actionQueue);\n    }\n\n    // Checking if we have a dismissal case\n    // narrow down type from thunk to only pass in actions with type -> AnyAction\n    if ('type' in action) {\n      const isAnyActionToBeDismissed = findActionToBeDismissed(\n        action,\n        actionQueue,\n      );\n      if (isAnyActionToBeDismissed && !isConnected) {\n        next(dismissActionsFromQueue(action.type));\n      }\n    }\n\n    // Proxy the original action to the next middleware on the chain or final dispatch\n    return next(action);\n  };\n}\n\nexport default createNetworkMiddleware;\n"]}