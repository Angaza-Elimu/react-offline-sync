2f662cfe2f6ee2ab0546265af5fc415c










'use strict';

















var TO_JS = 0;
var TO_NATIVE = 1;

var MODULE_IDS = 0;
var METHOD_IDS = 1;
var PARAMS = 2;
var MIN_TIME_BETWEEN_FLUSHES_MS = 5;


var TRACE_TAG_REACT_APPS = 1 << 17;

var DEBUG_INFO_LIMIT = 32;var

MessageQueue = function () {















  function MessageQueue() {require("@babel/runtime/helpers/classCallCheck")(this, MessageQueue);
    this._lazyCallableModules = {};
    this._queue = [[], [], [], 0];
    this._successCallbacks = new Map();
    this._failureCallbacks = new Map();
    this._callID = 0;
    this._lastFlush = 0;
    this._eventLoopStartTime = Date.now();
    this._immediatesCallback = null;

    if (__DEV__) {
      this._debugInfo = {};
      this._remoteModuleTable = {};
      this._remoteMethodTable = {};
    }

    this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(
    this);

    this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(
    this);

    this.flushedQueue = this.flushedQueue.bind(this);
    this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(
    this);

  }require("@babel/runtime/helpers/createClass")(MessageQueue, [{ key: "callFunctionReturnFlushedQueue", value: function callFunctionReturnFlushedQueue(






















    module,
    method,
    args)
    {var _this = this;
      this.__guard(function () {
        _this.__callFunction(module, method, args);
      });

      return this.flushedQueue();
    } }, { key: "callFunctionReturnResultAndFlushedQueue", value: function callFunctionReturnResultAndFlushedQueue(


    module,
    method,
    args)
    {var _this2 = this;
      var result;
      this.__guard(function () {
        result = _this2.__callFunction(module, method, args);
      });

      return [result, this.flushedQueue()];
    } }, { key: "invokeCallbackAndReturnFlushedQueue", value: function invokeCallbackAndReturnFlushedQueue(


    cbID,
    args)
    {var _this3 = this;
      this.__guard(function () {
        _this3.__invokeCallback(cbID, args);
      });

      return this.flushedQueue();
    } }, { key: "flushedQueue", value: function flushedQueue()

    {var _this4 = this;
      this.__guard(function () {
        _this4.__callImmediates();
      });

      var queue = this._queue;
      this._queue = [[], [], [], this._callID];
      return queue[0].length ? queue : null;
    } }, { key: "getEventLoopRunningTime", value: function getEventLoopRunningTime()

    {
      return Date.now() - this._eventLoopStartTime;
    } }, { key: "registerCallableModule", value: function registerCallableModule(

    name, module) {
      this._lazyCallableModules[name] = function () {return module;};
    } }, { key: "registerLazyCallableModule", value: function registerLazyCallableModule(

    name, factory) {
      var module;
      var getValue = factory;
      this._lazyCallableModules[name] = function () {
        if (getValue) {
          module = getValue();
          getValue = null;
        }
        return module;
      };
    } }, { key: "getCallableModule", value: function getCallableModule(

    name) {
      var getValue = this._lazyCallableModules[name];
      return getValue ? getValue() : null;
    } }, { key: "callNativeSyncHook", value: function callNativeSyncHook(


    moduleID,
    methodID,
    params,
    onFail,
    onSucc)
    {
      if (__DEV__) {
        require('invariant')(
        global.nativeCallSyncHook,
        'Calling synchronous methods on native ' +
        'modules is not supported in Chrome.\n\n Consider providing alternative ' +
        'methods to expose this method in debug mode, e.g. by exposing constants ' +
        'ahead-of-time.');

      }
      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
      return global.nativeCallSyncHook(moduleID, methodID, params);
    } }, { key: "processCallbacks", value: function processCallbacks(


    moduleID,
    methodID,
    params,
    onFail,
    onSucc)
    {var _this5 = this;
      if (onFail || onSucc) {
        if (__DEV__) {
          this._debugInfo[this._callID] = [moduleID, methodID];
          if (this._callID > DEBUG_INFO_LIMIT) {
            delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
          }
          if (this._successCallbacks.size > 500) {
            var info = {};
            this._successCallbacks.forEach(function (_, callID) {
              var debug = _this5._debugInfo[callID];
              var module = debug && _this5._remoteModuleTable[debug[0]];
              var method = debug && _this5._remoteMethodTable[debug[0]][debug[1]];
              info[callID] = { module: module, method: method };
            });
            require('../Utilities/warnOnce')(
            'excessive-number-of-pending-callbacks', "Please report: Excessive number of pending callbacks: " +

            this._successCallbacks.size + ". Some pending callbacks that might have leaked by never being called from native code: " +
            require('../Utilities/stringifySafe')(
            info));


          }
        }



        onFail && params.push(this._callID << 1);

        onSucc && params.push(this._callID << 1 | 1);
        this._successCallbacks.set(this._callID, onSucc);
        this._failureCallbacks.set(this._callID, onFail);
      }
      if (__DEV__) {
        global.nativeTraceBeginAsyncFlow &&
        global.nativeTraceBeginAsyncFlow(
        TRACE_TAG_REACT_APPS,
        'native',
        this._callID);

      }
      this._callID++;
    } }, { key: "enqueueNativeCall", value: function enqueueNativeCall(


    moduleID,
    methodID,
    params,
    onFail,
    onSucc)
    {
      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);

      this._queue[MODULE_IDS].push(moduleID);
      this._queue[METHOD_IDS].push(methodID);

      if (__DEV__) {




        var isValidArgument = function isValidArgument(val) {
          var t = typeof val;
          if (
          t === 'undefined' ||
          t === 'null' ||
          t === 'boolean' ||
          t === 'string')
          {
            return true;
          }
          if (t === 'number') {
            return isFinite(val);
          }
          if (t === 'function' || t !== 'object') {
            return false;
          }
          if (Array.isArray(val)) {
            return val.every(isValidArgument);
          }
          for (var k in val) {
            if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {
              return false;
            }
          }
          return true;
        };




        var replacer = function replacer(key, val) {
          var t = typeof val;
          if (t === 'function') {
            return '<<Function ' + val.name + '>>';
          } else if (t === 'number' && !isFinite(val)) {
            return '<<' + val.toString() + '>>';
          } else {
            return val;
          }
        };


        require('invariant')(
        isValidArgument(params),
        '%s is not usable as a native method argument',
        JSON.stringify(params, replacer));



        require('../Utilities/deepFreezeAndThrowOnMutationInDev')(params);
      }
      this._queue[PARAMS].push(params);

      var now = Date.now();
      if (
      global.nativeFlushQueueImmediate &&
      now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS)
      {
        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        this._lastFlush = now;
        global.nativeFlushQueueImmediate(queue);
      }
      require('../Performance/Systrace').counterEvent('pending_js_to_native_queue', this._queue[0].length);
      if (__DEV__ && this.__spy && isFinite(moduleID)) {
        this.__spy({
          type: TO_NATIVE,
          module: this._remoteModuleTable[moduleID],
          method: this._remoteMethodTable[moduleID][methodID],
          args: params });

      } else if (this.__spy) {
        this.__spy({
          type: TO_NATIVE,
          module: moduleID + '',
          method: methodID,
          args: params });

      }
    } }, { key: "createDebugLookup", value: function createDebugLookup(


    moduleID,
    name,
    methods)
    {
      if (__DEV__) {
        this._remoteModuleTable[moduleID] = name;
        this._remoteMethodTable[moduleID] = methods || [];
      }
    } }, { key: "setImmediatesCallback", value: function setImmediatesCallback(




    fn) {
      this._immediatesCallback = fn;
    } }, { key: "__guard", value: function __guard(





    fn) {
      if (this.__shouldPauseOnThrow()) {
        fn();
      } else {
        try {
          fn();
        } catch (error) {
          require('../vendor/core/ErrorUtils').reportFatalError(error);
        }
      }
    } }, { key: "__shouldPauseOnThrow", value: function __shouldPauseOnThrow()






    {
      return (

        typeof DebuggerInternal !== 'undefined' &&
        DebuggerInternal.shouldPauseOnThrow === true);

    } }, { key: "__callImmediates", value: function __callImmediates()

    {
      require('../Performance/Systrace').beginEvent('JSTimers.callImmediates()');
      if (this._immediatesCallback != null) {
        this._immediatesCallback();
      }
      require('../Performance/Systrace').endEvent();
    } }, { key: "__callFunction", value: function __callFunction(

    module, method, args) {
      this._lastFlush = Date.now();
      this._eventLoopStartTime = this._lastFlush;
      if (__DEV__ || this.__spy) {
        require('../Performance/Systrace').beginEvent(module + "." + method + "(" + require('../Utilities/stringifySafe')(args) + ")");
      } else {
        require('../Performance/Systrace').beginEvent(module + "." + method + "(...)");
      }
      if (this.__spy) {
        this.__spy({ type: TO_JS, module: module, method: method, args: args });
      }
      var moduleMethods = this.getCallableModule(module);
      require('invariant')(
      !!moduleMethods,
      'Module %s is not a registered callable module (calling %s)',
      module,
      method);

      require('invariant')(
      !!moduleMethods[method],
      'Method %s does not exist on module %s',
      method,
      module);

      var result = moduleMethods[method].apply(moduleMethods, args);
      require('../Performance/Systrace').endEvent();
      return result;
    } }, { key: "__invokeCallback", value: function __invokeCallback(

    cbID, args) {
      this._lastFlush = Date.now();
      this._eventLoopStartTime = this._lastFlush;



      var callID = cbID >>> 1;

      var isSuccess = cbID & 1;
      var callback = isSuccess ?
      this._successCallbacks.get(callID) :
      this._failureCallbacks.get(callID);

      if (__DEV__) {
        var debug = this._debugInfo[callID];
        var _module = debug && this._remoteModuleTable[debug[0]];
        var method = debug && this._remoteMethodTable[debug[0]][debug[1]];
        require('invariant')(
        callback,
        "No callback found with cbID " + cbID + " and callID " + callID + " for " + (
        method ? " " +
        _module + "." + method + " - most likely the callback was already invoked" : "module " + (
        _module || '<unknown>')) + (". Args: '" +
        require('../Utilities/stringifySafe')(args) + "'"));

        var profileName = debug ?
        '<callback for ' + _module + '.' + method + '>' :
        cbID;
        if (callback && this.__spy) {
          this.__spy({ type: TO_JS, module: null, method: profileName, args: args });
        }
        require('../Performance/Systrace').beginEvent("MessageQueue.invokeCallback(" +
        profileName + ", " + require('../Utilities/stringifySafe')(args) + ")");

      }

      if (!callback) {
        return;
      }

      this._successCallbacks.delete(callID);
      this._failureCallbacks.delete(callID);
      callback.apply(void 0, require("@babel/runtime/helpers/toConsumableArray")(args));

      if (__DEV__) {
        require('../Performance/Systrace').endEvent();
      }
    } }], [{ key: "spy", value: function spy(spyOrToggle) {if (spyOrToggle === true) {MessageQueue.prototype.__spy = function (info) {console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));};} else if (spyOrToggle === false) {MessageQueue.prototype.__spy = null;} else {MessageQueue.prototype.__spy = spyOrToggle;}} }]);return MessageQueue;}();


module.exports = MessageQueue;