{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/components/ReduxNetworkProvider.tsx"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAA,oBAAA,GAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;;AAAnC,WAAA,oBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAGE,IAAA,KAAA,CAAA,wBAAA,GAA2B,UAAC,WAAD,EAAqB;AACxC,UAAA,EAAA,GAAA,KAAA,CAAA,KAAA;AAAA,UAAE,YAAA,GAAA,EAAA,CAAA,WAAF;AAAA,UAA6B,QAAA,GAAA,EAAA,CAAA,QAA7B;;AACN,UAAI,WAAW,KAAK,YAApB,EAAkC;AAChC,QAAA,QAAQ,CAAC,sCAAiB,WAAjB,CAAD,CAAR;AACD;AACF,KALD;;;AAkBD;;AAXC,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,EAAA,GAAA,KAAA,KAAN;AAAA,QAAQ,QAAA,GAAA,EAAA,CAAA,QAAR;AAAA,QAAkB,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,CAAA,CAAlB;;AACA,WACE,KAAA,CAAA,aAAA,CAAC,4BAAD,EAAoB,QAAA,CAAA,EAAA,EACd,IADc,EACV;AACR,MAAA,oBAAoB,EAAE,KAAK;AADnB,KADU,CAApB,EAIG,YAAA;AAAM,aAAA,QAAA;AAAQ,KAJjB,CADF;AAQD,GAVD;;AATO,EAAA,oBAAA,CAAA,YAAA,GAAe,uBAAf;AAoBT,SAAA,oBAAA;AAAC,CArBD,CAAmC,KAAK,CAAC,SAAzC,CAAA;;;;AAuBA,IAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,KAAD,EAAgB;AAAK,SAAC;AAC5C,IAAA,WAAW,EAAE,KAAK,CAAC,OAAN,CAAc;AADiB,GAAD;AAE3C,CAFF;;;AAIA,IAAM,6BAA6B,GAAG,yBAAQ,eAAR,EACpC,oBADoC,CAAtC","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport NetworkConnectivity from './NetworkConnectivity';\nimport { connectionChange } from '../redux/actionCreators';\n\nimport { NetworkState, ConnectivityArgs } from '../types';\nimport { DEFAULT_ARGS } from '../utils/constants';\n\ninterface AppState {\n  network: NetworkState;\n}\n\ntype OwnProps = ConnectivityArgs;\n\ninterface StateProps {\n  isConnected: boolean;\n  dispatch: Dispatch;\n}\n\ntype Props = OwnProps &\n  StateProps & {\n    children: React.ReactNode;\n  };\nclass ReduxNetworkProvider extends React.Component<Props> {\n  static defaultProps = DEFAULT_ARGS;\n\n  handleConnectivityChange = (isConnected: boolean) => {\n    const { isConnected: wasConnected, dispatch } = this.props;\n    if (isConnected !== wasConnected) {\n      dispatch(connectionChange(isConnected));\n    }\n  };\n\n  render() {\n    const { children, ...rest } = this.props;\n    return (\n      <NetworkConnectivity\n        {...rest}\n        onConnectivityChange={this.handleConnectivityChange}\n      >\n        {() => children}\n      </NetworkConnectivity>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  isConnected: state.network.isConnected,\n});\n\nconst ConnectedReduxNetworkProvider = connect(mapStateToProps)(\n  ReduxNetworkProvider,\n);\n\nexport {\n  ConnectedReduxNetworkProvider as default,\n  ReduxNetworkProvider,\n  mapStateToProps,\n};\n"]}