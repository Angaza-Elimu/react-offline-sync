{"version":3,"sources":["/Users/DevAC/Desktop/Angaza/react-offline-sync/src/test/NetworkConsumer.test.tsx"],"names":[],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AAGA,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,EAAD,EAMlB;MALC,EAAA,GAAA,EAAA,CAAA,K;MAAA,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,E;MACA,EAAA,GAAA,EAAA,CAAA,Q;MAAA,QAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,E;AAII,SAAA,eAAA,aAAA,CAAC,wBAAD,EAAgB,QAAA,CAAA,EAAA,EAAK,KAAL,CAAhB,EAA6B,QAA7B,CAAA;AAAwD,CAN9D;;AAQA,SAAS,QAAT,GAAiB;AACf,SACE,eAAA,aAAA,CAAC,wBAAD,EAAgB,IAAhB,EACG,UAAC,EAAD,EAAgB;QAAb,WAAA,GAAA,EAAA,CAAA,W;AAAkB,WACpB,eAAA,aAAA,CAAC,iBAAD,EAAK;AAAC,MAAA,MAAM,EAAC;AAAR,KAAL,EAA+B,gBAAc,WAA7C,CADoB;AAErB,GAHH,CADF;AAOD;;AAED,QAAQ,CAAC,IAAT,CAAc,iBAAd,EAAiC,YAAA;AAC/B,EAAA,EAAE,CAAC,iDAAD,EAAoD,YAAA;AACpD,IAAA,MAAM,CAAC,YAAA;AAAM,aAAA,uCAAO,eAAA,aAAA,CAAC,QAAD,EAAP,IAAO,CAAP,CAAA;AAAoB,KAA3B,CAAN,CAAmC,OAAnC,CACE,2EACE,sFAFJ;AAID,GALC,CAAF;AAOA,EAAA,EAAE,CAAC,uDAAD,EAA0D,YAAA;AAClD,QAAA,WAAA,GAAA,uCAAA,UAAA,CAAA;AAAA,MAAA,QAAA,EAAA,eAAA,aAAA,CAAA,QAAA,EAAA,IAAA;AAAA,KAAA,CAAA,EAAA,WAAA;AACR,QAAM,SAAS,GAAG,WAAW,CAAC,gBAAD,CAA7B;AACA,IAAA,MAAM,CAAC,SAAS,CAAC,KAAV,CAAgB,QAAjB,CAAN,CAAiC,IAAjC,CAAsC,iBAAtC;AACD,GAJC,CAAF;AAKD,CAbD","sourcesContent":["import React, { ReactNode } from 'react';\nimport { Text } from 'react-native';\nimport { render } from 'react-native-testing-library';\nimport NetworkConsumer from '../components/NetworkConsumer';\nimport NetworkProvider from '../components/NetworkProvider';\n\ntype NetworkProviderProps = React.ComponentProps<typeof NetworkProvider>;\nconst getElement = ({\n  props = {} as NetworkProviderProps,\n  children = null,\n}: {\n  props?: NetworkProviderProps;\n  children: null | ReactNode;\n}) => <NetworkProvider {...props}>{children}</NetworkProvider>;\n\nfunction Consumer() {\n  return (\n    <NetworkConsumer>\n      {({ isConnected }) => (\n        <Text testID=\"connectionText\">{`Connected: ${isConnected}`}</Text>\n      )}\n    </NetworkConsumer>\n  );\n}\n\ndescribe.only('NetworkConsumer', () => {\n  it(`throws if it's not rendered within the Provider`, () => {\n    expect(() => render(<Consumer />)).toThrow(\n      'NetworkConsumer components should be rendered within NetworkProvider. ' +\n        'Make sure you are rendering a NetworkProvider at the top of your component hierarchy',\n    );\n  });\n\n  it('receives isConnected prop from Provider using context', () => {\n    const { getByTestId } = render(getElement({ children: <Consumer /> }));\n    const textChild = getByTestId('connectionText');\n    expect(textChild.props.children).toBe('Connected: true');\n  });\n});\n"]}