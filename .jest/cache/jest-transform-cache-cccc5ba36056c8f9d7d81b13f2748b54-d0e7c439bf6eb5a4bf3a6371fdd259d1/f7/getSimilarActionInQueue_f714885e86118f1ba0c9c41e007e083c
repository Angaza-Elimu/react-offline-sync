e2cdc574f08805f1bdf9f1fc1a2edcb4
/* istanbul ignore next */
var cov_2h0i4h9x4s = function () {
  var path = "/Users/DevAC/Desktop/Angaza/react-offline-sync/src/utils/getSimilarActionInQueue.ts";
  var hash = "f2b34f5b29d831f76dfc1d28f006b821382a872e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/DevAC/Desktop/Angaza/react-offline-sync/src/utils/getSimilarActionInQueue.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 29
        },
        end: {
          line: 1,
          column: 84
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "2": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 42
        }
      },
      "3": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 64
        }
      },
      "4": {
        start: {
          line: 11,
          column: 2
        },
        end: {
          line: 15,
          column: 3
        }
      },
      "5": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "6": {
        start: {
          line: 13,
          column: 6
        },
        end: {
          line: 13,
          column: 51
        }
      },
      "7": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "8": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 20,
          column: 7
        }
      },
      "9": {
        start: {
          line: 19,
          column: 6
        },
        end: {
          line: 19,
          column: 53
        }
      },
      "10": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 23,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "getSimilarActionInQueue",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 32
          }
        },
        loc: {
          start: {
            line: 10,
            column: 54
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 12,
            column: 29
          }
        },
        loc: {
          start: {
            line: 12,
            column: 46
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 29
          }
        },
        loc: {
          start: {
            line: 18,
            column: 46
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        }, {
          start: {
            line: 11,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }, {
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }],
        line: 17
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "f2b34f5b29d831f76dfc1d28f006b821382a872e"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_2h0i4h9x4s.s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

/* istanbul ignore next */
cov_2h0i4h9x4s.s[1]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_2h0i4h9x4s.s[2]++;
exports.default = getSimilarActionInQueue;

var _isEqual =
/* istanbul ignore next */
(cov_2h0i4h9x4s.s[3]++, _interopRequireDefault(require("lodash/isEqual")));

function getSimilarActionInQueue(action, actionQueue) {
  /* istanbul ignore next */
  cov_2h0i4h9x4s.f[0]++;
  cov_2h0i4h9x4s.s[4]++;

  if (typeof action === 'object') {
    /* istanbul ignore next */
    cov_2h0i4h9x4s.b[0][0]++;
    cov_2h0i4h9x4s.s[5]++;
    return actionQueue.find(function (queued) {
      /* istanbul ignore next */
      cov_2h0i4h9x4s.f[1]++;
      cov_2h0i4h9x4s.s[6]++;
      return (0, _isEqual.default)(queued, action);
    });
  } else
  /* istanbul ignore next */
  {
    cov_2h0i4h9x4s.b[0][1]++;
  }

  cov_2h0i4h9x4s.s[7]++;

  if (typeof action === 'function') {
    /* istanbul ignore next */
    cov_2h0i4h9x4s.b[1][0]++;
    cov_2h0i4h9x4s.s[8]++;
    return actionQueue.find(function (queued) {
      /* istanbul ignore next */
      cov_2h0i4h9x4s.f[2]++;
      cov_2h0i4h9x4s.s[9]++;
      return action.toString() === queued.toString();
    });
  } else
  /* istanbul ignore next */
  {
    cov_2h0i4h9x4s.b[1][1]++;
  }

  cov_2h0i4h9x4s.s[10]++;
  return undefined;
}