de40242af3cac41a2357731a1b4f84d5
/* istanbul ignore next */
var cov_sl456y0as = function () {
  var path = "/Users/DevAC/Desktop/Angaza/react-offline-sync/src/components/NetworkConsumer.tsx";
  var hash = "c2657b006db8953d28878ea5d8d6bb53c5f34876";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/DevAC/Desktop/Angaza/react-offline-sync/src/components/NetworkConsumer.tsx",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 29
        },
        end: {
          line: 1,
          column: 84
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "2": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "3": {
        start: {
          line: 8,
          column: 13
        },
        end: {
          line: 8,
          column: 53
        }
      },
      "4": {
        start: {
          line: 10,
          column: 22
        },
        end: {
          line: 10,
          column: 73
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "6": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 20,
          column: 5
        }
      },
      "7": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 5
        }
      },
      "8": {
        start: {
          line: 16,
          column: 6
        },
        end: {
          line: 16,
          column: 185
        }
      },
      "9": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "NetworkConsumer",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 24
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 78
          },
          end: {
            line: 14,
            column: 79
          }
        },
        loc: {
          start: {
            line: 14,
            column: 97
          },
          end: {
            line: 20,
            column: 3
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        }, {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "c2657b006db8953d28878ea5d8d6bb53c5f34876"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_sl456y0as.s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

/* istanbul ignore next */
cov_sl456y0as.s[1]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_sl456y0as.s[2]++;
exports.default = NetworkConsumer;

var _react =
/* istanbul ignore next */
(cov_sl456y0as.s[3]++, _interopRequireDefault(require("react")));

var _NetworkContext =
/* istanbul ignore next */
(cov_sl456y0as.s[4]++, _interopRequireDefault(require("./NetworkContext")));

function NetworkConsumer(_a) {
  /* istanbul ignore next */
  cov_sl456y0as.f[0]++;
  var children =
  /* istanbul ignore next */
  (cov_sl456y0as.s[5]++, _a.children);

  /* istanbul ignore next */
  cov_sl456y0as.s[6]++;
  return _react.default.createElement(_NetworkContext.default.Consumer, null, function (context) {
    /* istanbul ignore next */
    cov_sl456y0as.f[1]++;
    cov_sl456y0as.s[7]++;

    if (!context) {
      /* istanbul ignore next */
      cov_sl456y0as.b[0][0]++;
      cov_sl456y0as.s[8]++;
      throw new Error('NetworkConsumer components should be rendered within NetworkProvider. ' + 'Make sure you are rendering a NetworkProvider at the top of your component hierarchy');
    } else
    /* istanbul ignore next */
    {
      cov_sl456y0as.b[0][1]++;
    }

    cov_sl456y0as.s[9]++;
    return children(context);
  });
}