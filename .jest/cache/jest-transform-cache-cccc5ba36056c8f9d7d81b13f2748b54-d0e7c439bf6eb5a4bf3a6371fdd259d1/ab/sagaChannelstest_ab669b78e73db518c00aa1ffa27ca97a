55d9ec23e5531181e72f6c84a2d653bf
jest.mock('redux-saga');

var _utils = require("ts-jest/utils");

var _reduxSaga = require("redux-saga");

var _sagas = require("../redux/sagas");

describe('createNetInfoConnectionChangeChannel', function () {
  it('returns a redux-saga channel', function () {
    var eventChannelMock = jest.fn().mockReturnValue('channel');
    (0, _utils.mocked)(_reduxSaga.eventChannel).mockImplementation(eventChannelMock);
    var mockNetInfoChannelFn = jest.fn().mockReturnValue('handlerFn');
    expect((0, _sagas.createNetInfoConnectionChangeChannel)(mockNetInfoChannelFn)).toBe('channel');
    expect(eventChannelMock).toHaveBeenCalledWith(mockNetInfoChannelFn);
  });
});
describe('createIntervalChannel', function () {
  var interval = 50;
  it('returns a redux-saga channel', function () {
    var eventChannelMock = jest.fn().mockReturnValue('channel');
    (0, _utils.mocked)(_reduxSaga.eventChannel).mockImplementation(eventChannelMock);
    var mockIntervalChannelFn = jest.fn().mockReturnValue('handlerFn');
    expect((0, _sagas.createIntervalChannel)(interval, mockIntervalChannelFn)).toBe('channel');
    expect(mockIntervalChannelFn).toHaveBeenCalledWith(interval);
    expect(_reduxSaga.eventChannel).toHaveBeenCalledWith('handlerFn');
  });
  it('intervalChannelFn adheres to eventChannel cb interface', function (done) {
    global.clearInterval = jest.fn();
    var emitMock = jest.fn();
    var unsubscribe = (0, _sagas.intervalChannelFn)(interval)(emitMock);
    setTimeout(function () {
      expect(emitMock).toHaveBeenCalledWith(true);
      done();
    }, interval + 20);
    unsubscribe();
    expect(global.clearInterval).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3Qvc2FnYUNoYW5uZWxzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxZQUFWOztBQVJBOztBQUNBOztBQUNBOztBQVFBLFFBQVEsQ0FBQyxzQ0FBRCxFQUF5QyxZQUFBO0FBQy9DLEVBQUEsRUFBRSxDQUFDLDhCQUFELEVBQWlDLFlBQUE7QUFDakMsUUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsRUFBTCxHQUFVLGVBQVYsQ0FBMEIsU0FBMUIsQ0FBekI7QUFDQSx1QkFBTyx1QkFBUCxFQUFxQixrQkFBckIsQ0FBd0MsZ0JBQXhDO0FBQ0EsUUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsRUFBTCxHQUFVLGVBQVYsQ0FBMEIsV0FBMUIsQ0FBN0I7QUFDQSxJQUFBLE1BQU0sQ0FBQyxpREFBcUMsb0JBQXJDLENBQUQsQ0FBTixDQUFtRSxJQUFuRSxDQUNFLFNBREY7QUFHQSxJQUFBLE1BQU0sQ0FBQyxnQkFBRCxDQUFOLENBQXlCLG9CQUF6QixDQUE4QyxvQkFBOUM7QUFDRCxHQVJDLENBQUY7QUFVRCxDQVhPLENBQVI7QUFhQSxRQUFRLENBQUMsdUJBQUQsRUFBMEIsWUFBQTtBQUNoQyxNQUFNLFFBQVEsR0FBRyxFQUFqQjtBQUNBLEVBQUEsRUFBRSxDQUFDLDhCQUFELEVBQWlDLFlBQUE7QUFDakMsUUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsRUFBTCxHQUFVLGVBQVYsQ0FBMEIsU0FBMUIsQ0FBekI7QUFDQSx1QkFBTyx1QkFBUCxFQUFxQixrQkFBckIsQ0FBd0MsZ0JBQXhDO0FBQ0EsUUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsRUFBTCxHQUFVLGVBQVYsQ0FBMEIsV0FBMUIsQ0FBOUI7QUFDQSxJQUFBLE1BQU0sQ0FBQyxrQ0FBc0IsUUFBdEIsRUFBZ0MscUJBQWhDLENBQUQsQ0FBTixDQUErRCxJQUEvRCxDQUNFLFNBREY7QUFHQSxJQUFBLE1BQU0sQ0FBQyxxQkFBRCxDQUFOLENBQThCLG9CQUE5QixDQUFtRCxRQUFuRDtBQUNBLElBQUEsTUFBTSxDQUFDLHVCQUFELENBQU4sQ0FBcUIsb0JBQXJCLENBQTBDLFdBQTFDO0FBQ0QsR0FUQyxDQUFGO0FBV0EsRUFBQSxFQUFFLENBQUMsd0RBQUQsRUFBMkQsVUFBQSxJQUFBLEVBQUk7QUFDL0QsSUFBQSxNQUFNLENBQUMsYUFBUCxHQUF1QixJQUFJLENBQUMsRUFBTCxFQUF2QjtBQUNBLFFBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFMLEVBQWpCO0FBQ0EsUUFBTSxXQUFXLEdBQUcsOEJBQWtCLFFBQWxCLEVBQTRCLFFBQTVCLENBQXBCO0FBQ0EsSUFBQSxVQUFVLENBQUMsWUFBQTtBQUNULE1BQUEsTUFBTSxDQUFDLFFBQUQsQ0FBTixDQUFpQixvQkFBakIsQ0FBc0MsSUFBdEM7QUFDQSxNQUFBLElBQUk7QUFDTCxLQUhTLEVBR1AsUUFBUSxHQUFHLEVBSEosQ0FBVjtBQUlBLElBQUEsV0FBVztBQUNYLElBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFSLENBQU4sQ0FBNkIsZ0JBQTdCO0FBQ0QsR0FWQyxDQUFGO0FBV0QsQ0F4Qk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vY2tlZCB9IGZyb20gJ3RzLWplc3QvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRDaGFubmVsIH0gZnJvbSAncmVkdXgtc2FnYSc7XG5pbXBvcnQge1xuICBjcmVhdGVOZXRJbmZvQ29ubmVjdGlvbkNoYW5nZUNoYW5uZWwsXG4gIGNyZWF0ZUludGVydmFsQ2hhbm5lbCxcbiAgaW50ZXJ2YWxDaGFubmVsRm4sXG59IGZyb20gJy4uL3JlZHV4L3NhZ2FzJztcblxuamVzdC5tb2NrKCdyZWR1eC1zYWdhJyk7XG5cbmRlc2NyaWJlKCdjcmVhdGVOZXRJbmZvQ29ubmVjdGlvbkNoYW5nZUNoYW5uZWwnLCAoKSA9PiB7XG4gIGl0KCdyZXR1cm5zIGEgcmVkdXgtc2FnYSBjaGFubmVsJywgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50Q2hhbm5lbE1vY2sgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCdjaGFubmVsJyk7XG4gICAgbW9ja2VkKGV2ZW50Q2hhbm5lbCkubW9ja0ltcGxlbWVudGF0aW9uKGV2ZW50Q2hhbm5lbE1vY2spO1xuICAgIGNvbnN0IG1vY2tOZXRJbmZvQ2hhbm5lbEZuID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnaGFuZGxlckZuJyk7XG4gICAgZXhwZWN0KGNyZWF0ZU5ldEluZm9Db25uZWN0aW9uQ2hhbmdlQ2hhbm5lbChtb2NrTmV0SW5mb0NoYW5uZWxGbikpLnRvQmUoXG4gICAgICAnY2hhbm5lbCcsXG4gICAgKTtcbiAgICBleHBlY3QoZXZlbnRDaGFubmVsTW9jaykudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja05ldEluZm9DaGFubmVsRm4pO1xuICB9KTtcblxufSk7XG5cbmRlc2NyaWJlKCdjcmVhdGVJbnRlcnZhbENoYW5uZWwnLCAoKSA9PiB7XG4gIGNvbnN0IGludGVydmFsID0gNTA7XG4gIGl0KCdyZXR1cm5zIGEgcmVkdXgtc2FnYSBjaGFubmVsJywgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50Q2hhbm5lbE1vY2sgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCdjaGFubmVsJyk7XG4gICAgbW9ja2VkKGV2ZW50Q2hhbm5lbCkubW9ja0ltcGxlbWVudGF0aW9uKGV2ZW50Q2hhbm5lbE1vY2spO1xuICAgIGNvbnN0IG1vY2tJbnRlcnZhbENoYW5uZWxGbiA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoJ2hhbmRsZXJGbicpO1xuICAgIGV4cGVjdChjcmVhdGVJbnRlcnZhbENoYW5uZWwoaW50ZXJ2YWwsIG1vY2tJbnRlcnZhbENoYW5uZWxGbikpLnRvQmUoXG4gICAgICAnY2hhbm5lbCcsXG4gICAgKTtcbiAgICBleHBlY3QobW9ja0ludGVydmFsQ2hhbm5lbEZuKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChpbnRlcnZhbCk7XG4gICAgZXhwZWN0KGV2ZW50Q2hhbm5lbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2hhbmRsZXJGbicpO1xuICB9KTtcblxuICBpdCgnaW50ZXJ2YWxDaGFubmVsRm4gYWRoZXJlcyB0byBldmVudENoYW5uZWwgY2IgaW50ZXJmYWNlJywgZG9uZSA9PiB7XG4gICAgZ2xvYmFsLmNsZWFySW50ZXJ2YWwgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgZW1pdE1vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSBpbnRlcnZhbENoYW5uZWxGbihpbnRlcnZhbCkoZW1pdE1vY2spO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZXhwZWN0KGVtaXRNb2NrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0cnVlKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9LCBpbnRlcnZhbCArIDIwKTtcbiAgICB1bnN1YnNjcmliZSgpO1xuICAgIGV4cGVjdChnbG9iYWwuY2xlYXJJbnRlcnZhbCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl19