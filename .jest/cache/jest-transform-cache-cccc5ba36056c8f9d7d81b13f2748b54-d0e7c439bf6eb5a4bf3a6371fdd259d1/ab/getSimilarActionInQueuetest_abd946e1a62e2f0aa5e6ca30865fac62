a25f0a31afedb2438ae67aad0dfc9f7b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _getSimilarActionInQueue = _interopRequireDefault(require("../utils/getSimilarActionInQueue"));

describe('getSimilarActionInQueue', function () {
  describe('action is an object', function () {
    var action1 = {
      type: 'foo',
      payload: {
        bar: 1
      }
    };
    var action1Copy = {
      type: 'foo',
      payload: {
        bar: 1
      }
    };
    var action2 = {
      type: 'foo',
      payload: {
        bar: 3
      }
    };
    it('should return the action enqueued if it presents the same shape than some action passed', function () {
      expect((0, _getSimilarActionInQueue.default)(action1Copy, [action1])).toBe(action1);
    });
    it('should return undefined if the action enqueued does NOT present the same shape than the action passed', function () {
      expect((0, _getSimilarActionInQueue.default)(action1, [action2])).toBe(undefined);
    });
  });
  describe('action is a thunk', function () {
    var thunkFactory = function thunkFactory(param) {
      function thunk1(dispatch) {
        dispatch({
          type: 'FETCH_DATA_REQUEST',
          payload: param
        });
      }

      return thunk1;
    };

    function thunk2(dispatch) {
      dispatch({
        type: 'SOMETHING_ELSE'
      });
    }

    it("should return the thunk enqueued if\n     it presents the same shape than the thunk passed", function () {
      var thunk = thunkFactory('foo');
      var thunkCopy = thunkFactory('bar');
      expect((0, _getSimilarActionInQueue.default)(thunkCopy, [thunk])).toBe(thunk);
      expect((0, _getSimilarActionInQueue.default)(thunk, [thunk])).toBe(thunk);
    });
    it("should return undefined if the thunk enqueued\n     does NOT present the same shape than the thunk passed", function () {
      expect((0, _getSimilarActionInQueue.default)(thunkFactory('foo'), [thunk2])).toBe(undefined);
    });
  });
  it('returns undefined if action JS type is something different', function () {
    expect((0, _getSimilarActionInQueue.default)(false, [])).toBe(undefined);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3QvZ2V0U2ltaWxhckFjdGlvbkluUXVldWUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBOztBQUVBLFFBQVEsQ0FBQyx5QkFBRCxFQUE0QixZQUFBO0FBQ2xDLEVBQUEsUUFBUSxDQUFDLHFCQUFELEVBQXdCLFlBQUE7QUFDOUIsUUFBTSxPQUFPLEdBQUc7QUFDZCxNQUFBLElBQUksRUFBRSxLQURRO0FBRWQsTUFBQSxPQUFPLEVBQUU7QUFDUCxRQUFBLEdBQUcsRUFBRTtBQURFO0FBRkssS0FBaEI7QUFNQSxRQUFNLFdBQVcsR0FBRztBQUNsQixNQUFBLElBQUksRUFBRSxLQURZO0FBRWxCLE1BQUEsT0FBTyxFQUFFO0FBQ1AsUUFBQSxHQUFHLEVBQUU7QUFERTtBQUZTLEtBQXBCO0FBTUEsUUFBTSxPQUFPLEdBQUc7QUFDZCxNQUFBLElBQUksRUFBRSxLQURRO0FBRWQsTUFBQSxPQUFPLEVBQUU7QUFDUCxRQUFBLEdBQUcsRUFBRTtBQURFO0FBRkssS0FBaEI7QUFPQSxJQUFBLEVBQUUsQ0FBQyx5RkFBRCxFQUE0RixZQUFBO0FBQzVGLE1BQUEsTUFBTSxDQUFDLHNDQUF3QixXQUF4QixFQUFxQyxDQUFDLE9BQUQsQ0FBckMsQ0FBRCxDQUFOLENBQXdELElBQXhELENBQTZELE9BQTdEO0FBQ0QsS0FGQyxDQUFGO0FBSUEsSUFBQSxFQUFFLENBQUMsdUdBQUQsRUFBMEcsWUFBQTtBQUMxRyxNQUFBLE1BQU0sQ0FBQyxzQ0FBd0IsT0FBeEIsRUFBaUMsQ0FBQyxPQUFELENBQWpDLENBQUQsQ0FBTixDQUFvRCxJQUFwRCxDQUF5RCxTQUF6RDtBQUNELEtBRkMsQ0FBRjtBQUdELEdBM0JPLENBQVI7QUE2QkEsRUFBQSxRQUFRLENBQUMsbUJBQUQsRUFBc0IsWUFBQTtBQUM1QixRQUFNLFlBQVksR0FBRyxTQUFmLFlBQWUsQ0FBQyxLQUFELEVBQVc7QUFDOUIsZUFBUyxNQUFULENBQWdCLFFBQWhCLEVBQWtDO0FBQ2hDLFFBQUEsUUFBUSxDQUFDO0FBQUUsVUFBQSxJQUFJLEVBQUUsb0JBQVI7QUFBOEIsVUFBQSxPQUFPLEVBQUU7QUFBdkMsU0FBRCxDQUFSO0FBQ0Q7O0FBQ0QsYUFBTyxNQUFQO0FBQ0QsS0FMRDs7QUFPQSxhQUFTLE1BQVQsQ0FBZ0IsUUFBaEIsRUFBa0M7QUFDaEMsTUFBQSxRQUFRLENBQUM7QUFBRSxRQUFBLElBQUksRUFBRTtBQUFSLE9BQUQsQ0FBUjtBQUNEOztBQUVELElBQUEsRUFBRSxDQUFDLDRGQUFELEVBQ2tELFlBQUE7QUFDbEQsVUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUQsQ0FBMUI7QUFDQSxVQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBRCxDQUE5QjtBQUNBLE1BQUEsTUFBTSxDQUFDLHNDQUF3QixTQUF4QixFQUFtQyxDQUFDLEtBQUQsQ0FBbkMsQ0FBRCxDQUFOLENBQW9ELElBQXBELENBQXlELEtBQXpEO0FBQ0EsTUFBQSxNQUFNLENBQUMsc0NBQXdCLEtBQXhCLEVBQStCLENBQUMsS0FBRCxDQUEvQixDQUFELENBQU4sQ0FBZ0QsSUFBaEQsQ0FBcUQsS0FBckQ7QUFDRCxLQU5DLENBQUY7QUFRQSxJQUFBLEVBQUUsQ0FBQywyR0FBRCxFQUN1RCxZQUFBO0FBQ3ZELE1BQUEsTUFBTSxDQUFDLHNDQUF3QixZQUFZLENBQUMsS0FBRCxDQUFwQyxFQUE2QyxDQUFDLE1BQUQsQ0FBN0MsQ0FBRCxDQUFOLENBQStELElBQS9ELENBQ0UsU0FERjtBQUdELEtBTEMsQ0FBRjtBQU1ELEdBMUJPLENBQVI7QUE0QkEsRUFBQSxFQUFFLENBQUMsNERBQUQsRUFBK0QsWUFBQTtBQUMvRCxJQUFBLE1BQU0sQ0FBQyxzQ0FBd0IsS0FBeEIsRUFBK0IsRUFBL0IsQ0FBRCxDQUFOLENBQTJDLElBQTNDLENBQWdELFNBQWhEO0FBQ0QsR0FGQyxDQUFGO0FBR0QsQ0E3RE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3BhdGNoIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IGdldFNpbWlsYXJBY3Rpb25JblF1ZXVlIGZyb20gJy4uL3NyYy91dGlscy9nZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZSc7XG5cbmRlc2NyaWJlKCdnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZScsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2FjdGlvbiBpcyBhbiBvYmplY3QnLCAoKSA9PiB7XG4gICAgY29uc3QgYWN0aW9uMSA9IHtcbiAgICAgIHR5cGU6ICdmb28nLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBiYXI6IDEsXG4gICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgYWN0aW9uMUNvcHkgPSB7XG4gICAgICB0eXBlOiAnZm9vJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgYmFyOiAxLFxuICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IGFjdGlvbjIgPSB7XG4gICAgICB0eXBlOiAnZm9vJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgYmFyOiAzLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIGFjdGlvbiBlbnF1ZXVlZCBpZiBpdCBwcmVzZW50cyB0aGUgc2FtZSBzaGFwZSB0aGFuIHNvbWUgYWN0aW9uIHBhc3NlZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZShhY3Rpb24xQ29weSwgW2FjdGlvbjFdKSkudG9CZShhY3Rpb24xKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGUgYWN0aW9uIGVucXVldWVkIGRvZXMgTk9UIHByZXNlbnQgdGhlIHNhbWUgc2hhcGUgdGhhbiB0aGUgYWN0aW9uIHBhc3NlZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZShhY3Rpb24xLCBbYWN0aW9uMl0pKS50b0JlKHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhY3Rpb24gaXMgYSB0aHVuaycsICgpID0+IHtcbiAgICBjb25zdCB0aHVua0ZhY3RvcnkgPSAocGFyYW06IGFueSkgPT4ge1xuICAgICAgZnVuY3Rpb24gdGh1bmsxKGRpc3BhdGNoOiBEaXNwYXRjaCkge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdGRVRDSF9EQVRBX1JFUVVFU1QnLCBwYXlsb2FkOiBwYXJhbSB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aHVuazE7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRodW5rMihkaXNwYXRjaDogRGlzcGF0Y2gpIHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NPTUVUSElOR19FTFNFJyB9KTtcbiAgICB9XG5cbiAgICBpdChgc2hvdWxkIHJldHVybiB0aGUgdGh1bmsgZW5xdWV1ZWQgaWZcbiAgICAgaXQgcHJlc2VudHMgdGhlIHNhbWUgc2hhcGUgdGhhbiB0aGUgdGh1bmsgcGFzc2VkYCwgKCkgPT4ge1xuICAgICAgY29uc3QgdGh1bmsgPSB0aHVua0ZhY3RvcnkoJ2ZvbycpO1xuICAgICAgY29uc3QgdGh1bmtDb3B5ID0gdGh1bmtGYWN0b3J5KCdiYXInKTtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZSh0aHVua0NvcHksIFt0aHVua10pKS50b0JlKHRodW5rKTtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZSh0aHVuaywgW3RodW5rXSkpLnRvQmUodGh1bmspO1xuICAgIH0pO1xuXG4gICAgaXQoYHNob3VsZCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoZSB0aHVuayBlbnF1ZXVlZFxuICAgICBkb2VzIE5PVCBwcmVzZW50IHRoZSBzYW1lIHNoYXBlIHRoYW4gdGhlIHRodW5rIHBhc3NlZGAsICgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZSh0aHVua0ZhY3RvcnkoJ2ZvbycpLCBbdGh1bmsyXSkpLnRvQmUoXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIHVuZGVmaW5lZCBpZiBhY3Rpb24gSlMgdHlwZSBpcyBzb21ldGhpbmcgZGlmZmVyZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChnZXRTaW1pbGFyQWN0aW9uSW5RdWV1ZShmYWxzZSwgW10pKS50b0JlKHVuZGVmaW5lZCk7XG4gIH0pO1xufSk7XG4iXX0=