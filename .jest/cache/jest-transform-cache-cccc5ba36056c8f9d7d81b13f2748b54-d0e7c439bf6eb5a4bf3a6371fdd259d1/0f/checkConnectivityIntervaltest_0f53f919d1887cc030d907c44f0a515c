8c928ae61d68deb0c8fc2f53cea00c7b
var _checkConnectivityInterval = require("../utils/checkConnectivityInterval");

describe('checkConnectivityInterval', function () {
  var mockConnectivityCheck = jest.fn();
  var setInterval = jest.fn(function () {
    return '1';
  });
  var clearInterval = jest.fn();
  global.setInterval = setInterval;
  global.clearInterval = clearInterval;
  afterEach(function () {
    setInterval.mockClear();
    clearInterval.mockClear();
    mockConnectivityCheck.mockClear();
  });
  describe('setup', function () {
    it('sets an interval if checkConnectionInterval is higher than 0', function () {
      (0, _checkConnectivityInterval.setup)(mockConnectivityCheck, 3000);
      expect(global.setInterval).toHaveBeenCalledWith(mockConnectivityCheck, 3000);
      expect((0, _checkConnectivityInterval.getInterval)()).toBe('1');
    });
    it('does nothing if checkConnectionInterval is NOT higher than 0', function () {
      (0, _checkConnectivityInterval.setup)(mockConnectivityCheck, 0);
      expect(global.setInterval).not.toHaveBeenCalled();
    });
  });
  describe('clear', function () {
    it('clears the interval if there was one active', function () {
      (0, _checkConnectivityInterval.setup)(mockConnectivityCheck, 3000);
      (0, _checkConnectivityInterval.clear)();
      expect(global.clearInterval).toHaveBeenCalledWith('1');
      expect((0, _checkConnectivityInterval.getInterval)()).toBeNull();
    });
    it('does nothing if NO previous interval was set', function () {
      (0, _checkConnectivityInterval.clear)();
      expect(global.clearInterval).not.toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZXZBQy9EZXNrdG9wL0FuZ2F6YS9yZWFjdC1vZmZsaW5lLXN5bmMvc3JjL3Rlc3QvY2hlY2tDb25uZWN0aXZpdHlJbnRlcnZhbC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQU1BLFFBQVEsQ0FBQywyQkFBRCxFQUE4QixZQUFBO0FBQ3BDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLEVBQUwsRUFBOUI7QUFDQSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBTCxDQUFRLFlBQUE7QUFBTSxXQUFBLEdBQUE7QUFBa0MsR0FBaEQsQ0FBcEI7QUFDQSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBTCxFQUF0QjtBQUNBLEVBQUEsTUFBTSxDQUFDLFdBQVAsR0FBcUIsV0FBckI7QUFDQSxFQUFBLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLGFBQXZCO0FBQ0EsRUFBQSxTQUFTLENBQUMsWUFBQTtBQUNSLElBQUEsV0FBVyxDQUFDLFNBQVo7QUFDQSxJQUFBLGFBQWEsQ0FBQyxTQUFkO0FBQ0EsSUFBQSxxQkFBcUIsQ0FBQyxTQUF0QjtBQUNELEdBSlEsQ0FBVDtBQUtBLEVBQUEsUUFBUSxDQUFDLE9BQUQsRUFBVSxZQUFBO0FBQ2hCLElBQUEsRUFBRSxDQUFDLDhEQUFELEVBQWlFLFlBQUE7QUFDakUsNENBQU0scUJBQU4sRUFBNkIsSUFBN0I7QUFDQSxNQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBUixDQUFOLENBQTJCLG9CQUEzQixDQUNFLHFCQURGLEVBRUUsSUFGRjtBQUlBLE1BQUEsTUFBTSxDQUFDLDZDQUFELENBQU4sQ0FBc0IsSUFBdEIsQ0FBMkIsR0FBM0I7QUFDRCxLQVBDLENBQUY7QUFTQSxJQUFBLEVBQUUsQ0FBQyw4REFBRCxFQUFpRSxZQUFBO0FBQ2pFLDRDQUFNLHFCQUFOLEVBQTZCLENBQTdCO0FBQ0EsTUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVIsQ0FBTixDQUEyQixHQUEzQixDQUErQixnQkFBL0I7QUFDRCxLQUhDLENBQUY7QUFJRCxHQWRPLENBQVI7QUFnQkEsRUFBQSxRQUFRLENBQUMsT0FBRCxFQUFVLFlBQUE7QUFDaEIsSUFBQSxFQUFFLENBQUMsNkNBQUQsRUFBZ0QsWUFBQTtBQUNoRCw0Q0FBTSxxQkFBTixFQUE2QixJQUE3QjtBQUNBO0FBQ0EsTUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQVIsQ0FBTixDQUE2QixvQkFBN0IsQ0FBa0QsR0FBbEQ7QUFDQSxNQUFBLE1BQU0sQ0FBQyw2Q0FBRCxDQUFOLENBQXNCLFFBQXRCO0FBQ0QsS0FMQyxDQUFGO0FBT0EsSUFBQSxFQUFFLENBQUMsOENBQUQsRUFBaUQsWUFBQTtBQUNqRDtBQUNBLE1BQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFSLENBQU4sQ0FBNkIsR0FBN0IsQ0FBaUMsZ0JBQWpDO0FBQ0QsS0FIQyxDQUFGO0FBSUQsR0FaTyxDQUFSO0FBYUQsQ0F4Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHNldHVwLFxuICBjbGVhcixcbiAgZ2V0SW50ZXJ2YWwsXG59IGZyb20gJy4uL3V0aWxzL2NoZWNrQ29ubmVjdGl2aXR5SW50ZXJ2YWwnO1xuXG5kZXNjcmliZSgnY2hlY2tDb25uZWN0aXZpdHlJbnRlcnZhbCcsICgpID0+IHtcbiAgY29uc3QgbW9ja0Nvbm5lY3Rpdml0eUNoZWNrID0gamVzdC5mbigpO1xuICBjb25zdCBzZXRJbnRlcnZhbCA9IGplc3QuZm4oKCkgPT4gKCcxJyBhcyB1bmtub3duKSBhcyBOb2RlSlMuVGltZW91dCk7XG4gIGNvbnN0IGNsZWFySW50ZXJ2YWwgPSBqZXN0LmZuKCk7XG4gIGdsb2JhbC5zZXRJbnRlcnZhbCA9IHNldEludGVydmFsO1xuICBnbG9iYWwuY2xlYXJJbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWw7XG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgc2V0SW50ZXJ2YWwubW9ja0NsZWFyKCk7XG4gICAgY2xlYXJJbnRlcnZhbC5tb2NrQ2xlYXIoKTtcbiAgICBtb2NrQ29ubmVjdGl2aXR5Q2hlY2subW9ja0NsZWFyKCk7XG4gIH0pO1xuICBkZXNjcmliZSgnc2V0dXAnLCAoKSA9PiB7XG4gICAgaXQoJ3NldHMgYW4gaW50ZXJ2YWwgaWYgY2hlY2tDb25uZWN0aW9uSW50ZXJ2YWwgaXMgaGlnaGVyIHRoYW4gMCcsICgpID0+IHtcbiAgICAgIHNldHVwKG1vY2tDb25uZWN0aXZpdHlDaGVjaywgMzAwMCk7XG4gICAgICBleHBlY3QoZ2xvYmFsLnNldEludGVydmFsKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja0Nvbm5lY3Rpdml0eUNoZWNrLFxuICAgICAgICAzMDAwLFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChnZXRJbnRlcnZhbCgpKS50b0JlKCcxJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZG9lcyBub3RoaW5nIGlmIGNoZWNrQ29ubmVjdGlvbkludGVydmFsIGlzIE5PVCBoaWdoZXIgdGhhbiAwJywgKCkgPT4ge1xuICAgICAgc2V0dXAobW9ja0Nvbm5lY3Rpdml0eUNoZWNrLCAwKTtcbiAgICAgIGV4cGVjdChnbG9iYWwuc2V0SW50ZXJ2YWwpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjbGVhcicsICgpID0+IHtcbiAgICBpdCgnY2xlYXJzIHRoZSBpbnRlcnZhbCBpZiB0aGVyZSB3YXMgb25lIGFjdGl2ZScsICgpID0+IHtcbiAgICAgIHNldHVwKG1vY2tDb25uZWN0aXZpdHlDaGVjaywgMzAwMCk7XG4gICAgICBjbGVhcigpO1xuICAgICAgZXhwZWN0KGdsb2JhbC5jbGVhckludGVydmFsKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMScpO1xuICAgICAgZXhwZWN0KGdldEludGVydmFsKCkpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZG9lcyBub3RoaW5nIGlmIE5PIHByZXZpb3VzIGludGVydmFsIHdhcyBzZXQnLCAoKSA9PiB7XG4gICAgICBjbGVhcigpO1xuICAgICAgZXhwZWN0KGdsb2JhbC5jbGVhckludGVydmFsKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19